
package jme3test.renderer;


import org.easymock.EasyMock;
import org.junit.*;
import static org.junit.Assert.*;
import com.jme3.bounding.BoundingBox;
import com.jme3.bounding.BoundingSphere;
import com.jme3.bounding.BoundingVolume;
import com.jme3.export.JmeExporter;
import com.jme3.export.JmeImporter;
import com.jme3.math.Matrix4f;
import com.jme3.math.Plane;
import com.jme3.math.Quaternion;
import com.jme3.math.Vector2f;
import com.jme3.math.Vector3f;
import com.jme3.renderer.*;
/**
 * The class <code>CameraTest</code> contains tests for the class <code>{@link CameraView}</code>.
 *
 * @generatedBy CodePro at 2013-01-07 19:30
 * @author Joseph
 * @version $Revision: 1.0 $
 */
public class CameraTest {
	/**
	 * An instance of the class being tested.
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	private CameraView fixture1;

	/**
	 * An instance of the class being tested.
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	private CameraView fixture2;

	/**
	 * An instance of the class being tested.
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	private CameraView fixture3;

	/**
	 * An instance of the class being tested.
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	private CameraView fixture4;

	/**
	 * An instance of the class being tested.
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	private CameraView fixture5;

	/**
	 * An instance of the class being tested.
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	private CameraView fixture6;

	/**
	 * An instance of the class being tested.
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	private CameraView fixture7;

	/**
	 * An instance of the class being tested.
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	private CameraView fixture8;

	/**
	 * An instance of the class being tested.
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	private CameraView fixture9;

	/**
	 * An instance of the class being tested.
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	private CameraView fixture10;

	/**
	 * An instance of the class being tested.
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	private CameraView fixture11;

	/**
	 * An instance of the class being tested.
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	private CameraView fixture12;

	/**
	 * An instance of the class being tested.
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	private CameraView fixture13;

	/**
	 * An instance of the class being tested.
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	private CameraView fixture14;

	/**
	 * An instance of the class being tested.
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	private CameraView fixture15;

	/**
	 * An instance of the class being tested.
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	private CameraView fixture16;

	/**
	 * An instance of the class being tested.
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	private CameraView fixture17;

	/**
	 * An instance of the class being tested.
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	private CameraView fixture18;

	/**
	 * An instance of the class being tested.
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	private CameraView fixture19;

	/**
	 * An instance of the class being tested.
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	private CameraView fixture20;

	/**
	 * An instance of the class being tested.
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	private CameraView fixture21;

	/**
	 * An instance of the class being tested.
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	private CameraView fixture22;

	/**
	 * An instance of the class being tested.
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	private CameraView fixture23;

	/**
	 * An instance of the class being tested.
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	private CameraView fixture24;

	/**
	 * An instance of the class being tested.
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	private CameraView fixture25;

	/**
	 * An instance of the class being tested.
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	private CameraView fixture26;

	/**
	 * An instance of the class being tested.
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	private CameraView fixture27;

	/**
	 * An instance of the class being tested.
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	private CameraView fixture28;

	/**
	 * An instance of the class being tested.
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	private CameraView fixture29;

	/**
	 * Return an instance of the class being tested.
	 *
	 * @return an instance of the class being tested
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public CameraView getFixture1()
		throws Exception {
		if (fixture1 == null) {
			fixture1 = new CameraView();
		}
		return fixture1;
	}

	/**
	 * Return an instance of the class being tested.
	 *
	 * @return an instance of the class being tested
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public CameraView getFixture2()
		throws Exception {
		if (fixture2 == null) {
			fixture2 = new CameraView(0, 0);
		}
		return fixture2;
	}

	/**
	 * Return an instance of the class being tested.
	 *
	 * @return an instance of the class being tested
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public CameraView getFixture3()
		throws Exception {
		if (fixture3 == null) {
			fixture3 = new CameraView(0, 0);
			fixture3.setFrame(Vector3f.NAN, Quaternion.DIRECTION_Z);
			fixture3.updateFrustumBottom(-1.0f);
			fixture3.updateFrustumFar(-1.0f);
			fixture3.updateFrustumLeft(-1.0f);
			fixture3.updateFrustumNear(-1.0f);
			fixture3.updateFrustumRight(-1.0f);
			fixture3.updateFrustumTop(-1.0f);
			fixture3.setName("");
			fixture3.setParallelProjection(false);
			fixture3.setPlaneState(0);
			fixture3.setProjectionMatrix(Matrix4f.IDENTITY);
			fixture3.setViewPortBottom(-1.0f);
			fixture3.setViewPortLeft(-1.0f);
			fixture3.setViewPortRight(-1.0f);
			fixture3.setViewPortTop(-1.0f);
		}
		return fixture3;
	}

	/**
	 * Return an instance of the class being tested.
	 *
	 * @return an instance of the class being tested
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public CameraView getFixture4()
		throws Exception {
		if (fixture4 == null) {
			fixture4 = new CameraView(0, 0);
			fixture4.setFrame(Vector3f.NEGATIVE_INFINITY, Quaternion.IDENTITY);
			fixture4.updateFrustumBottom(0.0f);
			fixture4.updateFrustumFar(-1.0f);
			fixture4.updateFrustumLeft(-1.0f);
			fixture4.updateFrustumNear(0.0f);
			fixture4.updateFrustumRight(0.0f);
			fixture4.updateFrustumTop(-1.0f);
			fixture4.setName("0123456789");
			fixture4.setParallelProjection(true);
			fixture4.setPlaneState(0);
			fixture4.setProjectionMatrix(Matrix4f.ZERO);
			fixture4.setViewPortBottom(0.0f);
			fixture4.setViewPortLeft(0.0f);
			fixture4.setViewPortRight(0.0f);
			fixture4.setViewPortTop(0.0f);
		}
		return fixture4;
	}

	/**
	 * Return an instance of the class being tested.
	 *
	 * @return an instance of the class being tested
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public CameraView getFixture5()
		throws Exception {
		if (fixture5 == null) {
			fixture5 = new CameraView(0, 0);
			fixture5.setFrame(Vector3f.NEGATIVE_INFINITY, Quaternion.IDENTITY);
			fixture5.updateFrustumBottom(0.0f);
			fixture5.updateFrustumFar(-1.0f);
			fixture5.updateFrustumLeft(-1.0f);
			fixture5.updateFrustumNear(0.0f);
			fixture5.updateFrustumRight(0.0f);
			fixture5.updateFrustumTop(-1.0f);
			fixture5.setName("0123456789");
			fixture5.setParallelProjection(true);
			fixture5.setPlaneState(1);
			fixture5.setProjectionMatrix(Matrix4f.ZERO);
			fixture5.setViewPortBottom(0.0f);
			fixture5.setViewPortLeft(0.0f);
			fixture5.setViewPortRight(0.0f);
			fixture5.setViewPortTop(0.0f);
		}
		return fixture5;
	}

	/**
	 * Return an instance of the class being tested.
	 *
	 * @return an instance of the class being tested
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public CameraView getFixture6()
		throws Exception {
		if (fixture6 == null) {
			fixture6 = new CameraView(0, 0);
			fixture6.setFrame(Vector3f.NEGATIVE_INFINITY, Quaternion.IDENTITY);
			fixture6.updateFrustumBottom(0.0f);
			fixture6.updateFrustumFar(-1.0f);
			fixture6.updateFrustumLeft(-1.0f);
			fixture6.updateFrustumNear(0.0f);
			fixture6.updateFrustumRight(0.0f);
			fixture6.updateFrustumTop(0.0f);
			fixture6.setName("");
			fixture6.setParallelProjection(true);
			fixture6.setPlaneState(1);
			fixture6.setProjectionMatrix(Matrix4f.ZERO);
			fixture6.setViewPortBottom(0.0f);
			fixture6.setViewPortLeft(0.0f);
			fixture6.setViewPortRight(0.0f);
			fixture6.setViewPortTop(0.0f);
		}
		return fixture6;
	}

	/**
	 * Return an instance of the class being tested.
	 *
	 * @return an instance of the class being tested
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public CameraView getFixture7()
		throws Exception {
		if (fixture7 == null) {
			fixture7 = new CameraView(0, 0);
			fixture7.setFrame(Vector3f.NEGATIVE_INFINITY, Quaternion.IDENTITY);
			fixture7.updateFrustumBottom(0.0f);
			fixture7.updateFrustumFar(-1.0f);
			fixture7.updateFrustumLeft(-1.0f);
			fixture7.updateFrustumNear(0.0f);
			fixture7.updateFrustumRight(0.0f);
			fixture7.updateFrustumTop(0.0f);
			fixture7.setName("0123456789");
			fixture7.setParallelProjection(true);
			fixture7.setPlaneState(0);
			fixture7.setProjectionMatrix(Matrix4f.ZERO);
			fixture7.setViewPortBottom(0.0f);
			fixture7.setViewPortLeft(0.0f);
			fixture7.setViewPortRight(0.0f);
			fixture7.setViewPortTop(0.0f);
		}
		return fixture7;
	}

	/**
	 * Return an instance of the class being tested.
	 *
	 * @return an instance of the class being tested
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public CameraView getFixture8()
		throws Exception {
		if (fixture8 == null) {
			fixture8 = new CameraView(0, 0);
			fixture8.setFrame(Vector3f.NEGATIVE_INFINITY, Quaternion.IDENTITY);
			fixture8.updateFrustumBottom(0.0f);
			fixture8.updateFrustumFar(-1.0f);
			fixture8.updateFrustumLeft(-1.0f);
			fixture8.updateFrustumNear(0.0f);
			fixture8.updateFrustumRight(0.0f);
			fixture8.updateFrustumTop(0.0f);
			fixture8.setName("0123456789");
			fixture8.setParallelProjection(true);
			fixture8.setPlaneState(1);
			fixture8.setProjectionMatrix(Matrix4f.ZERO);
			fixture8.setViewPortBottom(0.0f);
			fixture8.setViewPortLeft(0.0f);
			fixture8.setViewPortRight(0.0f);
			fixture8.setViewPortTop(0.0f);
		}
		return fixture8;
	}

	/**
	 * Return an instance of the class being tested.
	 *
	 * @return an instance of the class being tested
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public CameraView getFixture9()
		throws Exception {
		if (fixture9 == null) {
			fixture9 = new CameraView(0, 0);
			fixture9.setFrame(Vector3f.NEGATIVE_INFINITY, Quaternion.IDENTITY);
			fixture9.updateFrustumBottom(0.0f);
			fixture9.updateFrustumFar(-1.0f);
			fixture9.updateFrustumLeft(0.0f);
			fixture9.updateFrustumNear(0.0f);
			fixture9.updateFrustumRight(0.0f);
			fixture9.updateFrustumTop(-1.0f);
			fixture9.setName("");
			fixture9.setParallelProjection(true);
			fixture9.setPlaneState(0);
			fixture9.setProjectionMatrix(Matrix4f.ZERO);
			fixture9.setViewPortBottom(0.0f);
			fixture9.setViewPortLeft(0.0f);
			fixture9.setViewPortRight(0.0f);
			fixture9.setViewPortTop(0.0f);
		}
		return fixture9;
	}

	/**
	 * Return an instance of the class being tested.
	 *
	 * @return an instance of the class being tested
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public CameraView getFixture10()
		throws Exception {
		if (fixture10 == null) {
			fixture10 = new CameraView(0, 0);
			fixture10.setFrame(Vector3f.NEGATIVE_INFINITY, Quaternion.IDENTITY);
			fixture10.updateFrustumBottom(0.0f);
			fixture10.updateFrustumFar(-1.0f);
			fixture10.updateFrustumLeft(0.0f);
			fixture10.updateFrustumNear(0.0f);
			fixture10.updateFrustumRight(0.0f);
			fixture10.updateFrustumTop(-1.0f);
			fixture10.setName("");
			fixture10.setParallelProjection(true);
			fixture10.setPlaneState(1);
			fixture10.setProjectionMatrix(Matrix4f.ZERO);
			fixture10.setViewPortBottom(0.0f);
			fixture10.setViewPortLeft(0.0f);
			fixture10.setViewPortRight(0.0f);
			fixture10.setViewPortTop(0.0f);
		}
		return fixture10;
	}

	/**
	 * Return an instance of the class being tested.
	 *
	 * @return an instance of the class being tested
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public CameraView getFixture11()
		throws Exception {
		if (fixture11 == null) {
			fixture11 = new CameraView(0, 0);
			fixture11.setFrame(Vector3f.NEGATIVE_INFINITY, Quaternion.IDENTITY);
			fixture11.updateFrustumBottom(0.0f);
			fixture11.updateFrustumFar(-1.0f);
			fixture11.updateFrustumLeft(0.0f);
			fixture11.updateFrustumNear(0.0f);
			fixture11.updateFrustumRight(0.0f);
			fixture11.updateFrustumTop(-1.0f);
			fixture11.setName("0123456789");
			fixture11.setParallelProjection(true);
			fixture11.setPlaneState(0);
			fixture11.setProjectionMatrix(Matrix4f.ZERO);
			fixture11.setViewPortBottom(0.0f);
			fixture11.setViewPortLeft(0.0f);
			fixture11.setViewPortRight(0.0f);
			fixture11.setViewPortTop(0.0f);
		}
		return fixture11;
	}

	/**
	 * Return an instance of the class being tested.
	 *
	 * @return an instance of the class being tested
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public CameraView getFixture12()
		throws Exception {
		if (fixture12 == null) {
			fixture12 = new CameraView(0, 0);
			fixture12.setFrame(Vector3f.NEGATIVE_INFINITY, Quaternion.IDENTITY);
			fixture12.updateFrustumBottom(0.0f);
			fixture12.updateFrustumFar(-1.0f);
			fixture12.updateFrustumLeft(0.0f);
			fixture12.updateFrustumNear(0.0f);
			fixture12.updateFrustumRight(0.0f);
			fixture12.updateFrustumTop(-1.0f);
			fixture12.setName("0123456789");
			fixture12.setParallelProjection(true);
			fixture12.setPlaneState(1);
			fixture12.setProjectionMatrix(Matrix4f.ZERO);
			fixture12.setViewPortBottom(0.0f);
			fixture12.setViewPortLeft(0.0f);
			fixture12.setViewPortRight(0.0f);
			fixture12.setViewPortTop(0.0f);
		}
		return fixture12;
	}

	/**
	 * Return an instance of the class being tested.
	 *
	 * @return an instance of the class being tested
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public CameraView getFixture13()
		throws Exception {
		if (fixture13 == null) {
			fixture13 = new CameraView(0, 0);
			fixture13.setFrame(Vector3f.NEGATIVE_INFINITY, Quaternion.IDENTITY);
			fixture13.updateFrustumBottom(0.0f);
			fixture13.updateFrustumFar(-1.0f);
			fixture13.updateFrustumLeft(0.0f);
			fixture13.updateFrustumNear(0.0f);
			fixture13.updateFrustumRight(0.0f);
			fixture13.updateFrustumTop(0.0f);
			fixture13.setName("");
			fixture13.setParallelProjection(true);
			fixture13.setPlaneState(0);
			fixture13.setProjectionMatrix(Matrix4f.ZERO);
			fixture13.setViewPortBottom(0.0f);
			fixture13.setViewPortLeft(0.0f);
			fixture13.setViewPortRight(0.0f);
			fixture13.setViewPortTop(0.0f);
		}
		return fixture13;
	}

	/**
	 * Return an instance of the class being tested.
	 *
	 * @return an instance of the class being tested
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public CameraView getFixture14()
		throws Exception {
		if (fixture14 == null) {
			fixture14 = new CameraView(0, 0);
			fixture14.setFrame(Vector3f.NEGATIVE_INFINITY, Quaternion.IDENTITY);
			fixture14.updateFrustumBottom(0.0f);
			fixture14.updateFrustumFar(-1.0f);
			fixture14.updateFrustumLeft(0.0f);
			fixture14.updateFrustumNear(0.0f);
			fixture14.updateFrustumRight(0.0f);
			fixture14.updateFrustumTop(0.0f);
			fixture14.setName("");
			fixture14.setParallelProjection(true);
			fixture14.setPlaneState(1);
			fixture14.setProjectionMatrix(Matrix4f.ZERO);
			fixture14.setViewPortBottom(0.0f);
			fixture14.setViewPortLeft(0.0f);
			fixture14.setViewPortRight(0.0f);
			fixture14.setViewPortTop(0.0f);
		}
		return fixture14;
	}

	/**
	 * Return an instance of the class being tested.
	 *
	 * @return an instance of the class being tested
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public CameraView getFixture15()
		throws Exception {
		if (fixture15 == null) {
			fixture15 = new CameraView(0, 0);
			fixture15.setFrame(Vector3f.NEGATIVE_INFINITY, Quaternion.IDENTITY);
			fixture15.updateFrustumBottom(0.0f);
			fixture15.updateFrustumFar(-1.0f);
			fixture15.updateFrustumLeft(0.0f);
			fixture15.updateFrustumNear(0.0f);
			fixture15.updateFrustumRight(0.0f);
			fixture15.updateFrustumTop(0.0f);
			fixture15.setName("0123456789");
			fixture15.setParallelProjection(true);
			fixture15.setPlaneState(0);
			fixture15.setProjectionMatrix(Matrix4f.ZERO);
			fixture15.setViewPortBottom(0.0f);
			fixture15.setViewPortLeft(0.0f);
			fixture15.setViewPortRight(0.0f);
			fixture15.setViewPortTop(0.0f);
		}
		return fixture15;
	}

	/**
	 * Return an instance of the class being tested.
	 *
	 * @return an instance of the class being tested
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public CameraView getFixture16()
		throws Exception {
		if (fixture16 == null) {
			fixture16 = new CameraView(0, 0);
			fixture16.setFrame(Vector3f.NEGATIVE_INFINITY, Quaternion.IDENTITY);
			fixture16.updateFrustumBottom(0.0f);
			fixture16.updateFrustumFar(-1.0f);
			fixture16.updateFrustumLeft(0.0f);
			fixture16.updateFrustumNear(0.0f);
			fixture16.updateFrustumRight(0.0f);
			fixture16.updateFrustumTop(0.0f);
			fixture16.setName("0123456789");
			fixture16.setParallelProjection(true);
			fixture16.setPlaneState(1);
			fixture16.setProjectionMatrix(Matrix4f.ZERO);
			fixture16.setViewPortBottom(0.0f);
			fixture16.setViewPortLeft(0.0f);
			fixture16.setViewPortRight(0.0f);
			fixture16.setViewPortTop(0.0f);
		}
		return fixture16;
	}

	/**
	 * Return an instance of the class being tested.
	 *
	 * @return an instance of the class being tested
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public CameraView getFixture17()
		throws Exception {
		if (fixture17 == null) {
			fixture17 = new CameraView(0, 0);
			fixture17.setFrame(Vector3f.NEGATIVE_INFINITY, Quaternion.IDENTITY);
			fixture17.updateFrustumBottom(0.0f);
			fixture17.updateFrustumFar(0.0f);
			fixture17.updateFrustumLeft(-1.0f);
			fixture17.updateFrustumNear(0.0f);
			fixture17.updateFrustumRight(0.0f);
			fixture17.updateFrustumTop(-1.0f);
			fixture17.setName("0123456789");
			fixture17.setParallelProjection(true);
			fixture17.setPlaneState(0);
			fixture17.setProjectionMatrix(Matrix4f.ZERO);
			fixture17.setViewPortBottom(0.0f);
			fixture17.setViewPortLeft(0.0f);
			fixture17.setViewPortRight(0.0f);
			fixture17.setViewPortTop(0.0f);
		}
		return fixture17;
	}

	/**
	 * Return an instance of the class being tested.
	 *
	 * @return an instance of the class being tested
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public CameraView getFixture18()
		throws Exception {
		if (fixture18 == null) {
			fixture18 = new CameraView(0, 0);
			fixture18.setFrame(Vector3f.NEGATIVE_INFINITY, Quaternion.IDENTITY);
			fixture18.updateFrustumBottom(0.0f);
			fixture18.updateFrustumFar(0.0f);
			fixture18.updateFrustumLeft(-1.0f);
			fixture18.updateFrustumNear(0.0f);
			fixture18.updateFrustumRight(0.0f);
			fixture18.updateFrustumTop(-1.0f);
			fixture18.setName("0123456789");
			fixture18.setParallelProjection(true);
			fixture18.setPlaneState(1);
			fixture18.setProjectionMatrix(Matrix4f.ZERO);
			fixture18.setViewPortBottom(0.0f);
			fixture18.setViewPortLeft(0.0f);
			fixture18.setViewPortRight(0.0f);
			fixture18.setViewPortTop(0.0f);
		}
		return fixture18;
	}

	/**
	 * Return an instance of the class being tested.
	 *
	 * @return an instance of the class being tested
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public CameraView getFixture19()
		throws Exception {
		if (fixture19 == null) {
			fixture19 = new CameraView(0, 0);
			fixture19.setFrame(Vector3f.NEGATIVE_INFINITY, Quaternion.IDENTITY);
			fixture19.updateFrustumBottom(0.0f);
			fixture19.updateFrustumFar(0.0f);
			fixture19.updateFrustumLeft(-1.0f);
			fixture19.updateFrustumNear(0.0f);
			fixture19.updateFrustumRight(0.0f);
			fixture19.updateFrustumTop(0.0f);
			fixture19.setName("");
			fixture19.setParallelProjection(true);
			fixture19.setPlaneState(1);
			fixture19.setProjectionMatrix(Matrix4f.ZERO);
			fixture19.setViewPortBottom(0.0f);
			fixture19.setViewPortLeft(0.0f);
			fixture19.setViewPortRight(0.0f);
			fixture19.setViewPortTop(0.0f);
		}
		return fixture19;
	}

	/**
	 * Return an instance of the class being tested.
	 *
	 * @return an instance of the class being tested
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public CameraView getFixture20()
		throws Exception {
		if (fixture20 == null) {
			fixture20 = new CameraView(0, 0);
			fixture20.setFrame(Vector3f.NEGATIVE_INFINITY, Quaternion.IDENTITY);
			fixture20.updateFrustumBottom(0.0f);
			fixture20.updateFrustumFar(0.0f);
			fixture20.updateFrustumLeft(-1.0f);
			fixture20.updateFrustumNear(0.0f);
			fixture20.updateFrustumRight(0.0f);
			fixture20.updateFrustumTop(0.0f);
			fixture20.setName("0123456789");
			fixture20.setParallelProjection(true);
			fixture20.setPlaneState(0);
			fixture20.setProjectionMatrix(Matrix4f.ZERO);
			fixture20.setViewPortBottom(0.0f);
			fixture20.setViewPortLeft(0.0f);
			fixture20.setViewPortRight(0.0f);
			fixture20.setViewPortTop(0.0f);
		}
		return fixture20;
	}

	/**
	 * Return an instance of the class being tested.
	 *
	 * @return an instance of the class being tested
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public CameraView getFixture21()
		throws Exception {
		if (fixture21 == null) {
			fixture21 = new CameraView(0, 0);
			fixture21.setFrame(Vector3f.NEGATIVE_INFINITY, Quaternion.IDENTITY);
			fixture21.updateFrustumBottom(0.0f);
			fixture21.updateFrustumFar(0.0f);
			fixture21.updateFrustumLeft(-1.0f);
			fixture21.updateFrustumNear(0.0f);
			fixture21.updateFrustumRight(0.0f);
			fixture21.updateFrustumTop(0.0f);
			fixture21.setName("0123456789");
			fixture21.setParallelProjection(true);
			fixture21.setPlaneState(1);
			fixture21.setProjectionMatrix(Matrix4f.ZERO);
			fixture21.setViewPortBottom(0.0f);
			fixture21.setViewPortLeft(0.0f);
			fixture21.setViewPortRight(0.0f);
			fixture21.setViewPortTop(0.0f);
		}
		return fixture21;
	}

	/**
	 * Return an instance of the class being tested.
	 *
	 * @return an instance of the class being tested
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public CameraView getFixture22()
		throws Exception {
		if (fixture22 == null) {
			fixture22 = new CameraView(0, 0);
			fixture22.setFrame(Vector3f.NEGATIVE_INFINITY, Quaternion.IDENTITY);
			fixture22.updateFrustumBottom(0.0f);
			fixture22.updateFrustumFar(0.0f);
			fixture22.updateFrustumLeft(0.0f);
			fixture22.updateFrustumNear(0.0f);
			fixture22.updateFrustumRight(0.0f);
			fixture22.updateFrustumTop(-1.0f);
			fixture22.setName("");
			fixture22.setParallelProjection(true);
			fixture22.setPlaneState(0);
			fixture22.setProjectionMatrix(Matrix4f.ZERO);
			fixture22.setViewPortBottom(0.0f);
			fixture22.setViewPortLeft(0.0f);
			fixture22.setViewPortRight(0.0f);
			fixture22.setViewPortTop(0.0f);
		}
		return fixture22;
	}

	/**
	 * Return an instance of the class being tested.
	 *
	 * @return an instance of the class being tested
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public CameraView getFixture23()
		throws Exception {
		if (fixture23 == null) {
			fixture23 = new CameraView(0, 0);
			fixture23.setFrame(Vector3f.NEGATIVE_INFINITY, Quaternion.IDENTITY);
			fixture23.updateFrustumBottom(0.0f);
			fixture23.updateFrustumFar(0.0f);
			fixture23.updateFrustumLeft(0.0f);
			fixture23.updateFrustumNear(0.0f);
			fixture23.updateFrustumRight(0.0f);
			fixture23.updateFrustumTop(-1.0f);
			fixture23.setName("");
			fixture23.setParallelProjection(true);
			fixture23.setPlaneState(1);
			fixture23.setProjectionMatrix(Matrix4f.ZERO);
			fixture23.setViewPortBottom(0.0f);
			fixture23.setViewPortLeft(0.0f);
			fixture23.setViewPortRight(0.0f);
			fixture23.setViewPortTop(0.0f);
		}
		return fixture23;
	}

	/**
	 * Return an instance of the class being tested.
	 *
	 * @return an instance of the class being tested
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public CameraView getFixture24()
		throws Exception {
		if (fixture24 == null) {
			fixture24 = new CameraView(0, 0);
			fixture24.setFrame(Vector3f.NEGATIVE_INFINITY, Quaternion.IDENTITY);
			fixture24.updateFrustumBottom(0.0f);
			fixture24.updateFrustumFar(0.0f);
			fixture24.updateFrustumLeft(0.0f);
			fixture24.updateFrustumNear(0.0f);
			fixture24.updateFrustumRight(0.0f);
			fixture24.updateFrustumTop(-1.0f);
			fixture24.setName("0123456789");
			fixture24.setParallelProjection(true);
			fixture24.setPlaneState(0);
			fixture24.setProjectionMatrix(Matrix4f.ZERO);
			fixture24.setViewPortBottom(0.0f);
			fixture24.setViewPortLeft(0.0f);
			fixture24.setViewPortRight(0.0f);
			fixture24.setViewPortTop(0.0f);
		}
		return fixture24;
	}

	/**
	 * Return an instance of the class being tested.
	 *
	 * @return an instance of the class being tested
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public CameraView getFixture25()
		throws Exception {
		if (fixture25 == null) {
			fixture25 = new CameraView(0, 0);
			fixture25.setFrame(Vector3f.NEGATIVE_INFINITY, Quaternion.IDENTITY);
			fixture25.updateFrustumBottom(0.0f);
			fixture25.updateFrustumFar(0.0f);
			fixture25.updateFrustumLeft(0.0f);
			fixture25.updateFrustumNear(0.0f);
			fixture25.updateFrustumRight(0.0f);
			fixture25.updateFrustumTop(-1.0f);
			fixture25.setName("0123456789");
			fixture25.setParallelProjection(true);
			fixture25.setPlaneState(1);
			fixture25.setProjectionMatrix(Matrix4f.ZERO);
			fixture25.setViewPortBottom(0.0f);
			fixture25.setViewPortLeft(0.0f);
			fixture25.setViewPortRight(0.0f);
			fixture25.setViewPortTop(0.0f);
		}
		return fixture25;
	}

	/**
	 * Return an instance of the class being tested.
	 *
	 * @return an instance of the class being tested
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public CameraView getFixture26()
		throws Exception {
		if (fixture26 == null) {
			fixture26 = new CameraView(0, 0);
			fixture26.setFrame(Vector3f.NEGATIVE_INFINITY, Quaternion.IDENTITY);
			fixture26.updateFrustumBottom(0.0f);
			fixture26.updateFrustumFar(0.0f);
			fixture26.updateFrustumLeft(0.0f);
			fixture26.updateFrustumNear(0.0f);
			fixture26.updateFrustumRight(0.0f);
			fixture26.updateFrustumTop(0.0f);
			fixture26.setName("");
			fixture26.setParallelProjection(true);
			fixture26.setPlaneState(0);
			fixture26.setProjectionMatrix(Matrix4f.ZERO);
			fixture26.setViewPortBottom(0.0f);
			fixture26.setViewPortLeft(0.0f);
			fixture26.setViewPortRight(0.0f);
			fixture26.setViewPortTop(0.0f);
		}
		return fixture26;
	}

	/**
	 * Return an instance of the class being tested.
	 *
	 * @return an instance of the class being tested
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public CameraView getFixture27()
		throws Exception {
		if (fixture27 == null) {
			fixture27 = new CameraView(0, 0);
			fixture27.setFrame(Vector3f.NEGATIVE_INFINITY, Quaternion.IDENTITY);
			fixture27.updateFrustumBottom(0.0f);
			fixture27.updateFrustumFar(0.0f);
			fixture27.updateFrustumLeft(0.0f);
			fixture27.updateFrustumNear(0.0f);
			fixture27.updateFrustumRight(0.0f);
			fixture27.updateFrustumTop(0.0f);
			fixture27.setName("");
			fixture27.setParallelProjection(true);
			fixture27.setPlaneState(1);
			fixture27.setProjectionMatrix(Matrix4f.ZERO);
			fixture27.setViewPortBottom(0.0f);
			fixture27.setViewPortLeft(0.0f);
			fixture27.setViewPortRight(0.0f);
			fixture27.setViewPortTop(0.0f);
		}
		return fixture27;
	}

	/**
	 * Return an instance of the class being tested.
	 *
	 * @return an instance of the class being tested
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public CameraView getFixture28()
		throws Exception {
		if (fixture28 == null) {
			fixture28 = new CameraView(0, 0);
			fixture28.setFrame(Vector3f.NEGATIVE_INFINITY, Quaternion.IDENTITY);
			fixture28.updateFrustumBottom(0.0f);
			fixture28.updateFrustumFar(0.0f);
			fixture28.updateFrustumLeft(0.0f);
			fixture28.updateFrustumNear(0.0f);
			fixture28.updateFrustumRight(0.0f);
			fixture28.updateFrustumTop(0.0f);
			fixture28.setName("0123456789");
			fixture28.setParallelProjection(true);
			fixture28.setPlaneState(0);
			fixture28.setProjectionMatrix(Matrix4f.ZERO);
			fixture28.setViewPortBottom(0.0f);
			fixture28.setViewPortLeft(0.0f);
			fixture28.setViewPortRight(0.0f);
			fixture28.setViewPortTop(0.0f);
		}
		return fixture28;
	}

	/**
	 * Return an instance of the class being tested.
	 *
	 * @return an instance of the class being tested
	 *
	 * @see CameraView
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public CameraView getFixture29()
		throws Exception {
		if (fixture29 == null) {
			fixture29 = new CameraView(0, 0);
			fixture29.setFrame(Vector3f.NEGATIVE_INFINITY, Quaternion.IDENTITY);
			fixture29.updateFrustumBottom(0.0f);
			fixture29.updateFrustumFar(0.0f);
			fixture29.updateFrustumLeft(0.0f);
			fixture29.updateFrustumNear(0.0f);
			fixture29.updateFrustumRight(0.0f);
			fixture29.updateFrustumTop(0.0f);
			fixture29.setName("0123456789");
			fixture29.setParallelProjection(true);
			fixture29.setPlaneState(1);
			fixture29.setProjectionMatrix(Matrix4f.ZERO);
			fixture29.setViewPortBottom(0.0f);
			fixture29.setViewPortLeft(0.0f);
			fixture29.setViewPortRight(0.0f);
			fixture29.setViewPortTop(0.0f);
		}
		return fixture29;
	}

	/**
	 * Run the Camera() constructor test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCamera_1()
		throws Exception {

		CameraView result = new CameraView();

		// add additional test code here
		assertNotNull(result);
		assertEquals(null, result.getName());
//		assertEquals(null, result.getLocation());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(0.0f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumRight(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumTop(), 1.0f);
	//	assertEquals(null, result.getRotation());
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(0.0f, result.getViewPortRight(), 1.0f);
		assertEquals(0.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera(int,int) constructor test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCamera_2()
		throws Exception {
		int width = 0;
		int height = 0;

		CameraView result = new CameraView(width, height);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(0.0, 0.0, 0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=1.0, far=2.0]", result.toString());
		assertEquals(null, result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(-0.5f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(2.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(-0.5f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(1.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.5f, result.getFrustumRight(), 1.0f);
		assertEquals(0.5f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(1.0f, result.getViewPortRight(), 1.0f);
		assertEquals(1.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera(int,int) constructor test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCamera_3()
		throws Exception {
		int width = 1;
		int height = 1;

		CameraView result = new CameraView(width, height);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(0.0, 0.0, 0.0)\n, direction=(0.0, 0.0, 1.0)\nres=1x1, parallel=true\nnear=1.0, far=2.0]", result.toString());
		assertEquals(null, result.getName());
		assertEquals(1, result.getHeight());
		assertEquals(1, result.getWidth());
		assertEquals(-0.5f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(2.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(-0.5f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(1.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.5f, result.getFrustumRight(), 1.0f);
		assertEquals(0.5f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(1.0f, result.getViewPortRight(), 1.0f);
		assertEquals(1.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera(int,int) constructor test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCamera_4()
		throws Exception {
		int width = 7;
		int height = 7;

		CameraView result = new CameraView(width, height);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(0.0, 0.0, 0.0)\n, direction=(0.0, 0.0, 1.0)\nres=7x7, parallel=true\nnear=1.0, far=2.0]", result.toString());
		assertEquals(null, result.getName());
		assertEquals(7, result.getHeight());
		assertEquals(7, result.getWidth());
		assertEquals(-0.5f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(2.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(-0.5f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(1.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.5f, result.getFrustumRight(), 1.0f);
		assertEquals(0.5f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(1.0f, result.getViewPortRight(), 1.0f);
		assertEquals(1.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera(int,int) constructor test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCamera_5()
		throws Exception {
		int width = 1;
		int height = 0;

		CameraView result = new CameraView(width, height);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(0.0, 0.0, 0.0)\n, direction=(0.0, 0.0, 1.0)\nres=1x0, parallel=true\nnear=1.0, far=2.0]", result.toString());
		assertEquals(null, result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(1, result.getWidth());
		assertEquals(-0.5f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(2.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(-0.5f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(1.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.5f, result.getFrustumRight(), 1.0f);
		assertEquals(0.5f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(1.0f, result.getViewPortRight(), 1.0f);
		assertEquals(1.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera(int,int) constructor test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCamera_6()
		throws Exception {
		int width = 7;
		int height = 1;

		CameraView result = new CameraView(width, height);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(0.0, 0.0, 0.0)\n, direction=(0.0, 0.0, 1.0)\nres=7x1, parallel=true\nnear=1.0, far=2.0]", result.toString());
		assertEquals(null, result.getName());
		assertEquals(1, result.getHeight());
		assertEquals(7, result.getWidth());
		assertEquals(-0.5f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(2.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(-0.5f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(1.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.5f, result.getFrustumRight(), 1.0f);
		assertEquals(0.5f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(1.0f, result.getViewPortRight(), 1.0f);
		assertEquals(1.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera(int,int) constructor test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCamera_7()
		throws Exception {
		int width = 0;
		int height = 7;

		CameraView result = new CameraView(width, height);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(0.0, 0.0, 0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x7, parallel=true\nnear=1.0, far=2.0]", result.toString());
		assertEquals(null, result.getName());
		assertEquals(7, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(-0.5f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(2.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(-0.5f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(1.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.5f, result.getFrustumRight(), 1.0f);
		assertEquals(0.5f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(1.0f, result.getViewPortRight(), 1.0f);
		assertEquals(1.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera(int,int) constructor test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCamera_8()
		throws Exception {
		int width = 7;
		int height = 0;

		CameraView result = new CameraView(width, height);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(0.0, 0.0, 0.0)\n, direction=(0.0, 0.0, 1.0)\nres=7x0, parallel=true\nnear=1.0, far=2.0]", result.toString());
		assertEquals(null, result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(7, result.getWidth());
		assertEquals(-0.5f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(2.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(-0.5f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(1.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.5f, result.getFrustumRight(), 1.0f);
		assertEquals(0.5f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(1.0f, result.getViewPortRight(), 1.0f);
		assertEquals(1.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera(int,int) constructor test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCamera_9()
		throws Exception {
		int width = 0;
		int height = 1;

		CameraView result = new CameraView(width, height);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(0.0, 0.0, 0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x1, parallel=true\nnear=1.0, far=2.0]", result.toString());
		assertEquals(null, result.getName());
		assertEquals(1, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(-0.5f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(2.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(-0.5f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(1.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.5f, result.getFrustumRight(), 1.0f);
		assertEquals(0.5f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(1.0f, result.getViewPortRight(), 1.0f);
		assertEquals(1.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera(int,int) constructor test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCamera_10()
		throws Exception {
		int width = 1;
		int height = 7;

		CameraView result = new CameraView(width, height);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(0.0, 0.0, 0.0)\n, direction=(0.0, 0.0, 1.0)\nres=1x7, parallel=true\nnear=1.0, far=2.0]", result.toString());
		assertEquals(null, result.getName());
		assertEquals(7, result.getHeight());
		assertEquals(1, result.getWidth());
		assertEquals(-0.5f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(2.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(-0.5f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(1.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.5f, result.getFrustumRight(), 1.0f);
		assertEquals(0.5f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(1.0f, result.getViewPortRight(), 1.0f);
		assertEquals(1.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the void clearViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClearViewportChanged_fixture1_1()
		throws Exception {
		CameraView fixture = getFixture1();

		fixture.clearViewportChanged();

		// add additional test code here
	}

	/**
	 * Run the void clearViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClearViewportChanged_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		fixture.clearViewportChanged();

		// add additional test code here
	}

	/**
	 * Run the void clearViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClearViewportChanged_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		fixture.clearViewportChanged();

		// add additional test code here
	}

	/**
	 * Run the void clearViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClearViewportChanged_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		fixture.clearViewportChanged();

		// add additional test code here
	}

	/**
	 * Run the void clearViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClearViewportChanged_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		fixture.clearViewportChanged();

		// add additional test code here
	}

	/**
	 * Run the void clearViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClearViewportChanged_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		fixture.clearViewportChanged();

		// add additional test code here
	}

	/**
	 * Run the void clearViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClearViewportChanged_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		fixture.clearViewportChanged();

		// add additional test code here
	}

	/**
	 * Run the void clearViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClearViewportChanged_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		fixture.clearViewportChanged();

		// add additional test code here
	}

	/**
	 * Run the void clearViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClearViewportChanged_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		fixture.clearViewportChanged();

		// add additional test code here
	}

	/**
	 * Run the void clearViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClearViewportChanged_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		fixture.clearViewportChanged();

		// add additional test code here
	}

	/**
	 * Run the void clearViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClearViewportChanged_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		fixture.clearViewportChanged();

		// add additional test code here
	}

	/**
	 * Run the void clearViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClearViewportChanged_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		fixture.clearViewportChanged();

		// add additional test code here
	}

	/**
	 * Run the void clearViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClearViewportChanged_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		fixture.clearViewportChanged();

		// add additional test code here
	}

	/**
	 * Run the void clearViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClearViewportChanged_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		fixture.clearViewportChanged();

		// add additional test code here
	}

	/**
	 * Run the void clearViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClearViewportChanged_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		fixture.clearViewportChanged();

		// add additional test code here
	}

	/**
	 * Run the void clearViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClearViewportChanged_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		fixture.clearViewportChanged();

		// add additional test code here
	}

	/**
	 * Run the void clearViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClearViewportChanged_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		fixture.clearViewportChanged();

		// add additional test code here
	}

	/**
	 * Run the void clearViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClearViewportChanged_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		fixture.clearViewportChanged();

		// add additional test code here
	}

	/**
	 * Run the void clearViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClearViewportChanged_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		fixture.clearViewportChanged();

		// add additional test code here
	}

	/**
	 * Run the void clearViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClearViewportChanged_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		fixture.clearViewportChanged();

		// add additional test code here
	}

	/**
	 * Run the void clearViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClearViewportChanged_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		fixture.clearViewportChanged();

		// add additional test code here
	}

	/**
	 * Run the void clearViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClearViewportChanged_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		fixture.clearViewportChanged();

		// add additional test code here
	}

	/**
	 * Run the void clearViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClearViewportChanged_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		fixture.clearViewportChanged();

		// add additional test code here
	}

	/**
	 * Run the void clearViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClearViewportChanged_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		fixture.clearViewportChanged();

		// add additional test code here
	}

	/**
	 * Run the void clearViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClearViewportChanged_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		fixture.clearViewportChanged();

		// add additional test code here
	}

	/**
	 * Run the void clearViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClearViewportChanged_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		fixture.clearViewportChanged();

		// add additional test code here
	}

	/**
	 * Run the void clearViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClearViewportChanged_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		fixture.clearViewportChanged();

		// add additional test code here
	}

	/**
	 * Run the void clearViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClearViewportChanged_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		fixture.clearViewportChanged();

		// add additional test code here
	}

	/**
	 * Run the void clearViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClearViewportChanged_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		fixture.clearViewportChanged();

		// add additional test code here
	}

	
	/**
	 * Run the Camera clone() method test.
	 *
	 * @throws Exception
	 *  Clone cannot be applied to an empty object
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testClone_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();

		Camera result = fixture.clone();

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.clone(Camera.java:294)
		assertNotNull(result);
	}
*/
	/**
	 * Run the Camera clone() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClone_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		CameraView result = fixture.clone();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(0.0, 0.0, 0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=1.0, far=2.0]", result.toString());
		assertEquals(null, result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(-0.5f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(2.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(-0.5f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(1.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.5f, result.getFrustumRight(), 1.0f);
		assertEquals(0.5f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(1.0f, result.getViewPortRight(), 1.0f);
		assertEquals(1.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera clone() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClone_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		CameraView result = fixture.clone();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=false\nnear=-1.0, far=-1.0]", result.toString());
		assertEquals("", result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(-1.0f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(-1.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(-1.0f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(-1.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(-1.0f, result.getFrustumRight(), 1.0f);
		assertEquals(-1.0f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(-1.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(-1.0f, result.getViewPortRight(), 1.0f);
		assertEquals(-1.0f, result.getViewPortTop(), 1.0f);
		assertEquals(-1.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(false, result.isParallelProjection());
	}

	/**
	 * Run the Camera clone() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClone_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		CameraView result = fixture.clone();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=-1.0]", result.toString());
		assertEquals("0123456789", result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(0.0f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(-1.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(-1.0f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.0f, result.getFrustumRight(), 1.0f);
		assertEquals(-1.0f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(0.0f, result.getViewPortRight(), 1.0f);
		assertEquals(0.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera clone() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClone_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		CameraView result = fixture.clone();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=-1.0]", result.toString());
		assertEquals("0123456789", result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(0.0f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(-1.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(-1.0f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.0f, result.getFrustumRight(), 1.0f);
		assertEquals(-1.0f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(0.0f, result.getViewPortRight(), 1.0f);
		assertEquals(0.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera clone() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClone_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		CameraView result = fixture.clone();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=-1.0]", result.toString());
		assertEquals("", result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(0.0f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(-1.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(-1.0f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.0f, result.getFrustumRight(), 1.0f);
		assertEquals(0.0f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(0.0f, result.getViewPortRight(), 1.0f);
		assertEquals(0.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera clone() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClone_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		CameraView result = fixture.clone();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=-1.0]", result.toString());
		assertEquals("0123456789", result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(0.0f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(-1.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(-1.0f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.0f, result.getFrustumRight(), 1.0f);
		assertEquals(0.0f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(0.0f, result.getViewPortRight(), 1.0f);
		assertEquals(0.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera clone() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClone_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		CameraView result = fixture.clone();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=-1.0]", result.toString());
		assertEquals("0123456789", result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(0.0f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(-1.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(-1.0f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.0f, result.getFrustumRight(), 1.0f);
		assertEquals(0.0f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(0.0f, result.getViewPortRight(), 1.0f);
		assertEquals(0.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera clone() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClone_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		CameraView result = fixture.clone();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=-1.0]", result.toString());
		assertEquals("", result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(0.0f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(-1.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.0f, result.getFrustumRight(), 1.0f);
		assertEquals(-1.0f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(0.0f, result.getViewPortRight(), 1.0f);
		assertEquals(0.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera clone() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClone_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		CameraView result = fixture.clone();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=-1.0]", result.toString());
		assertEquals("", result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(0.0f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(-1.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.0f, result.getFrustumRight(), 1.0f);
		assertEquals(-1.0f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(0.0f, result.getViewPortRight(), 1.0f);
		assertEquals(0.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera clone() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClone_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		CameraView result = fixture.clone();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=-1.0]", result.toString());
		assertEquals("0123456789", result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(0.0f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(-1.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.0f, result.getFrustumRight(), 1.0f);
		assertEquals(-1.0f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(0.0f, result.getViewPortRight(), 1.0f);
		assertEquals(0.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera clone() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClone_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		CameraView result = fixture.clone();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=-1.0]", result.toString());
		assertEquals("0123456789", result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(0.0f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(-1.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.0f, result.getFrustumRight(), 1.0f);
		assertEquals(-1.0f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(0.0f, result.getViewPortRight(), 1.0f);
		assertEquals(0.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera clone() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClone_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		CameraView result = fixture.clone();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=-1.0]", result.toString());
		assertEquals("", result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(0.0f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(-1.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.0f, result.getFrustumRight(), 1.0f);
		assertEquals(0.0f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(0.0f, result.getViewPortRight(), 1.0f);
		assertEquals(0.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera clone() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClone_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		CameraView result = fixture.clone();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=-1.0]", result.toString());
		assertEquals("", result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(0.0f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(-1.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.0f, result.getFrustumRight(), 1.0f);
		assertEquals(0.0f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(0.0f, result.getViewPortRight(), 1.0f);
		assertEquals(0.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera clone() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClone_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		CameraView result = fixture.clone();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=-1.0]", result.toString());
		assertEquals("0123456789", result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(0.0f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(-1.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.0f, result.getFrustumRight(), 1.0f);
		assertEquals(0.0f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(0.0f, result.getViewPortRight(), 1.0f);
		assertEquals(0.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera clone() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClone_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		CameraView result = fixture.clone();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=-1.0]", result.toString());
		assertEquals("0123456789", result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(0.0f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(-1.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.0f, result.getFrustumRight(), 1.0f);
		assertEquals(0.0f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(0.0f, result.getViewPortRight(), 1.0f);
		assertEquals(0.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera clone() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClone_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		CameraView result = fixture.clone();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=0.0]", result.toString());
		assertEquals("0123456789", result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(0.0f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(-1.0f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.0f, result.getFrustumRight(), 1.0f);
		assertEquals(-1.0f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(0.0f, result.getViewPortRight(), 1.0f);
		assertEquals(0.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera clone() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClone_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		CameraView result = fixture.clone();

		// add additional test code here
		assertNotNull(result);
	assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=0.0]", result.toString());
		assertEquals("0123456789", result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(0.0f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(-1.0f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.0f, result.getFrustumRight(), 1.0f);
		assertEquals(-1.0f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(0.0f, result.getViewPortRight(), 1.0f);
		assertEquals(0.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera clone() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClone_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		CameraView result = fixture.clone();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=0.0]", result.toString());
		assertEquals("", result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(0.0f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(-1.0f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.0f, result.getFrustumRight(), 1.0f);
		assertEquals(0.0f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(0.0f, result.getViewPortRight(), 1.0f);
		assertEquals(0.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera clone() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClone_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		CameraView result = fixture.clone();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=0.0]", result.toString());
		assertEquals("0123456789", result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(0.0f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(-1.0f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.0f, result.getFrustumRight(), 1.0f);
		assertEquals(0.0f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(0.0f, result.getViewPortRight(), 1.0f);
		assertEquals(0.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera clone() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClone_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		CameraView result = fixture.clone();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=0.0]", result.toString());
		assertEquals("0123456789", result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(0.0f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(-1.0f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.0f, result.getFrustumRight(), 1.0f);
		assertEquals(0.0f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(0.0f, result.getViewPortRight(), 1.0f);
		assertEquals(0.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera clone() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClone_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		CameraView result = fixture.clone();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=0.0]", result.toString());
		assertEquals("", result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(0.0f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.0f, result.getFrustumRight(), 1.0f);
		assertEquals(-1.0f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(0.0f, result.getViewPortRight(), 1.0f);
		assertEquals(0.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera clone() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClone_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		CameraView result = fixture.clone();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=0.0]", result.toString());
		assertEquals("", result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(0.0f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.0f, result.getFrustumRight(), 1.0f);
		assertEquals(-1.0f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(0.0f, result.getViewPortRight(), 1.0f);
		assertEquals(0.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera clone() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClone_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		CameraView result = fixture.clone();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=0.0]", result.toString());
		assertEquals("0123456789", result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(0.0f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.0f, result.getFrustumRight(), 1.0f);
		assertEquals(-1.0f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(0.0f, result.getViewPortRight(), 1.0f);
		assertEquals(0.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera clone() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClone_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		CameraView result = fixture.clone();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=0.0]", result.toString());
		assertEquals("0123456789", result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(0.0f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.0f, result.getFrustumRight(), 1.0f);
		assertEquals(-1.0f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(0.0f, result.getViewPortRight(), 1.0f);
		assertEquals(0.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera clone() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClone_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		CameraView result = fixture.clone();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=0.0]", result.toString());
		assertEquals("", result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(0.0f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.0f, result.getFrustumRight(), 1.0f);
		assertEquals(0.0f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(0.0f, result.getViewPortRight(), 1.0f);
		assertEquals(0.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera clone() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClone_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		CameraView result = fixture.clone();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=0.0]", result.toString());
		assertEquals("", result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(0.0f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.0f, result.getFrustumRight(), 1.0f);
		assertEquals(0.0f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(0.0f, result.getViewPortRight(), 1.0f);
		assertEquals(0.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera clone() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClone_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		CameraView result = fixture.clone();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=0.0]", result.toString());
		assertEquals("0123456789", result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(0.0f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.0f, result.getFrustumRight(), 1.0f);
		assertEquals(0.0f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(0.0f, result.getViewPortRight(), 1.0f);
		assertEquals(0.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Camera clone() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testClone_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		CameraView result = fixture.clone();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=0.0]", result.toString());
		assertEquals("0123456789", result.getName());
		assertEquals(0, result.getHeight());
		assertEquals(0, result.getWidth());
		assertEquals(0.0f, result.getFrustum().getFrustumBottom(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumFar(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumLeft(), 1.0f);
		assertEquals(0.0f, result.getFrustum().getFrustumNear(), 1.0f);
		assertEquals(0.0f, result.getFrustumRight(), 1.0f);
		assertEquals(0.0f, result.getFrustumTop(), 1.0f);
		assertEquals(0, result.getPlaneState());
		assertEquals(0.0f, result.getViewPortLeft(), 1.0f);
		assertEquals(0.0f, result.getViewPortRight(), 1.0f);
		assertEquals(0.0f, result.getViewPortTop(), 1.0f);
		assertEquals(0.0f, result.getViewPortBottom(), 1.0f);
		assertEquals(true, result.isViewportChanged());
		assertEquals(true, result.isParallelProjection());
	}

	/**
	 * Run the Frustum.FrustumIntersect contains(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContains_fixture1_1()
		throws Exception {
		CameraView fixture = getFixture1();
		BoundingVolume bound = null;

		Frustum.FrustumIntersect result = fixture.contains(bound);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Inside", result.name());
		assertEquals("Inside", result.toString());
		assertEquals(1, result.ordinal());
	}

	/**
	 * Run the Frustum.FrustumIntersect contains(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContains_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		BoundingVolume bound = null;

		Frustum.FrustumIntersect result = fixture.contains(bound);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Inside", result.name());
		assertEquals("Inside", result.toString());
		assertEquals(1, result.ordinal());
	}

	/**
	 * Run the Frustum.FrustumIntersect contains(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContains_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		BoundingVolume bound = null;

		Frustum.FrustumIntersect result = fixture.contains(bound);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Inside", result.name());
		assertEquals("Inside", result.toString());
		assertEquals(1, result.ordinal());
	}

	/**
	 * Run the Frustum.FrustumIntersect contains(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContains_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		BoundingVolume bound = null;

		Frustum.FrustumIntersect result = fixture.contains(bound);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Inside", result.name());
		assertEquals("Inside", result.toString());
		assertEquals(1, result.ordinal());
	}

	/**
	 * Run the Frustum.FrustumIntersect contains(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContains_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		BoundingVolume bound = null;

		Frustum.FrustumIntersect result = fixture.contains(bound);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Inside", result.name());
		assertEquals("Inside", result.toString());
		assertEquals(1, result.ordinal());
	}

	/**
	 * Run the Frustum.FrustumIntersect contains(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContains_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		BoundingVolume bound = null;

		Frustum.FrustumIntersect result = fixture.contains(bound);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Inside", result.name());
		assertEquals("Inside", result.toString());
		assertEquals(1, result.ordinal());
	}

	/**
	 * Run the Frustum.FrustumIntersect contains(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContains_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		BoundingVolume bound = null;

		Frustum.FrustumIntersect result = fixture.contains(bound);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Inside", result.name());
		assertEquals("Inside", result.toString());
		assertEquals(1, result.ordinal());
	}

	/**
	 * Run the Frustum.FrustumIntersect contains(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContains_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		BoundingVolume bound = null;

		Frustum.FrustumIntersect result = fixture.contains(bound);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Inside", result.name());
		assertEquals("Inside", result.toString());
		assertEquals(1, result.ordinal());
	}

	/**
	 * Run the Frustum.FrustumIntersect contains(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContains_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		BoundingVolume bound = null;

		Frustum.FrustumIntersect result = fixture.contains(bound);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Inside", result.name());
		assertEquals("Inside", result.toString());
		assertEquals(1, result.ordinal());
	}

	/**
	 * Run the Frustum.FrustumIntersect contains(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContains_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();
		BoundingVolume bound = null;

		Frustum.FrustumIntersect result = fixture.contains(bound);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Inside", result.name());
		assertEquals("Inside", result.toString());
		assertEquals(1, result.ordinal());
	}

	/**
	 * Run the Frustum.FrustumIntersect contains(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContains_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();
		BoundingVolume bound = null;

		Frustum.FrustumIntersect result = fixture.contains(bound);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Inside", result.name());
		assertEquals("Inside", result.toString());
		assertEquals(1, result.ordinal());
	}

	/**
	 * Run the Frustum.FrustumIntersect contains(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContains_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();
		BoundingVolume bound = null;

		Frustum.FrustumIntersect result = fixture.contains(bound);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Inside", result.name());
		assertEquals("Inside", result.toString());
		assertEquals(1, result.ordinal());
	}

	/**
	 * Run the Frustum.FrustumIntersect contains(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContains_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();
		BoundingVolume bound = null;

		Frustum.FrustumIntersect result = fixture.contains(bound);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Inside", result.name());
		assertEquals("Inside", result.toString());
		assertEquals(1, result.ordinal());
	}

	/**
	 * Run the Frustum.FrustumIntersect contains(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContains_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();
		BoundingVolume bound = null;

		Frustum.FrustumIntersect result = fixture.contains(bound);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Inside", result.name());
		assertEquals("Inside", result.toString());
		assertEquals(1, result.ordinal());
	}

	/**
	 * Run the Frustum.FrustumIntersect contains(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContains_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();
		BoundingVolume bound = null;

		Frustum.FrustumIntersect result = fixture.contains(bound);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Inside", result.name());
		assertEquals("Inside", result.toString());
		assertEquals(1, result.ordinal());
	}

	/**
	 * Run the Frustum.FrustumIntersect contains(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContains_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();
		BoundingVolume bound = null;

		Frustum.FrustumIntersect result = fixture.contains(bound);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Inside", result.name());
		assertEquals("Inside", result.toString());
		assertEquals(1, result.ordinal());
	}

	/**
	 * Run the Frustum.FrustumIntersect contains(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContains_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();
		BoundingVolume bound = null;

		Frustum.FrustumIntersect result = fixture.contains(bound);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Inside", result.name());
		assertEquals("Inside", result.toString());
		assertEquals(1, result.ordinal());
	}

	/**
	 * Run the Frustum.FrustumIntersect contains(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContains_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();
		BoundingVolume bound = null;

		Frustum.FrustumIntersect result = fixture.contains(bound);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Inside", result.name());
		assertEquals("Inside", result.toString());
		assertEquals(1, result.ordinal());
	}

	/**
	 * Run the Frustum.FrustumIntersect contains(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContains_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();
		BoundingVolume bound = null;

		Frustum.FrustumIntersect result = fixture.contains(bound);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Inside", result.name());
		assertEquals("Inside", result.toString());
		assertEquals(1, result.ordinal());
	}

	/**
	 * Run the Frustum.FrustumIntersect contains(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContains_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();
		BoundingVolume bound = null;

		Frustum.FrustumIntersect result = fixture.contains(bound);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Inside", result.name());
		assertEquals("Inside", result.toString());
		assertEquals(1, result.ordinal());
	}

	/**
	 * Run the Frustum.FrustumIntersect contains(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContains_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();
		BoundingVolume bound = null;

		Frustum.FrustumIntersect result = fixture.contains(bound);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Inside", result.name());
		assertEquals("Inside", result.toString());
		assertEquals(1, result.ordinal());
	}

	/**
	 * Run the Frustum.FrustumIntersect contains(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContains_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();
		BoundingVolume bound = null;

		Frustum.FrustumIntersect result = fixture.contains(bound);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Inside", result.name());
		assertEquals("Inside", result.toString());
		assertEquals(1, result.ordinal());
	}

	/**
	 * Run the Frustum.FrustumIntersect contains(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContains_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();
		BoundingVolume bound = null;

		Frustum.FrustumIntersect result = fixture.contains(bound);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Inside", result.name());
		assertEquals("Inside", result.toString());
		assertEquals(1, result.ordinal());
	}

	/**
	 * Run the Frustum.FrustumIntersect contains(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContains_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();
		BoundingVolume bound = null;

		Frustum.FrustumIntersect result = fixture.contains(bound);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Inside", result.name());
		assertEquals("Inside", result.toString());
		assertEquals(1, result.ordinal());
	}

	/**
	 * Run the Frustum.FrustumIntersect contains(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContains_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();
		BoundingVolume bound = null;

		Frustum.FrustumIntersect result = fixture.contains(bound);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Inside", result.name());
		assertEquals("Inside", result.toString());
		assertEquals(1, result.ordinal());
	}

	/**
	 * Run the Frustum.FrustumIntersect contains(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContains_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();
		BoundingVolume bound = null;

		Frustum.FrustumIntersect result = fixture.contains(bound);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Inside", result.name());
		assertEquals("Inside", result.toString());
		assertEquals(1, result.ordinal());
	}

	/**
	 * Run the Frustum.FrustumIntersect contains(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContains_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();
		BoundingVolume bound = null;

		Frustum.FrustumIntersect result = fixture.contains(bound);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Inside", result.name());
		assertEquals("Inside", result.toString());
		assertEquals(1, result.ordinal());
	}

	/**
	 * Run the Frustum.FrustumIntersect contains(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContains_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();
		BoundingVolume bound = null;

		Frustum.FrustumIntersect result = fixture.contains(bound);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Inside", result.name());
		assertEquals("Inside", result.toString());
		assertEquals(1, result.ordinal());
	}

	/**
	 * Run the Frustum.FrustumIntersect contains(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContains_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();
		BoundingVolume bound = null;

		Frustum.FrustumIntersect result = fixture.contains(bound);

		// add additional test code here
		assertNotNull(result);
		assertEquals("Inside", result.name());
		assertEquals("Inside", result.toString());
		assertEquals(1, result.ordinal());
	}

	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContainsGui_fixture1_1()
		throws Exception {
		CameraView fixture = getFixture1();
		BoundingVolume bound = new BoundingBox();

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContainsGui_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		BoundingVolume bound = new BoundingBox(Vector3f.NAN, Vector3f.NAN);

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContainsGui_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		BoundingVolume bound = new BoundingBox(Vector3f.NEGATIVE_INFINITY, Vector3f.NEGATIVE_INFINITY);

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 * Does not handle null!
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testContainsGui_fixture4_1()
		throws Exception {
		Camera fixture = getFixture4();
		BoundingVolume bound = new BoundingBox((BoundingBox) null);

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.bounding.BoundingBox.<init>(BoundingBox.java:84)
		assertTrue(result);
	}
*/
	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContainsGui_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		BoundingVolume bound = new BoundingSphere();

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		assertEquals(false, result);
	}

	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContainsGui_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		BoundingVolume bound = new BoundingSphere();

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		assertEquals(false, result);
	}

	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContainsGui_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		BoundingVolume bound = new BoundingSphere();

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		assertEquals(false, result);
	}

	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContainsGui_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		BoundingVolume bound = new BoundingSphere();

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		assertEquals(false, result);
	}

	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContainsGui_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		BoundingVolume bound = new BoundingSphere();

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		assertEquals(false, result);
	}

	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContainsGui_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();
		BoundingVolume bound = new BoundingSphere();

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		assertEquals(false, result);
	}

	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContainsGui_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();
		BoundingVolume bound = new BoundingSphere();

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		assertEquals(false, result);
	}

	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContainsGui_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();
		BoundingVolume bound = new BoundingSphere();

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		assertEquals(false, result);
	}

	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContainsGui_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();
		BoundingVolume bound = new BoundingSphere();

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		assertEquals(false, result);
	}

	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContainsGui_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();
		BoundingVolume bound = new BoundingSphere();

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		assertEquals(false, result);
	}

	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContainsGui_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();
		BoundingVolume bound = new BoundingSphere();

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		assertEquals(false, result);
	}

	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContainsGui_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();
		BoundingVolume bound = new BoundingSphere();

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		assertEquals(false, result);
	}

	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContainsGui_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();
		BoundingVolume bound = new BoundingSphere();

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		assertEquals(false, result);
	}

	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContainsGui_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();
		BoundingVolume bound = new BoundingSphere();

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		assertEquals(false, result);
	}

	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContainsGui_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();
		BoundingVolume bound = new BoundingSphere();

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		assertEquals(false, result);
	}

	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContainsGui_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();
		BoundingVolume bound = new BoundingSphere();

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		assertEquals(false, result);
	}

	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContainsGui_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();
		BoundingVolume bound = new BoundingSphere();

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		assertEquals(false, result);
	}

	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContainsGui_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();
		BoundingVolume bound = new BoundingSphere();

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		assertEquals(false, result);
	}

	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContainsGui_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();
		BoundingVolume bound = new BoundingSphere();

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		assertEquals(false, result);
	}

	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContainsGui_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();
		BoundingVolume bound = new BoundingSphere();

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		assertEquals(false, result);
	}

	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContainsGui_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();
		BoundingVolume bound = new BoundingSphere();

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		assertEquals(false, result);
	}

	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContainsGui_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();
		BoundingVolume bound = new BoundingSphere();

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		assertEquals(false, result);
	}

	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContainsGui_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();
		BoundingVolume bound = new BoundingSphere();

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		assertEquals(false, result);
	}

	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContainsGui_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();
		BoundingVolume bound = new BoundingSphere();

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		assertEquals(false, result);
	}

	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContainsGui_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();
		BoundingVolume bound = new BoundingSphere();

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		assertEquals(false, result);
	}

	/**
	 * Run the boolean containsGui(BoundingVolume) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testContainsGui_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		BoundingVolume bound = new BoundingBox();

		boolean result = fixture.containsGui(bound);

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 *Will never work with the default constructor!
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testCopyFrom_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();
		Camera cam = new Camera(0, 0);

		fixture.copyFrom(cam);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.copyFrom(Camera.java:323)
	}*/

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCopyFrom_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		CameraView cam = new CameraView(0, 1);

		fixture.copyFrom(cam);

		// add additional test code here
	}

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCopyFrom_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		CameraView cam = new CameraView(0, 2);

		fixture.copyFrom(cam);

		// add additional test code here
	}

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCopyFrom_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		CameraView cam = new CameraView(1, 0);

		fixture.copyFrom(cam);

		// add additional test code here
	}

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCopyFrom_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		CameraView cam = new CameraView(1, 1);

		fixture.copyFrom(cam);

		// add additional test code here
	}

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCopyFrom_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		CameraView cam = new CameraView(1, 2);

		fixture.copyFrom(cam);

		// add additional test code here
	}

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCopyFrom_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		CameraView cam = new CameraView(2, 0);

		fixture.copyFrom(cam);

		// add additional test code here
	}

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCopyFrom_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		CameraView cam = new CameraView(2, 1);

		fixture.copyFrom(cam);

		// add additional test code here
	}

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCopyFrom_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		CameraView cam = new CameraView(2, 2);

		fixture.copyFrom(cam);

		// add additional test code here
	}

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCopyFrom_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();
		CameraView cam = new CameraView(2, 2);

		fixture.copyFrom(cam);

		// add additional test code here
	}

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCopyFrom_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();
		CameraView cam = new CameraView(2, 2);

		fixture.copyFrom(cam);

		// add additional test code here
	}

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCopyFrom_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();
		CameraView cam = new CameraView(2, 2);

		fixture.copyFrom(cam);

		// add additional test code here
	}

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCopyFrom_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();
		CameraView cam = new CameraView(2, 2);

		fixture.copyFrom(cam);

		// add additional test code here
	}

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCopyFrom_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();
		CameraView cam = new CameraView(2, 2);

		fixture.copyFrom(cam);

		// add additional test code here
	}

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCopyFrom_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();
		CameraView cam = new CameraView(2, 2);

		fixture.copyFrom(cam);

		// add additional test code here
	}

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCopyFrom_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();
		CameraView cam = new CameraView(2, 2);

		fixture.copyFrom(cam);

		// add additional test code here
	}

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCopyFrom_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();
		CameraView cam = new CameraView(2, 2);

		fixture.copyFrom(cam);

		// add additional test code here
	}

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCopyFrom_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();
		CameraView cam = new CameraView(2, 2);

		fixture.copyFrom(cam);

		// add additional test code here
	}

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCopyFrom_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();
		CameraView cam = new CameraView(2, 2);

		fixture.copyFrom(cam);

		// add additional test code here
	}

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCopyFrom_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();
		CameraView cam = new CameraView(2, 2);

		fixture.copyFrom(cam);

		// add additional test code here
	}

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCopyFrom_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();
		CameraView cam = new CameraView(2, 2);

		fixture.copyFrom(cam);

		// add additional test code here
	}

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCopyFrom_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();
		CameraView cam = new CameraView(2, 2);

		fixture.copyFrom(cam);

		// add additional test code here
	}

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCopyFrom_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();
		CameraView cam = new CameraView(2, 2);

		fixture.copyFrom(cam);

		// add additional test code here
	}

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCopyFrom_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();
		CameraView cam = new CameraView(2, 2);

		fixture.copyFrom(cam);

		// add additional test code here
	}

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCopyFrom_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();
		CameraView cam = new CameraView(2, 2);

		fixture.copyFrom(cam);

		// add additional test code here
	}

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCopyFrom_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();
		CameraView cam = new CameraView(2, 2);

		fixture.copyFrom(cam);

		// add additional test code here
	}

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCopyFrom_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();
		CameraView cam = new CameraView(2, 2);

		fixture.copyFrom(cam);

		// add additional test code here
	}

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCopyFrom_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();
		CameraView cam = new CameraView(2, 2);

		fixture.copyFrom(cam);

		// add additional test code here
	}

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCopyFrom_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();
		CameraView cam = new CameraView(2, 2);

		fixture.copyFrom(cam);

		// add additional test code here
	}

	/**
	 * Run the void copyFrom(Camera) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testCopyFrom_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		CameraView cam = new CameraView(0, 0);

		fixture.copyFrom(cam);

		// add additional test code here
	}

	/**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testDistanceToNearPlane_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();
		Vector3f pos = Vector3f.NAN;

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}*/

	/**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testDistanceToNearPlane_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		Vector3f pos = Vector3f.NEGATIVE_INFINITY;

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testDistanceToNearPlane_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		Vector3f pos = Vector3f.POSITIVE_INFINITY;

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}

	/**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testDistanceToNearPlane_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		Vector3f pos = Vector3f.UNIT_X;

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testDistanceToNearPlane_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		Vector3f pos = Vector3f.UNIT_XYZ;

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		assertEquals(1.0f, result, 0.1f);
	}

	/**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testDistanceToNearPlane_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		Vector3f pos = Vector3f.UNIT_Y;

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testDistanceToNearPlane_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		Vector3f pos = Vector3f.UNIT_Z;

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		assertEquals(1.0f, result, 0.1f);
	}

	/**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testDistanceToNearPlane_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		Vector3f pos = Vector3f.ZERO;

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testDistanceToNearPlane_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		Vector3f pos = new Vector3f();

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	
	/**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 * 
	 * Should not put null
	 */
/*	@Test
	public void testDistanceToNearPlane_fixture10_1()
		throws Exception {
		Camera fixture = getFixture10();
		Vector3f pos = new Vector3f((Vector3f) null);

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
		assertEquals(0.0f, result, 0.1f);
	}
*/
	/**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 *Should not pass null to vector3f
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
/*	@Test
	public void testDistanceToNearPlane_fixture11_1()
		throws Exception {
		Camera fixture = getFixture11();
		Vector3f pos = new Vector3f((Vector3f) null);

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
		assertEquals(0.0f, result, 0.1f);
	}*/

	/**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 *//*
	@Test
	public void testDistanceToNearPlane_fixture12_1()
		throws Exception {
		Camera fixture = getFixture12();
		Vector3f pos = new Vector3f((Vector3f) null);

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
		assertEquals(0.0f, result, 0.1f);
	}

	*//**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 *//*
	@Test
	public void testDistanceToNearPlane_fixture13_1()
		throws Exception {
		Camera fixture = getFixture13();
		Vector3f pos = new Vector3f((Vector3f) null);

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
		assertEquals(0.0f, result, 0.1f);
	}

	*//**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 *//*
	@Test
	public void testDistanceToNearPlane_fixture14_1()
		throws Exception {
		Camera fixture = getFixture14();
		Vector3f pos = new Vector3f((Vector3f) null);

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
		assertEquals(0.0f, result, 0.1f);
	}

	*//**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 *//*
	@Test
	public void testDistanceToNearPlane_fixture15_1()
		throws Exception {
		Camera fixture = getFixture15();
		Vector3f pos = new Vector3f((Vector3f) null);

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
		assertEquals(0.0f, result, 0.1f);
	}

	*//**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 *//*
	@Test
	public void testDistanceToNearPlane_fixture16_1()
		throws Exception {
		Camera fixture = getFixture16();
		Vector3f pos = new Vector3f((Vector3f) null);

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
		assertEquals(0.0f, result, 0.1f);
	}

	*//**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 *//*
	@Test
	public void testDistanceToNearPlane_fixture17_1()
		throws Exception {
		Camera fixture = getFixture17();
		Vector3f pos = new Vector3f((Vector3f) null);

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
		assertEquals(0.0f, result, 0.1f);
	}

	*//**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 *//*
	@Test
	public void testDistanceToNearPlane_fixture18_1()
		throws Exception {
		Camera fixture = getFixture18();
		Vector3f pos = new Vector3f((Vector3f) null);

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
		assertEquals(0.0f, result, 0.1f);
	}

	*//**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 *//*
	@Test
	public void testDistanceToNearPlane_fixture19_1()
		throws Exception {
		Camera fixture = getFixture19();
		Vector3f pos = new Vector3f((Vector3f) null);

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
		assertEquals(0.0f, result, 0.1f);
	}

	*//**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 *//*
	@Test
	public void testDistanceToNearPlane_fixture20_1()
		throws Exception {
		Camera fixture = getFixture20();
		Vector3f pos = new Vector3f((Vector3f) null);

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
		assertEquals(0.0f, result, 0.1f);
	}

	*//**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 *//*
	@Test
	public void testDistanceToNearPlane_fixture21_1()
		throws Exception {
		Camera fixture = getFixture21();
		Vector3f pos = new Vector3f((Vector3f) null);

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
		assertEquals(0.0f, result, 0.1f);
	}

	*//**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 *//*
	@Test
	public void testDistanceToNearPlane_fixture22_1()
		throws Exception {
		Camera fixture = getFixture22();
		Vector3f pos = new Vector3f((Vector3f) null);

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
		assertEquals(0.0f, result, 0.1f);
	}

	*//**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 *//*
	@Test
	public void testDistanceToNearPlane_fixture23_1()
		throws Exception {
		Camera fixture = getFixture23();
		Vector3f pos = new Vector3f((Vector3f) null);

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
		assertEquals(0.0f, result, 0.1f);
	}

	*//**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 *//*
	@Test
	public void testDistanceToNearPlane_fixture24_1()
		throws Exception {
		Camera fixture = getFixture24();
		Vector3f pos = new Vector3f((Vector3f) null);

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
		assertEquals(0.0f, result, 0.1f);
	}

	*//**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 *//*
	@Test
	public void testDistanceToNearPlane_fixture25_1()
		throws Exception {
		Camera fixture = getFixture25();
		Vector3f pos = new Vector3f((Vector3f) null);

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
		assertEquals(0.0f, result, 0.1f);
	}

	*//**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 *//*
	@Test
	public void testDistanceToNearPlane_fixture26_1()
		throws Exception {
		Camera fixture = getFixture26();
		Vector3f pos = new Vector3f((Vector3f) null);

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
		assertEquals(0.0f, result, 0.1f);
	}

	*//**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 *//*
	@Test
	public void testDistanceToNearPlane_fixture27_1()
		throws Exception {
		Camera fixture = getFixture27();
		Vector3f pos = new Vector3f((Vector3f) null);

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
		assertEquals(0.0f, result, 0.1f);
	}

	*//**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 *//*
	@Test
	public void testDistanceToNearPlane_fixture28_1()
		throws Exception {
		Camera fixture = getFixture28();
		Vector3f pos = new Vector3f((Vector3f) null);

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
		assertEquals(0.0f, result, 0.1f);
	}

	*//**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 *//*
	@Test
	public void testDistanceToNearPlane_fixture29_1()
		throws Exception {
		Camera fixture = getFixture29();
		Vector3f pos = new Vector3f((Vector3f) null);

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
		assertEquals(0.0f, result, 0.1f);
	}*/

	/**
	 * Run the float distanceToNearPlane(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testDistanceToNearPlane_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		Vector3f pos = Vector3f.NAN;

		float result = fixture.distanceToNearPlane(pos);

		// add additional test code here
		assertEquals(-1, result, 0.1f);
	}

	/**
	 * Run the Vector3f getDirection() method test.
	 *
	 * @throws Exception
	 * Should not perform this on getfixture1
	 * @generatedBy CodePro at 2013-01-07 19:30
/*	@Test
	public void testGetDirection_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();

		Vector3f result = fixture.getDirection();

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.getDirection(Camera.java:711)
		assertNotNull(result);
	}
*/
	/**
	 * Run the Vector3f getDirection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		Vector3f result = fixture.getDirection();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		Vector3f result = fixture.getDirection();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		Vector3f result = fixture.getDirection();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		Vector3f result = fixture.getDirection();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		Vector3f result = fixture.getDirection();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		Vector3f result = fixture.getDirection();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		Vector3f result = fixture.getDirection();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		Vector3f result = fixture.getDirection();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		Vector3f result = fixture.getDirection();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		Vector3f result = fixture.getDirection();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		Vector3f result = fixture.getDirection();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		Vector3f result = fixture.getDirection();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		Vector3f result = fixture.getDirection();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		Vector3f result = fixture.getDirection();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		Vector3f result = fixture.getDirection();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		Vector3f result = fixture.getDirection();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		Vector3f result = fixture.getDirection();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		Vector3f result = fixture.getDirection();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		Vector3f result = fixture.getDirection();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		Vector3f result = fixture.getDirection();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		Vector3f result = fixture.getDirection();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		Vector3f result = fixture.getDirection();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		Vector3f result = fixture.getDirection();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		Vector3f result = fixture.getDirection();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		Vector3f result = fixture.getDirection();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		Vector3f result = fixture.getDirection();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		Vector3f result = fixture.getDirection();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		Vector3f result = fixture.getDirection();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 *
	 *Should not perform this on getfixture_1
	 *
	 */
/*	@Test
	public void testGetDirection_fixture1_2()
		throws Exception {
		Camera fixture = getFixture1();
		Vector3f store = Vector3f.NAN;

		Vector3f result = fixture.getDirection(store);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.getDirection(Camera.java:742)
		assertNotNull(result);
	}
*/
	/**
	 * Run the Vector3f getDirection(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		Vector3f store = Vector3f.NEGATIVE_INFINITY;

		Vector3f result = fixture.getDirection(store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture3_2()
		throws Exception {
		CameraView fixture = getFixture3();
		Vector3f store = Vector3f.POSITIVE_INFINITY;

		Vector3f result = fixture.getDirection(store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture4_2()
		throws Exception {
		CameraView fixture = getFixture4();
		Vector3f store = Vector3f.UNIT_X;

		Vector3f result = fixture.getDirection(store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture5_2()
		throws Exception {
		CameraView fixture = getFixture5();
		Vector3f store = Vector3f.UNIT_XYZ;

		Vector3f result = fixture.getDirection(store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture6_2()
		throws Exception {
		CameraView fixture = getFixture6();
		Vector3f store = Vector3f.UNIT_Y;

		Vector3f result = fixture.getDirection(store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture7_2()
		throws Exception {
		CameraView fixture = getFixture7();
		Vector3f store = Vector3f.UNIT_Z;

		Vector3f result = fixture.getDirection(store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture8_2()
		throws Exception {
		CameraView fixture = getFixture8();
		Vector3f store = Vector3f.ZERO;

		Vector3f result = fixture.getDirection(store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getDirection(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture9_2()
		throws Exception {
		CameraView fixture = getFixture9();
		Vector3f store = new Vector3f();

		Vector3f result = fixture.getDirection(store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

//	/**
//	 * Run the Vector3f getDirection(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetDirection_fixture10_2()
//		throws Exception {
//		Camera fixture = getFixture10();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getDirection(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getDirection(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetDirection_fixture11_2()
//		throws Exception {
//		Camera fixture = getFixture11();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getDirection(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getDirection(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetDirection_fixture12_2()
//		throws Exception {
//		Camera fixture = getFixture12();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getDirection(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getDirection(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetDirection_fixture13_2()
//		throws Exception {
//		Camera fixture = getFixture13();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getDirection(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getDirection(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetDirection_fixture14_2()
//		throws Exception {
//		Camera fixture = getFixture14();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getDirection(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getDirection(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetDirection_fixture15_2()
//		throws Exception {
//		Camera fixture = getFixture15();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getDirection(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getDirection(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetDirection_fixture16_2()
//		throws Exception {
//		Camera fixture = getFixture16();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getDirection(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getDirection(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetDirection_fixture17_2()
//		throws Exception {
//		Camera fixture = getFixture17();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getDirection(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getDirection(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetDirection_fixture18_2()
//		throws Exception {
//		Camera fixture = getFixture18();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getDirection(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getDirection(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetDirection_fixture19_2()
//		throws Exception {
//		Camera fixture = getFixture19();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getDirection(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getDirection(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetDirection_fixture20_2()
//		throws Exception {
//		Camera fixture = getFixture20();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getDirection(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getDirection(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetDirection_fixture21_2()
//		throws Exception {
//		Camera fixture = getFixture21();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getDirection(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getDirection(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetDirection_fixture22_2()
//		throws Exception {
//		Camera fixture = getFixture22();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getDirection(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getDirection(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetDirection_fixture23_2()
//		throws Exception {
//		Camera fixture = getFixture23();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getDirection(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getDirection(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetDirection_fixture24_2()
//		throws Exception {
//		Camera fixture = getFixture24();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getDirection(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getDirection(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetDirection_fixture25_2()
//		throws Exception {
//		Camera fixture = getFixture25();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getDirection(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getDirection(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetDirection_fixture26_2()
//		throws Exception {
//		Camera fixture = getFixture26();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getDirection(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getDirection(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetDirection_fixture27_2()
//		throws Exception {
//		Camera fixture = getFixture27();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getDirection(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getDirection(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetDirection_fixture28_2()
//		throws Exception {
//		Camera fixture = getFixture28();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getDirection(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getDirection(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetDirection_fixture29_2()
//		throws Exception {
//		Camera fixture = getFixture29();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getDirection(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}

	/**
	 * Run the Vector3f getDirection(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetDirection_fixture2_3()
		throws Exception {
		CameraView fixture = getFixture2();
		Vector3f store = Vector3f.NAN;

		Vector3f result = fixture.getDirection(store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the float getFrustum().getFrustumBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumBottom_fixture1_1()
		throws Exception {
		CameraView fixture = getFixture1();

		float result = fixture.getFrustum().getFrustumBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumBottom_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		float result = fixture.getFrustum().getFrustumBottom();

		// add additional test code here
		assertEquals(-0.5f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumBottom_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		float result = fixture.getFrustum().getFrustumBottom();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumBottom_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		float result = fixture.getFrustum().getFrustumBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumBottom_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		float result = fixture.getFrustum().getFrustumBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumBottom_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		float result = fixture.getFrustum().getFrustumBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumBottom_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		float result = fixture.getFrustum().getFrustumBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumBottom_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		float result = fixture.getFrustum().getFrustumBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumBottom_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		float result = fixture.getFrustum().getFrustumBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumBottom_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		float result = fixture.getFrustum().getFrustumBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumBottom_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		float result = fixture.getFrustum().getFrustumBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumBottom_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		float result = fixture.getFrustum().getFrustumBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumBottom_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		float result = fixture.getFrustum().getFrustumBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumBottom_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		float result = fixture.getFrustum().getFrustumBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumBottom_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		float result = fixture.getFrustum().getFrustumBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumBottom_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		float result = fixture.getFrustum().getFrustumBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumBottom_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		float result = fixture.getFrustum().getFrustumBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumBottom_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		float result = fixture.getFrustum().getFrustumBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumBottom_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		float result = fixture.getFrustum().getFrustumBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumBottom_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		float result = fixture.getFrustum().getFrustumBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumBottom_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		float result = fixture.getFrustum().getFrustumBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumBottom_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		float result = fixture.getFrustum().getFrustumBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumBottom_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		float result = fixture.getFrustum().getFrustumBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumBottom_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		float result = fixture.getFrustum().getFrustumBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumBottom_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		float result = fixture.getFrustum().getFrustumBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumBottom_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		float result = fixture.getFrustum().getFrustumBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumBottom_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		float result = fixture.getFrustum().getFrustumBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumBottom_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		float result = fixture.getFrustum().getFrustumBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumBottom_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		float result = fixture.getFrustum().getFrustumBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumFar() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumFar_fixture1_1()
		throws Exception {
		CameraView fixture = getFixture1();

		float result = fixture.getFrustum().getFrustumFar();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumFar() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumFar_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		float result = fixture.getFrustum().getFrustumFar();

		// add additional test code here
		assertEquals(2.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumFar() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumFar_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		float result = fixture.getFrustum().getFrustumFar();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumFar() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumFar_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		float result = fixture.getFrustum().getFrustumFar();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumFar() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumFar_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		float result = fixture.getFrustum().getFrustumFar();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumFar() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumFar_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		float result = fixture.getFrustum().getFrustumFar();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumFar() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumFar_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		float result = fixture.getFrustum().getFrustumFar();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumFar() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumFar_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		float result = fixture.getFrustum().getFrustumFar();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumFar() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumFar_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		float result = fixture.getFrustum().getFrustumFar();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumFar() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumFar_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		float result = fixture.getFrustum().getFrustumFar();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumFar() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumFar_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		float result = fixture.getFrustum().getFrustumFar();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumFar() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumFar_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		float result = fixture.getFrustum().getFrustumFar();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumFar() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumFar_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		float result = fixture.getFrustum().getFrustumFar();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumFar() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumFar_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		float result = fixture.getFrustum().getFrustumFar();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumFar() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumFar_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		float result = fixture.getFrustum().getFrustumFar();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumFar() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumFar_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		float result = fixture.getFrustum().getFrustumFar();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumFar() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumFar_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		float result = fixture.getFrustum().getFrustumFar();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumFar() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumFar_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		float result = fixture.getFrustum().getFrustumFar();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumFar() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumFar_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		float result = fixture.getFrustum().getFrustumFar();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumFar() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumFar_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		float result = fixture.getFrustum().getFrustumFar();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumFar() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumFar_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		float result = fixture.getFrustum().getFrustumFar();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumFar() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumFar_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		float result = fixture.getFrustum().getFrustumFar();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumFar() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumFar_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		float result = fixture.getFrustum().getFrustumFar();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumFar() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumFar_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		float result = fixture.getFrustum().getFrustumFar();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumFar() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumFar_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		float result = fixture.getFrustum().getFrustumFar();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumFar() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumFar_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		float result = fixture.getFrustum().getFrustumFar();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumFar() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumFar_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		float result = fixture.getFrustum().getFrustumFar();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumFar() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumFar_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		float result = fixture.getFrustum().getFrustumFar();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumFar() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumFar_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		float result = fixture.getFrustum().getFrustumFar();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumLeft_fixture1_1()
		throws Exception {
		CameraView fixture = getFixture1();

		float result = fixture.getFrustum().getFrustumLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumLeft_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		float result = fixture.getFrustum().getFrustumLeft();

		// add additional test code here
		assertEquals(-0.5f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumLeft_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		float result = fixture.getFrustum().getFrustumLeft();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumLeft_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		float result = fixture.getFrustum().getFrustumLeft();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumLeft_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		float result = fixture.getFrustum().getFrustumLeft();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumLeft_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		float result = fixture.getFrustum().getFrustumLeft();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumLeft_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		float result = fixture.getFrustum().getFrustumLeft();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumLeft_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		float result = fixture.getFrustum().getFrustumLeft();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumLeft_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		float result = fixture.getFrustum().getFrustumLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumLeft_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		float result = fixture.getFrustum().getFrustumLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumLeft_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		float result = fixture.getFrustum().getFrustumLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumLeft_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		float result = fixture.getFrustum().getFrustumLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumLeft_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		float result = fixture.getFrustum().getFrustumLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumLeft_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		float result = fixture.getFrustum().getFrustumLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumLeft_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		float result = fixture.getFrustum().getFrustumLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumLeft_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		float result = fixture.getFrustum().getFrustumLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumLeft_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		float result = fixture.getFrustum().getFrustumLeft();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumLeft_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		float result = fixture.getFrustum().getFrustumLeft();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumLeft_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		float result = fixture.getFrustum().getFrustumLeft();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumLeft_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		float result = fixture.getFrustum().getFrustumLeft();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumLeft_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		float result = fixture.getFrustum().getFrustumLeft();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumLeft_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		float result = fixture.getFrustum().getFrustumLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumLeft_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		float result = fixture.getFrustum().getFrustumLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumLeft_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		float result = fixture.getFrustum().getFrustumLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumLeft_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		float result = fixture.getFrustum().getFrustumLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumLeft_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		float result = fixture.getFrustum().getFrustumLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumLeft_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		float result = fixture.getFrustum().getFrustumLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumLeft_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		float result = fixture.getFrustum().getFrustumLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumLeft_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		float result = fixture.getFrustum().getFrustumLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumNear() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumNear_fixture1_1()
		throws Exception {
		CameraView fixture = getFixture1();

		float result = fixture.getFrustum().getFrustumNear();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumNear() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumNear_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		float result = fixture.getFrustum().getFrustumNear();

		// add additional test code here
		assertEquals(1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumNear() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumNear_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		float result = fixture.getFrustum().getFrustumNear();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumNear() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumNear_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		float result = fixture.getFrustum().getFrustumNear();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumNear() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumNear_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		float result = fixture.getFrustum().getFrustumNear();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumNear() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumNear_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		float result = fixture.getFrustum().getFrustumNear();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumNear() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumNear_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		float result = fixture.getFrustum().getFrustumNear();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumNear() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumNear_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		float result = fixture.getFrustum().getFrustumNear();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumNear() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumNear_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		float result = fixture.getFrustum().getFrustumNear();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumNear() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumNear_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		float result = fixture.getFrustum().getFrustumNear();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumNear() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumNear_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		float result = fixture.getFrustum().getFrustumNear();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumNear() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumNear_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		float result = fixture.getFrustum().getFrustumNear();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumNear() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumNear_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		float result = fixture.getFrustum().getFrustumNear();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumNear() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumNear_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		float result = fixture.getFrustum().getFrustumNear();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumNear() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumNear_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		float result = fixture.getFrustum().getFrustumNear();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumNear() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumNear_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		float result = fixture.getFrustum().getFrustumNear();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumNear() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumNear_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		float result = fixture.getFrustum().getFrustumNear();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumNear() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumNear_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		float result = fixture.getFrustum().getFrustumNear();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumNear() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumNear_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		float result = fixture.getFrustum().getFrustumNear();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumNear() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumNear_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		float result = fixture.getFrustum().getFrustumNear();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumNear() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumNear_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		float result = fixture.getFrustum().getFrustumNear();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumNear() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumNear_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		float result = fixture.getFrustum().getFrustumNear();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumNear() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumNear_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		float result = fixture.getFrustum().getFrustumNear();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumNear() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumNear_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		float result = fixture.getFrustum().getFrustumNear();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumNear() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumNear_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		float result = fixture.getFrustum().getFrustumNear();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumNear() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumNear_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		float result = fixture.getFrustum().getFrustumNear();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumNear() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumNear_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		float result = fixture.getFrustum().getFrustumNear();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumNear() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumNear_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		float result = fixture.getFrustum().getFrustumNear();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustum().getFrustumNear() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumNear_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		float result = fixture.getFrustum().getFrustumNear();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumRight_fixture1_1()
		throws Exception {
		CameraView fixture = getFixture1();

		float result = fixture.getFrustumRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumRight_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		float result = fixture.getFrustumRight();

		// add additional test code here
		assertEquals(0.5f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumRight_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		float result = fixture.getFrustumRight();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumRight_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		float result = fixture.getFrustumRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumRight_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		float result = fixture.getFrustumRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumRight_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		float result = fixture.getFrustumRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumRight_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		float result = fixture.getFrustumRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumRight_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		float result = fixture.getFrustumRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumRight_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		float result = fixture.getFrustumRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumRight_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		float result = fixture.getFrustumRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumRight_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		float result = fixture.getFrustumRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumRight_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		float result = fixture.getFrustumRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumRight_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		float result = fixture.getFrustumRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumRight_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		float result = fixture.getFrustumRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumRight_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		float result = fixture.getFrustumRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumRight_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		float result = fixture.getFrustumRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumRight_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		float result = fixture.getFrustumRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumRight_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		float result = fixture.getFrustumRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumRight_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		float result = fixture.getFrustumRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumRight_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		float result = fixture.getFrustumRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumRight_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		float result = fixture.getFrustumRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumRight_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		float result = fixture.getFrustumRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumRight_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		float result = fixture.getFrustumRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumRight_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		float result = fixture.getFrustumRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumRight_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		float result = fixture.getFrustumRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumRight_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		float result = fixture.getFrustumRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumRight_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		float result = fixture.getFrustumRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumRight_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		float result = fixture.getFrustumRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumRight_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		float result = fixture.getFrustumRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumTop_fixture1_1()
		throws Exception {
		CameraView fixture = getFixture1();

		float result = fixture.getFrustumTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumTop_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		float result = fixture.getFrustumTop();

		// add additional test code here
		assertEquals(0.5f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumTop_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		float result = fixture.getFrustumTop();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumTop_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		float result = fixture.getFrustumTop();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumTop_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		float result = fixture.getFrustumTop();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumTop_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		float result = fixture.getFrustumTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumTop_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		float result = fixture.getFrustumTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumTop_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		float result = fixture.getFrustumTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumTop_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		float result = fixture.getFrustumTop();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumTop_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		float result = fixture.getFrustumTop();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumTop_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		float result = fixture.getFrustumTop();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumTop_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		float result = fixture.getFrustumTop();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumTop_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		float result = fixture.getFrustumTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumTop_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		float result = fixture.getFrustumTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumTop_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		float result = fixture.getFrustumTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumTop_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		float result = fixture.getFrustumTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumTop_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		float result = fixture.getFrustumTop();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumTop_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		float result = fixture.getFrustumTop();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumTop_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		float result = fixture.getFrustumTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumTop_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		float result = fixture.getFrustumTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumTop_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		float result = fixture.getFrustumTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumTop_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		float result = fixture.getFrustumTop();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumTop_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		float result = fixture.getFrustumTop();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumTop_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		float result = fixture.getFrustumTop();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumTop_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		float result = fixture.getFrustumTop();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumTop_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		float result = fixture.getFrustumTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumTop_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		float result = fixture.getFrustumTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumTop_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		float result = fixture.getFrustumTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getFrustumTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetFrustumTop_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		float result = fixture.getFrustumTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the int getHeight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetHeight_fixture1_1()
		throws Exception {
		CameraView fixture = getFixture1();

		int result = fixture.getHeight();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getHeight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetHeight_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		int result = fixture.getHeight();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getHeight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetHeight_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		int result = fixture.getHeight();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getHeight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetHeight_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		int result = fixture.getHeight();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getHeight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetHeight_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		int result = fixture.getHeight();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getHeight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetHeight_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		int result = fixture.getHeight();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getHeight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetHeight_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		int result = fixture.getHeight();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getHeight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetHeight_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		int result = fixture.getHeight();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getHeight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetHeight_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		int result = fixture.getHeight();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getHeight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetHeight_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		int result = fixture.getHeight();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getHeight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetHeight_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		int result = fixture.getHeight();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getHeight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetHeight_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		int result = fixture.getHeight();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getHeight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetHeight_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		int result = fixture.getHeight();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getHeight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetHeight_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		int result = fixture.getHeight();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getHeight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetHeight_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		int result = fixture.getHeight();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getHeight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetHeight_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		int result = fixture.getHeight();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getHeight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetHeight_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		int result = fixture.getHeight();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getHeight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetHeight_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		int result = fixture.getHeight();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getHeight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetHeight_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		int result = fixture.getHeight();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getHeight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetHeight_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		int result = fixture.getHeight();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getHeight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetHeight_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		int result = fixture.getHeight();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getHeight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetHeight_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		int result = fixture.getHeight();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getHeight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetHeight_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		int result = fixture.getHeight();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getHeight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetHeight_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		int result = fixture.getHeight();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getHeight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetHeight_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		int result = fixture.getHeight();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getHeight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetHeight_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		int result = fixture.getHeight();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getHeight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetHeight_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		int result = fixture.getHeight();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getHeight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetHeight_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		int result = fixture.getHeight();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getHeight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetHeight_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		int result = fixture.getHeight();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the Vector3f getLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testGetLeft_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();

		Vector3f result = fixture.getLeft();

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.getLeft(Camera.java:721)
		assertNotNull(result);
	}
*/
	/**
	 * Run the Vector3f getLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		Vector3f result = fixture.getLeft();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		Vector3f result = fixture.getLeft();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		Vector3f result = fixture.getLeft();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		Vector3f result = fixture.getLeft();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		Vector3f result = fixture.getLeft();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		Vector3f result = fixture.getLeft();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		Vector3f result = fixture.getLeft();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		Vector3f result = fixture.getLeft();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		Vector3f result = fixture.getLeft();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		Vector3f result = fixture.getLeft();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		Vector3f result = fixture.getLeft();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		Vector3f result = fixture.getLeft();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		Vector3f result = fixture.getLeft();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		Vector3f result = fixture.getLeft();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		Vector3f result = fixture.getLeft();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		Vector3f result = fixture.getLeft();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		Vector3f result = fixture.getLeft();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		Vector3f result = fixture.getLeft();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		Vector3f result = fixture.getLeft();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		Vector3f result = fixture.getLeft();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		Vector3f result = fixture.getLeft();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		Vector3f result = fixture.getLeft();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		Vector3f result = fixture.getLeft();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		Vector3f result = fixture.getLeft();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		Vector3f result = fixture.getLeft();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		Vector3f result = fixture.getLeft();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		Vector3f result = fixture.getLeft();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		Vector3f result = fixture.getLeft();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testGetLeft_fixture1_2()
		throws Exception {
		Camera fixture = getFixture1();
		Vector3f store = Vector3f.NAN;

		Vector3f result = fixture.getLeft(store);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.getLeft(Camera.java:752)
		assertNotNull(result);
	}
*/
	/**
	 * Run the Vector3f getLeft(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		Vector3f store = Vector3f.NEGATIVE_INFINITY;

		Vector3f result = fixture.getLeft(store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture3_2()
		throws Exception {
		CameraView fixture = getFixture3();
		Vector3f store = Vector3f.POSITIVE_INFINITY;

		Vector3f result = fixture.getLeft(store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture4_2()
		throws Exception {
		CameraView fixture = getFixture4();
		Vector3f store = Vector3f.UNIT_X;

		Vector3f result = fixture.getLeft(store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture5_2()
		throws Exception {
		CameraView fixture = getFixture5();
		Vector3f store = Vector3f.UNIT_XYZ;

		Vector3f result = fixture.getLeft(store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture6_2()
		throws Exception {
		CameraView fixture = getFixture6();
		Vector3f store = Vector3f.UNIT_Y;

		Vector3f result = fixture.getLeft(store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture7_2()
		throws Exception {
		CameraView fixture = getFixture7();
		Vector3f store = Vector3f.UNIT_Z;

		Vector3f result = fixture.getLeft(store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture8_2()
		throws Exception {
		CameraView fixture = getFixture8();
		Vector3f store = Vector3f.ZERO;

		Vector3f result = fixture.getLeft(store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLeft(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture9_2()
		throws Exception {
		CameraView fixture = getFixture9();
		Vector3f store = new Vector3f();

		Vector3f result = fixture.getLeft(store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

//	/**
//	 * Run the Vector3f getLeft(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetLeft_fixture10_2()
//		throws Exception {
//		Camera fixture = getFixture10();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getLeft(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getLeft(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetLeft_fixture11_2()
//		throws Exception {
//		Camera fixture = getFixture11();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getLeft(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getLeft(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetLeft_fixture12_2()
//		throws Exception {
//		Camera fixture = getFixture12();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getLeft(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getLeft(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetLeft_fixture13_2()
//		throws Exception {
//		Camera fixture = getFixture13();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getLeft(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getLeft(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetLeft_fixture14_2()
//		throws Exception {
//		Camera fixture = getFixture14();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getLeft(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getLeft(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetLeft_fixture15_2()
//		throws Exception {
//		Camera fixture = getFixture15();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getLeft(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getLeft(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetLeft_fixture16_2()
//		throws Exception {
//		Camera fixture = getFixture16();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getLeft(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getLeft(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetLeft_fixture17_2()
//		throws Exception {
//		Camera fixture = getFixture17();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getLeft(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getLeft(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetLeft_fixture18_2()
//		throws Exception {
//		Camera fixture = getFixture18();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getLeft(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getLeft(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetLeft_fixture19_2()
//		throws Exception {
//		Camera fixture = getFixture19();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getLeft(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getLeft(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetLeft_fixture20_2()
//		throws Exception {
//		Camera fixture = getFixture20();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getLeft(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getLeft(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetLeft_fixture21_2()
//		throws Exception {
//		Camera fixture = getFixture21();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getLeft(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getLeft(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetLeft_fixture22_2()
//		throws Exception {
//		Camera fixture = getFixture22();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getLeft(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getLeft(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetLeft_fixture23_2()
//		throws Exception {
//		Camera fixture = getFixture23();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getLeft(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getLeft(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetLeft_fixture24_2()
//		throws Exception {
//		Camera fixture = getFixture24();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getLeft(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getLeft(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetLeft_fixture25_2()
//		throws Exception {
//		Camera fixture = getFixture25();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getLeft(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getLeft(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetLeft_fixture26_2()
//		throws Exception {
//		Camera fixture = getFixture26();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getLeft(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getLeft(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetLeft_fixture27_2()
//		throws Exception {
//		Camera fixture = getFixture27();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getLeft(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getLeft(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetLeft_fixture28_2()
//		throws Exception {
//		Camera fixture = getFixture28();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getLeft(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getLeft(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetLeft_fixture29_2()
//		throws Exception {
//		Camera fixture = getFixture29();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getLeft(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}

	/**
	 * Run the Vector3f getLeft(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLeft_fixture2_3()
		throws Exception {
		CameraView fixture = getFixture2();
		Vector3f store = Vector3f.NAN;

		Vector3f result = fixture.getLeft(store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(1.0, 0.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLocation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testGetLocation_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();

		Vector3f result = fixture.getLocation();

		// add additional test code here
		assertEquals(null, result);
	}*/

	/**
	 * Run the Vector3f getLocation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLocation_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		Vector3f result = fixture.getLocation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.0)", result.toString());
		assertEquals(0.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLocation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLocation_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		Vector3f result = fixture.getLocation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, -0.0, -0.0)", result.toString());
		assertEquals(0.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLocation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLocation_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		Vector3f result = fixture.getLocation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, -0.0, -0.0)", result.toString());
		assertEquals(0.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLocation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLocation_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		Vector3f result = fixture.getLocation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, -0.0, -0.0)", result.toString());
		assertEquals(0.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLocation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLocation_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		Vector3f result = fixture.getLocation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, -0.0, -0.0)", result.toString());
		assertEquals(0.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLocation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLocation_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		Vector3f result = fixture.getLocation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, -0.0, -0.0)", result.toString());
		assertEquals(0.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLocation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLocation_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		Vector3f result = fixture.getLocation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, -0.0, -0.0)", result.toString());
		assertEquals(0.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLocation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLocation_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		Vector3f result = fixture.getLocation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, -0.0, -0.0)", result.toString());
		assertEquals(0.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLocation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLocation_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		Vector3f result = fixture.getLocation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, -0.0, -0.0)", result.toString());
		assertEquals(0.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLocation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLocation_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		Vector3f result = fixture.getLocation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, -0.0, -0.0)", result.toString());
		assertEquals(0.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLocation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLocation_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		Vector3f result = fixture.getLocation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, -0.0, -0.0)", result.toString());
		assertEquals(0.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLocation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLocation_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		Vector3f result = fixture.getLocation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, -0.0, -0.0)", result.toString());
		assertEquals(0.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLocation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLocation_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		Vector3f result = fixture.getLocation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, -0.0, -0.0)", result.toString());
		assertEquals(0.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLocation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLocation_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		Vector3f result = fixture.getLocation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, -0.0, -0.0)", result.toString());
		assertEquals(0.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLocation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLocation_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		Vector3f result = fixture.getLocation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, -0.0, -0.0)", result.toString());
		assertEquals(0.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLocation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLocation_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		Vector3f result = fixture.getLocation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, -0.0, -0.0)", result.toString());
		assertEquals(0.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLocation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLocation_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		Vector3f result = fixture.getLocation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, -0.0, -0.0)", result.toString());
		assertEquals(0.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLocation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLocation_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		Vector3f result = fixture.getLocation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, -0.0, -0.0)", result.toString());
		assertEquals(0.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLocation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLocation_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		Vector3f result = fixture.getLocation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, -0.0, -0.0)", result.toString());
		assertEquals(0.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLocation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLocation_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		Vector3f result = fixture.getLocation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, -0.0, -0.0)", result.toString());
		assertEquals(0.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLocation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLocation_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		Vector3f result = fixture.getLocation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, -0.0, -0.0)", result.toString());
		assertEquals(0.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLocation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLocation_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		Vector3f result = fixture.getLocation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, -0.0, -0.0)", result.toString());
		assertEquals(0.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLocation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLocation_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		Vector3f result = fixture.getLocation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, -0.0, -0.0)", result.toString());
		assertEquals(0.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLocation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLocation_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		Vector3f result = fixture.getLocation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, -0.0, -0.0)", result.toString());
		assertEquals(0.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLocation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLocation_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		Vector3f result = fixture.getLocation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, -0.0, -0.0)", result.toString());
		assertEquals(0.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLocation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLocation_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		Vector3f result = fixture.getLocation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, -0.0, -0.0)", result.toString());
		assertEquals(0.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLocation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLocation_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		Vector3f result = fixture.getLocation();

		String res = result.toString();
		
		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, -0.0, -0.0)", result.toString());
		assertEquals(0.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getLocation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetLocation_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		Vector3f result = fixture.getLocation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, -0.0, -0.0)", result.toString());
		assertEquals(0.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}

	/**
	 * Run the String getName() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetName_fixture1_1()
		throws Exception {
		CameraView fixture = getFixture1();

		String result = fixture.getName();

		// add additional test code here
		assertEquals(null, result);
	}

	/**
	 * Run the String getName() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetName_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		String result = fixture.getName();

		// add additional test code here
		assertEquals(null, result);
	}

	/**
	 * Run the String getName() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetName_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		String result = fixture.getName();

		// add additional test code here
		assertEquals("", result);
	}

	/**
	 * Run the String getName() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetName_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		String result = fixture.getName();

		// add additional test code here
		assertEquals("0123456789", result);
	}

	/**
	 * Run the String getName() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetName_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		String result = fixture.getName();

		// add additional test code here
		assertEquals("0123456789", result);
	}

	/**
	 * Run the String getName() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetName_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		String result = fixture.getName();

		// add additional test code here
		assertEquals("", result);
	}

	/**
	 * Run the String getName() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetName_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		String result = fixture.getName();

		// add additional test code here
		assertEquals("0123456789", result);
	}

	/**
	 * Run the String getName() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetName_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		String result = fixture.getName();

		// add additional test code here
		assertEquals("0123456789", result);
	}

	/**
	 * Run the String getName() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetName_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		String result = fixture.getName();

		// add additional test code here
		assertEquals("", result);
	}

	/**
	 * Run the String getName() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetName_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		String result = fixture.getName();

		// add additional test code here
		assertEquals("", result);
	}

	/**
	 * Run the String getName() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetName_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		String result = fixture.getName();

		// add additional test code here
		assertEquals("0123456789", result);
	}

	/**
	 * Run the String getName() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetName_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		String result = fixture.getName();

		// add additional test code here
		assertEquals("0123456789", result);
	}

	/**
	 * Run the String getName() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetName_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		String result = fixture.getName();

		// add additional test code here
		assertEquals("", result);
	}

	/**
	 * Run the String getName() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetName_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		String result = fixture.getName();

		// add additional test code here
		assertEquals("", result);
	}

	/**
	 * Run the String getName() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetName_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		String result = fixture.getName();

		// add additional test code here
		assertEquals("0123456789", result);
	}

	/**
	 * Run the String getName() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetName_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		String result = fixture.getName();

		// add additional test code here
		assertEquals("0123456789", result);
	}

	/**
	 * Run the String getName() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetName_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		String result = fixture.getName();

		// add additional test code here
		assertEquals("0123456789", result);
	}

	/**
	 * Run the String getName() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetName_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		String result = fixture.getName();

		// add additional test code here
		assertEquals("0123456789", result);
	}

	/**
	 * Run the String getName() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetName_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		String result = fixture.getName();

		// add additional test code here
		assertEquals("", result);
	}

	/**
	 * Run the String getName() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetName_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		String result = fixture.getName();

		// add additional test code here
		assertEquals("0123456789", result);
	}

	/**
	 * Run the String getName() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetName_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		String result = fixture.getName();

		// add additional test code here
		assertEquals("0123456789", result);
	}

	/**
	 * Run the String getName() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetName_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		String result = fixture.getName();

		// add additional test code here
		assertEquals("", result);
	}

	/**
	 * Run the String getName() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetName_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		String result = fixture.getName();

		// add additional test code here
		assertEquals("", result);
	}

	/**
	 * Run the String getName() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetName_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		String result = fixture.getName();

		// add additional test code here
		assertEquals("0123456789", result);
	}

	/**
	 * Run the String getName() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetName_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		String result = fixture.getName();

		// add additional test code here
		assertEquals("0123456789", result);
	}

	/**
	 * Run the String getName() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetName_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		String result = fixture.getName();

		// add additional test code here
		assertEquals("", result);
	}

	/**
	 * Run the String getName() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetName_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		String result = fixture.getName();

		// add additional test code here
		assertEquals("", result);
	}

	/**
	 * Run the String getName() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetName_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		String result = fixture.getName();

		// add additional test code here
		assertEquals("0123456789", result);
	}

	/**
	 * Run the String getName() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetName_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		String result = fixture.getName();

		// add additional test code here
		assertEquals("0123456789", result);
	}

	/**
	 * Run the int getPlaneState() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetPlaneState_fixture1_1()
		throws Exception {
		CameraView fixture = getFixture1();

		int result = fixture.getPlaneState();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getPlaneState() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetPlaneState_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		int result = fixture.getPlaneState();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getPlaneState() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetPlaneState_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		int result = fixture.getPlaneState();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getPlaneState() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetPlaneState_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		int result = fixture.getPlaneState();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getPlaneState() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetPlaneState_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		int result = fixture.getPlaneState();

		// add additional test code here
		assertEquals(1, result);
	}

	/**
	 * Run the int getPlaneState() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetPlaneState_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		int result = fixture.getPlaneState();

		// add additional test code here
		assertEquals(1, result);
	}

	/**
	 * Run the int getPlaneState() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetPlaneState_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		int result = fixture.getPlaneState();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getPlaneState() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetPlaneState_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		int result = fixture.getPlaneState();

		// add additional test code here
		assertEquals(1, result);
	}

	/**
	 * Run the int getPlaneState() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetPlaneState_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		int result = fixture.getPlaneState();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getPlaneState() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetPlaneState_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		int result = fixture.getPlaneState();

		// add additional test code here
		assertEquals(1, result);
	}

	/**
	 * Run the int getPlaneState() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetPlaneState_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		int result = fixture.getPlaneState();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getPlaneState() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetPlaneState_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		int result = fixture.getPlaneState();

		// add additional test code here
		assertEquals(1, result);
	}

	/**
	 * Run the int getPlaneState() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetPlaneState_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		int result = fixture.getPlaneState();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getPlaneState() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetPlaneState_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		int result = fixture.getPlaneState();

		// add additional test code here
		assertEquals(1, result);
	}

	/**
	 * Run the int getPlaneState() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetPlaneState_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		int result = fixture.getPlaneState();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getPlaneState() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetPlaneState_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		int result = fixture.getPlaneState();

		// add additional test code here
		assertEquals(1, result);
	}

	/**
	 * Run the int getPlaneState() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetPlaneState_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		int result = fixture.getPlaneState();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getPlaneState() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetPlaneState_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		int result = fixture.getPlaneState();

		// add additional test code here
		assertEquals(1, result);
	}

	/**
	 * Run the int getPlaneState() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetPlaneState_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		int result = fixture.getPlaneState();

		// add additional test code here
		assertEquals(1, result);
	}

	/**
	 * Run the int getPlaneState() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetPlaneState_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		int result = fixture.getPlaneState();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getPlaneState() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetPlaneState_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		int result = fixture.getPlaneState();

		// add additional test code here
		assertEquals(1, result);
	}

	/**
	 * Run the int getPlaneState() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetPlaneState_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		int result = fixture.getPlaneState();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getPlaneState() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetPlaneState_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		int result = fixture.getPlaneState();

		// add additional test code here
		assertEquals(1, result);
	}

	/**
	 * Run the int getPlaneState() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetPlaneState_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		int result = fixture.getPlaneState();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getPlaneState() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetPlaneState_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		int result = fixture.getPlaneState();

		// add additional test code here
		assertEquals(1, result);
	}

	/**
	 * Run the int getPlaneState() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetPlaneState_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		int result = fixture.getPlaneState();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getPlaneState() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetPlaneState_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		int result = fixture.getPlaneState();

		// add additional test code here
		assertEquals(1, result);
	}

	/**
	 * Run the int getPlaneState() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetPlaneState_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		int result = fixture.getPlaneState();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getPlaneState() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetPlaneState_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		int result = fixture.getPlaneState();

		// add additional test code here
		assertEquals(1, result);
	}

	/**
	 * Run the Matrix4f getProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testGetProjectionMatrix_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();

		Matrix4f result = fixture.getProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  0.0 \n 0.0  0.0  1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}*/

	/**
	 * Run the Matrix4f getProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetProjectionMatrix_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		Matrix4f result = fixture.getProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 2.0  0.0  0.0  -0.0 \n 0.0  2.0  0.0  -0.0 \n 0.0  0.0  -2.0  -3.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(-8, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetProjectionMatrix_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		Matrix4f result = fixture.getProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  0.0 \n 0.0  0.0  1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetProjectionMatrix_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		Matrix4f result = fixture.getProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetProjectionMatrix_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		Matrix4f result = fixture.getProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetProjectionMatrix_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		Matrix4f result = fixture.getProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetProjectionMatrix_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		Matrix4f result = fixture.getProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetProjectionMatrix_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		Matrix4f result = fixture.getProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetProjectionMatrix_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		Matrix4f result = fixture.getProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetProjectionMatrix_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		Matrix4f result = fixture.getProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetProjectionMatrix_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		Matrix4f result = fixture.getProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetProjectionMatrix_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		Matrix4f result = fixture.getProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetProjectionMatrix_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		Matrix4f result = fixture.getProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetProjectionMatrix_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		Matrix4f result = fixture.getProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetProjectionMatrix_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		Matrix4f result = fixture.getProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetProjectionMatrix_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		Matrix4f result = fixture.getProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetProjectionMatrix_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		Matrix4f result = fixture.getProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetProjectionMatrix_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		Matrix4f result = fixture.getProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetProjectionMatrix_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		Matrix4f result = fixture.getProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetProjectionMatrix_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		Matrix4f result = fixture.getProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetProjectionMatrix_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		Matrix4f result = fixture.getProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetProjectionMatrix_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		Matrix4f result = fixture.getProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetProjectionMatrix_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		Matrix4f result = fixture.getProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetProjectionMatrix_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		Matrix4f result = fixture.getProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetProjectionMatrix_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		Matrix4f result = fixture.getProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetProjectionMatrix_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		Matrix4f result = fixture.getProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetProjectionMatrix_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		Matrix4f result = fixture.getProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetProjectionMatrix_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		Matrix4f result = fixture.getProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetProjectionMatrix_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		Matrix4f result = fixture.getProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Quaternion getRotation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	/*@Test
	public void testGetRotation_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();

		Quaternion result = fixture.getRotation();

		// add additional test code here
		assertEquals(null, result);
	}*/

	/**
	 * Run the Quaternion getRotation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetRotation_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		Quaternion result = fixture.getRotation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.0, 1.0)", result.toString());
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(1.0f, result.getW(), 1.0f);
		assertEquals(1.0f, result.norm(), 1.0f);
	}

	/**
	 * Run the Quaternion getRotation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetRotation_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		Quaternion result = fixture.getRotation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.0, 1.0)", result.toString());
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(1.0f, result.getW(), 1.0f);
		assertEquals(1.0f, result.norm(), 1.0f);
	}

	/**
	 * Run the Quaternion getRotation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetRotation_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		Quaternion result = fixture.getRotation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.0, 1.0)", result.toString());
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(1.0f, result.getW(), 1.0f);
		assertEquals(1.0f, result.norm(), 1.0f);
	}

	/**
	 * Run the Quaternion getRotation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetRotation_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		Quaternion result = fixture.getRotation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.0, 1.0)", result.toString());
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(1.0f, result.getW(), 1.0f);
		assertEquals(1.0f, result.norm(), 1.0f);
	}

	/**
	 * Run the Quaternion getRotation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetRotation_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		Quaternion result = fixture.getRotation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.0, 1.0)", result.toString());
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(1.0f, result.getW(), 1.0f);
		assertEquals(1.0f, result.norm(), 1.0f);
	}

	/**
	 * Run the Quaternion getRotation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetRotation_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		Quaternion result = fixture.getRotation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.0, 1.0)", result.toString());
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(1.0f, result.getW(), 1.0f);
		assertEquals(1.0f, result.norm(), 1.0f);
	}

	/**
	 * Run the Quaternion getRotation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetRotation_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		Quaternion result = fixture.getRotation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.0, 1.0)", result.toString());
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(1.0f, result.getW(), 1.0f);
		assertEquals(1.0f, result.norm(), 1.0f);
	}

	/**
	 * Run the Quaternion getRotation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetRotation_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		Quaternion result = fixture.getRotation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.0, 1.0)", result.toString());
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(1.0f, result.getW(), 1.0f);
		assertEquals(1.0f, result.norm(), 1.0f);
	}

	/**
	 * Run the Quaternion getRotation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetRotation_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		Quaternion result = fixture.getRotation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.0, 1.0)", result.toString());
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(1.0f, result.getW(), 1.0f);
		assertEquals(1.0f, result.norm(), 1.0f);
	}

	/**
	 * Run the Quaternion getRotation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetRotation_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		Quaternion result = fixture.getRotation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.0, 1.0)", result.toString());
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(1.0f, result.getW(), 1.0f);
		assertEquals(1.0f, result.norm(), 1.0f);
	}

	/**
	 * Run the Quaternion getRotation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetRotation_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		Quaternion result = fixture.getRotation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.0, 1.0)", result.toString());
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(1.0f, result.getW(), 1.0f);
		assertEquals(1.0f, result.norm(), 1.0f);
	}

	/**
	 * Run the Quaternion getRotation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetRotation_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		Quaternion result = fixture.getRotation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.0, 1.0)", result.toString());
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(1.0f, result.getW(), 1.0f);
		assertEquals(1.0f, result.norm(), 1.0f);
	}

	/**
	 * Run the Quaternion getRotation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetRotation_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		Quaternion result = fixture.getRotation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.0, 1.0)", result.toString());
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(1.0f, result.getW(), 1.0f);
		assertEquals(1.0f, result.norm(), 1.0f);
	}

	/**
	 * Run the Quaternion getRotation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetRotation_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		Quaternion result = fixture.getRotation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.0, 1.0)", result.toString());
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(1.0f, result.getW(), 1.0f);
		assertEquals(1.0f, result.norm(), 1.0f);
	}

	/**
	 * Run the Quaternion getRotation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetRotation_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		Quaternion result = fixture.getRotation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.0, 1.0)", result.toString());
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(1.0f, result.getW(), 1.0f);
		assertEquals(1.0f, result.norm(), 1.0f);
	}

	/**
	 * Run the Quaternion getRotation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetRotation_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		Quaternion result = fixture.getRotation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.0, 1.0)", result.toString());
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(1.0f, result.getW(), 1.0f);
		assertEquals(1.0f, result.norm(), 1.0f);
	}

	/**
	 * Run the Quaternion getRotation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetRotation_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		Quaternion result = fixture.getRotation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.0, 1.0)", result.toString());
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(1.0f, result.getW(), 1.0f);
		assertEquals(1.0f, result.norm(), 1.0f);
	}

	/**
	 * Run the Quaternion getRotation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetRotation_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		Quaternion result = fixture.getRotation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.0, 1.0)", result.toString());
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(1.0f, result.getW(), 1.0f);
		assertEquals(1.0f, result.norm(), 1.0f);
	}

	/**
	 * Run the Quaternion getRotation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetRotation_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		Quaternion result = fixture.getRotation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.0, 1.0)", result.toString());
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(1.0f, result.getW(), 1.0f);
		assertEquals(1.0f, result.norm(), 1.0f);
	}

	/**
	 * Run the Quaternion getRotation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetRotation_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		Quaternion result = fixture.getRotation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.0, 1.0)", result.toString());
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(1.0f, result.getW(), 1.0f);
		assertEquals(1.0f, result.norm(), 1.0f);
	}

	/**
	 * Run the Quaternion getRotation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetRotation_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		Quaternion result = fixture.getRotation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.0, 1.0)", result.toString());
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(1.0f, result.getW(), 1.0f);
		assertEquals(1.0f, result.norm(), 1.0f);
	}

	/**
	 * Run the Quaternion getRotation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetRotation_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		Quaternion result = fixture.getRotation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.0, 1.0)", result.toString());
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(1.0f, result.getW(), 1.0f);
		assertEquals(1.0f, result.norm(), 1.0f);
	}

	/**
	 * Run the Quaternion getRotation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetRotation_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		Quaternion result = fixture.getRotation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.0, 1.0)", result.toString());
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(1.0f, result.getW(), 1.0f);
		assertEquals(1.0f, result.norm(), 1.0f);
	}

	/**
	 * Run the Quaternion getRotation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetRotation_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		Quaternion result = fixture.getRotation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.0, 1.0)", result.toString());
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(1.0f, result.getW(), 1.0f);
		assertEquals(1.0f, result.norm(), 1.0f);
	}

	/**
	 * Run the Quaternion getRotation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetRotation_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		Quaternion result = fixture.getRotation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.0, 1.0)", result.toString());
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(1.0f, result.getW(), 1.0f);
		assertEquals(1.0f, result.norm(), 1.0f);
	}

	/**
	 * Run the Quaternion getRotation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetRotation_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		Quaternion result = fixture.getRotation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.0, 1.0)", result.toString());
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(1.0f, result.getW(), 1.0f);
		assertEquals(1.0f, result.norm(), 1.0f);
	}

	/**
	 * Run the Quaternion getRotation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetRotation_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		Quaternion result = fixture.getRotation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.0, 1.0)", result.toString());
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(1.0f, result.getW(), 1.0f);
		assertEquals(1.0f, result.norm(), 1.0f);
	}

	/**
	 * Run the Quaternion getRotation() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetRotation_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		Quaternion result = fixture.getRotation();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.0, 1.0)", result.toString());
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(1.0f, result.getW(), 1.0f);
		assertEquals(1.0f, result.norm(), 1.0f);
	}

	/**
	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testGetScreenCoordinates_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();
		Vector3f worldPos = Vector3f.NAN;

		Vector3f result = fixture.getScreenCoordinates(worldPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("0.0, 0.0, 0.5)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}*/

	/**
	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetScreenCoordinates_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		Vector3f worldPos = Vector3f.NEGATIVE_INFINITY;

		Vector3f result = fixture.getScreenCoordinates(worldPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, 0.0, -1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetScreenCoordinates_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		Vector3f worldPos = Vector3f.POSITIVE_INFINITY;

		Vector3f result = fixture.getScreenCoordinates(worldPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, -0.0, 0.5)", result.toString());
		assertEquals(0.5, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetScreenCoordinates_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		Vector3f worldPos = Vector3f.UNIT_X;

		Vector3f result = fixture.getScreenCoordinates(worldPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(Float.NaN, result.getY(), 1.0f);
		assertEquals(Float.NaN, result.getX(), 1.0f);
		assertEquals(Float.NaN, result.getZ(), 1.0f);
		assertEquals(Float.NaN, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetScreenCoordinates_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		Vector3f worldPos = Vector3f.UNIT_XYZ;

		Vector3f result = fixture.getScreenCoordinates(worldPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(Float.NaN, result.getY(), 1.0f);
		assertEquals(Float.NaN, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetScreenCoordinates_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		Vector3f worldPos = Vector3f.UNIT_Y;

		Vector3f result = fixture.getScreenCoordinates(worldPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(Float.NaN, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetScreenCoordinates_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		Vector3f worldPos = Vector3f.UNIT_Z;

		Vector3f result = fixture.getScreenCoordinates(worldPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(Float.NaN, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetScreenCoordinates_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		Vector3f worldPos = Vector3f.ZERO;

		Vector3f result = fixture.getScreenCoordinates(worldPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(Float.NaN, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetScreenCoordinates_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		Vector3f worldPos = new Vector3f();

		Vector3f result = fixture.getScreenCoordinates(worldPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(Float.NaN, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture10_1()
//		throws Exception {
//		Camera fixture = getFixture10();
//		Vector3f worldPos = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getScreenCoordinates(worldPos);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture11_1()
//		throws Exception {
//		Camera fixture = getFixture11();
//		Vector3f worldPos = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getScreenCoordinates(worldPos);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture12_1()
//		throws Exception {
//		Camera fixture = getFixture12();
//		Vector3f worldPos = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getScreenCoordinates(worldPos);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture13_1()
//		throws Exception {
//		Camera fixture = getFixture13();
//		Vector3f worldPos = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getScreenCoordinates(worldPos);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture14_1()
//		throws Exception {
//		Camera fixture = getFixture14();
//		Vector3f worldPos = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getScreenCoordinates(worldPos);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture15_1()
//		throws Exception {
//		Camera fixture = getFixture15();
//		Vector3f worldPos = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getScreenCoordinates(worldPos);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture16_1()
//		throws Exception {
//		Camera fixture = getFixture16();
//		Vector3f worldPos = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getScreenCoordinates(worldPos);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture17_1()
//		throws Exception {
//		Camera fixture = getFixture17();
//		Vector3f worldPos = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getScreenCoordinates(worldPos);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture18_1()
//		throws Exception {
//		Camera fixture = getFixture18();
//		Vector3f worldPos = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getScreenCoordinates(worldPos);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture19_1()
//		throws Exception {
//		Camera fixture = getFixture19();
//		Vector3f worldPos = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getScreenCoordinates(worldPos);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture20_1()
//		throws Exception {
//		Camera fixture = getFixture20();
//		Vector3f worldPos = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getScreenCoordinates(worldPos);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture21_1()
//		throws Exception {
//		Camera fixture = getFixture21();
//		Vector3f worldPos = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getScreenCoordinates(worldPos);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture22_1()
//		throws Exception {
//		Camera fixture = getFixture22();
//		Vector3f worldPos = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getScreenCoordinates(worldPos);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture23_1()
//		throws Exception {
//		Camera fixture = getFixture23();
//		Vector3f worldPos = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getScreenCoordinates(worldPos);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture24_1()
//		throws Exception {
//		Camera fixture = getFixture24();
//		Vector3f worldPos = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getScreenCoordinates(worldPos);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture25_1()
//		throws Exception {
//		Camera fixture = getFixture25();
//		Vector3f worldPos = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getScreenCoordinates(worldPos);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture26_1()
//		throws Exception {
//		Camera fixture = getFixture26();
//		Vector3f worldPos = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getScreenCoordinates(worldPos);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture27_1()
//		throws Exception {
//		Camera fixture = getFixture27();
//		Vector3f worldPos = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getScreenCoordinates(worldPos);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture28_1()
//		throws Exception {
//		Camera fixture = getFixture28();
//		Vector3f worldPos = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getScreenCoordinates(worldPos);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture29_1()
//		throws Exception {
//		Camera fixture = getFixture29();
//		Vector3f worldPos = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getScreenCoordinates(worldPos);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}

	/**
	 * Run the Vector3f getScreenCoordinates(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetScreenCoordinates_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		Vector3f worldPos = Vector3f.NAN;

		Vector3f result = fixture.getScreenCoordinates(worldPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, 0.0, -1.0)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testGetScreenCoordinates_fixture1_2()
		throws Exception {
		Camera fixture = getFixture1();
		Vector3f worldPosition = Vector3f.NAN;
		Vector3f store = null;

		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 0.0, 0.5)", result.toString());
		assertEquals(0.5f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(false, result.isUnitVector());
	}*/

	/**
	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetScreenCoordinates_fixture2_3()
		throws Exception {
		CameraView fixture = getFixture2();
		Vector3f worldPosition = Vector3f.NEGATIVE_INFINITY;
		Vector3f store = null;

		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, 0.0, -1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetScreenCoordinates_fixture3_2()
		throws Exception {
		CameraView fixture = getFixture3();
		Vector3f worldPosition = Vector3f.POSITIVE_INFINITY;
		Vector3f store = null;

		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0,-0.0, 0.5)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetScreenCoordinates_fixture4_2()
		throws Exception {
		CameraView fixture = getFixture4();
		Vector3f worldPosition = Vector3f.UNIT_X;
		Vector3f store = null;

		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(Float.NaN, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetScreenCoordinates_fixture5_2()
		throws Exception {
		CameraView fixture = getFixture5();
		Vector3f worldPosition = Vector3f.UNIT_XYZ;
		Vector3f store = null;

		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(Float.NaN, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetScreenCoordinates_fixture6_2()
		throws Exception {
		CameraView fixture = getFixture6();
		Vector3f worldPosition = Vector3f.UNIT_Y;
		Vector3f store = null;

		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(Float.NaN, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetScreenCoordinates_fixture7_2()
		throws Exception {
		CameraView fixture = getFixture7();
		Vector3f worldPosition = Vector3f.UNIT_Z;
		Vector3f store = null;

		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(Float.NaN, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetScreenCoordinates_fixture8_2()
		throws Exception {
		CameraView fixture = getFixture8();
		Vector3f worldPosition = Vector3f.ZERO;
		Vector3f store = null;

		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(Float.NaN, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetScreenCoordinates_fixture9_2()
		throws Exception {
		CameraView fixture = getFixture9();
		Vector3f worldPosition = new Vector3f();
		Vector3f store = null;

		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(Float.NaN, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture10_2()
//		throws Exception {
//		Camera fixture = getFixture10();
//		Vector3f worldPosition = new Vector3f((Vector3f) null);
//		Vector3f store = null;
//
//		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture11_2()
//		throws Exception {
//		Camera fixture = getFixture11();
//		Vector3f worldPosition = new Vector3f((Vector3f) null);
//		Vector3f store = null;
//
//		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture12_2()
//		throws Exception {
//		Camera fixture = getFixture12();
//		Vector3f worldPosition = new Vector3f((Vector3f) null);
//		Vector3f store = null;
//
//		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture13_2()
//		throws Exception {
//		Camera fixture = getFixture13();
//		Vector3f worldPosition = new Vector3f((Vector3f) null);
//		Vector3f store = null;
//
//		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture14_2()
//		throws Exception {
//		Camera fixture = getFixture14();
//		Vector3f worldPosition = new Vector3f((Vector3f) null);
//		Vector3f store = null;
//
//		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture15_2()
//		throws Exception {
//		Camera fixture = getFixture15();
//		Vector3f worldPosition = new Vector3f((Vector3f) null);
//		Vector3f store = null;
//
//		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture16_2()
//		throws Exception {
//		Camera fixture = getFixture16();
//		Vector3f worldPosition = new Vector3f((Vector3f) null);
//		Vector3f store = null;
//
//		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture17_2()
//		throws Exception {
//		Camera fixture = getFixture17();
//		Vector3f worldPosition = new Vector3f((Vector3f) null);
//		Vector3f store = null;
//
//		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture18_2()
//		throws Exception {
//		Camera fixture = getFixture18();
//		Vector3f worldPosition = new Vector3f((Vector3f) null);
//		Vector3f store = null;
//
//		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture19_2()
//		throws Exception {
//		Camera fixture = getFixture19();
//		Vector3f worldPosition = new Vector3f((Vector3f) null);
//		Vector3f store = null;
//
//		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture20_2()
//		throws Exception {
//		Camera fixture = getFixture20();
//		Vector3f worldPosition = new Vector3f((Vector3f) null);
//		Vector3f store = null;
//
//		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture21_2()
//		throws Exception {
//		Camera fixture = getFixture21();
//		Vector3f worldPosition = new Vector3f((Vector3f) null);
//		Vector3f store = null;
//
//		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture22_2()
//		throws Exception {
//		Camera fixture = getFixture22();
//		Vector3f worldPosition = new Vector3f((Vector3f) null);
//		Vector3f store = null;
//
//		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture23_2()
//		throws Exception {
//		Camera fixture = getFixture23();
//		Vector3f worldPosition = new Vector3f((Vector3f) null);
//		Vector3f store = null;
//
//		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture24_2()
//		throws Exception {
//		Camera fixture = getFixture24();
//		Vector3f worldPosition = new Vector3f((Vector3f) null);
//		Vector3f store = null;
//
//		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture25_2()
//		throws Exception {
//		Camera fixture = getFixture25();
//		Vector3f worldPosition = new Vector3f((Vector3f) null);
//		Vector3f store = null;
//
//		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture26_2()
//		throws Exception {
//		Camera fixture = getFixture26();
//		Vector3f worldPosition = new Vector3f((Vector3f) null);
//		Vector3f store = null;
//
//		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture27_2()
//		throws Exception {
//		Camera fixture = getFixture27();
//		Vector3f worldPosition = new Vector3f((Vector3f) null);
//		Vector3f store = null;
//
//		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture28_2()
//		throws Exception {
//		Camera fixture = getFixture28();
//		Vector3f worldPosition = new Vector3f((Vector3f) null);
//		Vector3f store = null;
//
//		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetScreenCoordinates_fixture29_2()
//		throws Exception {
//		Camera fixture = getFixture29();
//		Vector3f worldPosition = new Vector3f((Vector3f) null);
//		Vector3f store = null;
//
//		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}

	/**
	 * Run the Vector3f getScreenCoordinates(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetScreenCoordinates_fixture2_4()
		throws Exception {
		CameraView fixture = getFixture2();
		Vector3f worldPosition = Vector3f.NAN;
		Vector3f store = null;

		Vector3f result = fixture.getScreenCoordinates(worldPosition, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(-0.0, 0.0, -1.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 * 
	 * No test for fixture1
	 */
/*	@Test
	public void testGetUp_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();

		Vector3f result = fixture.getUp();

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.getUp(Camera.java:731)
		assertNotNull(result);
	}
*/
	/**
	 * Run the Vector3f getUp() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		Vector3f result = fixture.getUp();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		Vector3f result = fixture.getUp();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		Vector3f result = fixture.getUp();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		Vector3f result = fixture.getUp();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		Vector3f result = fixture.getUp();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		Vector3f result = fixture.getUp();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		Vector3f result = fixture.getUp();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		Vector3f result = fixture.getUp();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		Vector3f result = fixture.getUp();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		Vector3f result = fixture.getUp();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		Vector3f result = fixture.getUp();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		Vector3f result = fixture.getUp();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		Vector3f result = fixture.getUp();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		Vector3f result = fixture.getUp();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		Vector3f result = fixture.getUp();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		Vector3f result = fixture.getUp();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		Vector3f result = fixture.getUp();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		Vector3f result = fixture.getUp();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		Vector3f result = fixture.getUp();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		Vector3f result = fixture.getUp();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		Vector3f result = fixture.getUp();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		Vector3f result = fixture.getUp();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		Vector3f result = fixture.getUp();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		Vector3f result = fixture.getUp();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		Vector3f result = fixture.getUp();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		Vector3f result = fixture.getUp();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		Vector3f result = fixture.getUp();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		Vector3f result = fixture.getUp();

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 * 
	 * No test for fixture 1
	 */
/*	@Test
	public void testGetUp_fixture1_2()
		throws Exception {
		Camera fixture = getFixture1();
		Vector3f store = Vector3f.NAN;

		Vector3f result = fixture.getUp(store);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.getUp(Camera.java:762)
		assertNotNull(result);
	}
*/
	/**
	 * Run the Vector3f getUp(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		Vector3f store = Vector3f.NEGATIVE_INFINITY;

		Vector3f result = fixture.getUp(store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture3_2()
		throws Exception {
		CameraView fixture = getFixture3();
		Vector3f store = Vector3f.POSITIVE_INFINITY;

		Vector3f result = fixture.getUp(store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture4_2()
		throws Exception {
		CameraView fixture = getFixture4();
		Vector3f store = Vector3f.UNIT_X;

		Vector3f result = fixture.getUp(store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture5_2()
		throws Exception {
		CameraView fixture = getFixture5();
		Vector3f store = Vector3f.UNIT_XYZ;

		Vector3f result = fixture.getUp(store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture6_2()
		throws Exception {
		CameraView fixture = getFixture6();
		Vector3f store = Vector3f.UNIT_Y;

		Vector3f result = fixture.getUp(store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture7_2()
		throws Exception {
		CameraView fixture = getFixture7();
		Vector3f store = Vector3f.UNIT_Z;

		Vector3f result = fixture.getUp(store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture8_2()
		throws Exception {
		CameraView fixture = getFixture8();
		Vector3f store = Vector3f.ZERO;

		Vector3f result = fixture.getUp(store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getUp(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture9_2()
		throws Exception {
		CameraView fixture = getFixture9();
		Vector3f store = new Vector3f();

		Vector3f result = fixture.getUp(store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

//	/**
//	 * Run the Vector3f getUp(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetUp_fixture10_2()
//		throws Exception {
//		Camera fixture = getFixture10();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getUp(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getUp(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetUp_fixture11_2()
//		throws Exception {
//		Camera fixture = getFixture11();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getUp(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getUp(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetUp_fixture12_2()
//		throws Exception {
//		Camera fixture = getFixture12();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getUp(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getUp(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetUp_fixture13_2()
//		throws Exception {
//		Camera fixture = getFixture13();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getUp(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getUp(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetUp_fixture14_2()
//		throws Exception {
//		Camera fixture = getFixture14();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getUp(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getUp(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetUp_fixture15_2()
//		throws Exception {
//		Camera fixture = getFixture15();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getUp(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getUp(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetUp_fixture16_2()
//		throws Exception {
//		Camera fixture = getFixture16();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getUp(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getUp(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetUp_fixture17_2()
//		throws Exception {
//		Camera fixture = getFixture17();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getUp(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getUp(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetUp_fixture18_2()
//		throws Exception {
//		Camera fixture = getFixture18();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getUp(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getUp(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetUp_fixture19_2()
//		throws Exception {
//		Camera fixture = getFixture19();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getUp(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getUp(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetUp_fixture20_2()
//		throws Exception {
//		Camera fixture = getFixture20();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getUp(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getUp(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetUp_fixture21_2()
//		throws Exception {
//		Camera fixture = getFixture21();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getUp(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getUp(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetUp_fixture22_2()
//		throws Exception {
//		Camera fixture = getFixture22();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getUp(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getUp(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetUp_fixture23_2()
//		throws Exception {
//		Camera fixture = getFixture23();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getUp(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getUp(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetUp_fixture24_2()
//		throws Exception {
//		Camera fixture = getFixture24();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getUp(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getUp(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetUp_fixture25_2()
//		throws Exception {
//		Camera fixture = getFixture25();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getUp(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getUp(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetUp_fixture26_2()
//		throws Exception {
//		Camera fixture = getFixture26();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getUp(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getUp(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetUp_fixture27_2()
//		throws Exception {
//		Camera fixture = getFixture27();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getUp(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getUp(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetUp_fixture28_2()
//		throws Exception {
//		Camera fixture = getFixture28();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getUp(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}
//
//	/**
//	 * Run the Vector3f getUp(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testGetUp_fixture29_2()
//		throws Exception {
//		Camera fixture = getFixture29();
//		Vector3f store = new Vector3f((Vector3f) null);
//
//		Vector3f result = fixture.getUp(store);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//		assertNotNull(result);
//	}

	/**
	 * Run the Vector3f getUp(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetUp_fixture2_3()
		throws Exception {
		CameraView fixture = getFixture2();
		Vector3f store = Vector3f.NAN;

		Vector3f result = fixture.getUp(store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(0.0, 1.0, 0.0)", result.toString());
		assertEquals(1.0f, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Matrix4f getViewMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testGetViewMatrix_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();

		Matrix4f result = fixture.getViewMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  0.0 \n 0.0  0.0  1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(true, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}*/

	/**
	 * Run the Matrix4f getViewMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewMatrix_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		Matrix4f result = fixture.getViewMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n -1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  0.0 \n 0.0  0.0  -1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewMatrix_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		Matrix4f result = fixture.getViewMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n -1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  -1.0 \n 0.0  0.0  -1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewMatrix_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		Matrix4f result = fixture.getViewMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n -1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  -1.0 \n 0.0  0.0  -1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewMatrix_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		Matrix4f result = fixture.getViewMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n -1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  -1.0 \n 0.0  0.0  -1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewMatrix_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		Matrix4f result = fixture.getViewMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n -1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  -1.0 \n 0.0  0.0  -1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewMatrix_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		Matrix4f result = fixture.getViewMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n -1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  -1.0 \n 0.0  0.0  -1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewMatrix_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		Matrix4f result = fixture.getViewMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n -1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  -1.0 \n 0.0  0.0  -1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewMatrix_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		Matrix4f result = fixture.getViewMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n -1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  -1.0 \n 0.0  0.0  -1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewMatrix_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		Matrix4f result = fixture.getViewMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n -1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  -1.0 \n 0.0  0.0  -1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewMatrix_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		Matrix4f result = fixture.getViewMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n -1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  -1.0 \n 0.0  0.0  -1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewMatrix_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		Matrix4f result = fixture.getViewMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n -1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  -1.0 \n 0.0  0.0  -1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewMatrix_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		Matrix4f result = fixture.getViewMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n -1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  -1.0 \n 0.0  0.0  -1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewMatrix_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		Matrix4f result = fixture.getViewMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n -1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  -1.0 \n 0.0  0.0  -1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewMatrix_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		Matrix4f result = fixture.getViewMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n -1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  -1.0 \n 0.0  0.0  -1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewMatrix_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		Matrix4f result = fixture.getViewMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n -1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  -1.0 \n 0.0  0.0  -1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewMatrix_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		Matrix4f result = fixture.getViewMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n -1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  -1.0 \n 0.0  0.0  -1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewMatrix_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		Matrix4f result = fixture.getViewMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n -1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  -1.0 \n 0.0  0.0  -1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewMatrix_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		Matrix4f result = fixture.getViewMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n -1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  -1.0 \n 0.0  0.0  -1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewMatrix_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		Matrix4f result = fixture.getViewMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n -1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  -1.0 \n 0.0  0.0  -1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewMatrix_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		Matrix4f result = fixture.getViewMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n -1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  -1.0 \n 0.0  0.0  -1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewMatrix_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		Matrix4f result = fixture.getViewMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n -1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  -1.0 \n 0.0  0.0  -1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewMatrix_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		Matrix4f result = fixture.getViewMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n -1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  -1.0 \n 0.0  0.0  -1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewMatrix_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		Matrix4f result = fixture.getViewMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n -1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  -1.0 \n 0.0  0.0  -1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewMatrix_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		Matrix4f result = fixture.getViewMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n -1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  -1.0 \n 0.0  0.0  -1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewMatrix_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		Matrix4f result = fixture.getViewMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n -1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  -1.0 \n 0.0  0.0  -1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewMatrix_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		Matrix4f result = fixture.getViewMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n -1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  -1.0 \n 0.0  0.0  -1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewMatrix_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		Matrix4f result = fixture.getViewMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n -1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  -1.0 \n 0.0  0.0  -1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewMatrix_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		Matrix4f result = fixture.getViewMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n -1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  -1.0 \n 0.0  0.0  -1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the float getViewPortBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortBottom_fixture1_1()
		throws Exception {
		CameraView fixture = getFixture1();

		float result = fixture.getViewPortBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortBottom_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		float result = fixture.getViewPortBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortBottom_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		float result = fixture.getViewPortBottom();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortBottom_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		float result = fixture.getViewPortBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortBottom_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		float result = fixture.getViewPortBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortBottom_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		float result = fixture.getViewPortBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortBottom_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		float result = fixture.getViewPortBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortBottom_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		float result = fixture.getViewPortBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortBottom_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		float result = fixture.getViewPortBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortBottom_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		float result = fixture.getViewPortBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortBottom_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		float result = fixture.getViewPortBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortBottom_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		float result = fixture.getViewPortBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortBottom_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		float result = fixture.getViewPortBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortBottom_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		float result = fixture.getViewPortBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortBottom_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		float result = fixture.getViewPortBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortBottom_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		float result = fixture.getViewPortBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortBottom_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		float result = fixture.getViewPortBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortBottom_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		float result = fixture.getViewPortBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortBottom_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		float result = fixture.getViewPortBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortBottom_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		float result = fixture.getViewPortBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortBottom_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		float result = fixture.getViewPortBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortBottom_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		float result = fixture.getViewPortBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortBottom_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		float result = fixture.getViewPortBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortBottom_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		float result = fixture.getViewPortBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortBottom_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		float result = fixture.getViewPortBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortBottom_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		float result = fixture.getViewPortBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortBottom_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		float result = fixture.getViewPortBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortBottom_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		float result = fixture.getViewPortBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortBottom() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortBottom_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		float result = fixture.getViewPortBottom();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortLeft_fixture1_1()
		throws Exception {
		CameraView fixture = getFixture1();

		float result = fixture.getViewPortLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortLeft_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		float result = fixture.getViewPortLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortLeft_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		float result = fixture.getViewPortLeft();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortLeft_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		float result = fixture.getViewPortLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortLeft_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		float result = fixture.getViewPortLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortLeft_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		float result = fixture.getViewPortLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortLeft_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		float result = fixture.getViewPortLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortLeft_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		float result = fixture.getViewPortLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortLeft_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		float result = fixture.getViewPortLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortLeft_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		float result = fixture.getViewPortLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortLeft_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		float result = fixture.getViewPortLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortLeft_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		float result = fixture.getViewPortLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortLeft_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		float result = fixture.getViewPortLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortLeft_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		float result = fixture.getViewPortLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortLeft_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		float result = fixture.getViewPortLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortLeft_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		float result = fixture.getViewPortLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortLeft_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		float result = fixture.getViewPortLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortLeft_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		float result = fixture.getViewPortLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortLeft_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		float result = fixture.getViewPortLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortLeft_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		float result = fixture.getViewPortLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortLeft_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		float result = fixture.getViewPortLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortLeft_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		float result = fixture.getViewPortLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortLeft_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		float result = fixture.getViewPortLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortLeft_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		float result = fixture.getViewPortLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortLeft_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		float result = fixture.getViewPortLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortLeft_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		float result = fixture.getViewPortLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortLeft_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		float result = fixture.getViewPortLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortLeft_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		float result = fixture.getViewPortLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortLeft() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortLeft_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		float result = fixture.getViewPortLeft();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortRight_fixture1_1()
		throws Exception {
		CameraView fixture = getFixture1();

		float result = fixture.getViewPortRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortRight_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		float result = fixture.getViewPortRight();

		// add additional test code here
		assertEquals(1.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortRight_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		float result = fixture.getViewPortRight();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortRight_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		float result = fixture.getViewPortRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortRight_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		float result = fixture.getViewPortRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortRight_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		float result = fixture.getViewPortRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortRight_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		float result = fixture.getViewPortRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortRight_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		float result = fixture.getViewPortRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortRight_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		float result = fixture.getViewPortRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortRight_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		float result = fixture.getViewPortRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortRight_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		float result = fixture.getViewPortRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortRight_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		float result = fixture.getViewPortRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortRight_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		float result = fixture.getViewPortRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortRight_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		float result = fixture.getViewPortRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortRight_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		float result = fixture.getViewPortRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortRight_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		float result = fixture.getViewPortRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortRight_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		float result = fixture.getViewPortRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortRight_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		float result = fixture.getViewPortRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortRight_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		float result = fixture.getViewPortRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortRight_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		float result = fixture.getViewPortRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortRight_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		float result = fixture.getViewPortRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortRight_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		float result = fixture.getViewPortRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortRight_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		float result = fixture.getViewPortRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortRight_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		float result = fixture.getViewPortRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortRight_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		float result = fixture.getViewPortRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortRight_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		float result = fixture.getViewPortRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortRight_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		float result = fixture.getViewPortRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortRight_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		float result = fixture.getViewPortRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortRight() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortRight_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		float result = fixture.getViewPortRight();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortTop_fixture1_1()
		throws Exception {
		CameraView fixture = getFixture1();

		float result = fixture.getViewPortTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortTop_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		float result = fixture.getViewPortTop();

		// add additional test code here
		assertEquals(1.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortTop_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		float result = fixture.getViewPortTop();

		// add additional test code here
		assertEquals(-1.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortTop_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		float result = fixture.getViewPortTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortTop_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		float result = fixture.getViewPortTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortTop_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		float result = fixture.getViewPortTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortTop_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		float result = fixture.getViewPortTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortTop_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		float result = fixture.getViewPortTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortTop_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		float result = fixture.getViewPortTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortTop_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		float result = fixture.getViewPortTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortTop_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		float result = fixture.getViewPortTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortTop_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		float result = fixture.getViewPortTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortTop_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		float result = fixture.getViewPortTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortTop_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		float result = fixture.getViewPortTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortTop_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		float result = fixture.getViewPortTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortTop_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		float result = fixture.getViewPortTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortTop_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		float result = fixture.getViewPortTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortTop_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		float result = fixture.getViewPortTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortTop_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		float result = fixture.getViewPortTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortTop_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		float result = fixture.getViewPortTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortTop_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		float result = fixture.getViewPortTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortTop_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		float result = fixture.getViewPortTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortTop_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		float result = fixture.getViewPortTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortTop_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		float result = fixture.getViewPortTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortTop_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		float result = fixture.getViewPortTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortTop_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		float result = fixture.getViewPortTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortTop_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		float result = fixture.getViewPortTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortTop_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		float result = fixture.getViewPortTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the float getViewPortTop() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewPortTop_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		float result = fixture.getViewPortTop();

		// add additional test code here
		assertEquals(0.0f, result, 0.1f);
	}

	/**
	 * Run the Matrix4f getViewProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testGetViewProjectionMatrix_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();

		Matrix4f result = fixture.getViewProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 1.0  0.0  0.0  0.0 \n 0.0  1.0  0.0  0.0 \n 0.0  0.0  1.0  0.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}*/

	/**
	 * Run the Matrix4f getViewProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewProjectionMatrix_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		Matrix4f result = fixture.getViewProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n -2.0  0.0  0.0  0.0 \n 0.0  2.0  0.0  0.0 \n 0.0  0.0  2.0  -3.0 \n 0.0  0.0  0.0  1.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewProjectionMatrix_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		Matrix4f result = fixture.getViewProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewProjectionMatrix_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		Matrix4f result = fixture.getViewProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewProjectionMatrix_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		Matrix4f result = fixture.getViewProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewProjectionMatrix_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		Matrix4f result = fixture.getViewProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewProjectionMatrix_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		Matrix4f result = fixture.getViewProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewProjectionMatrix_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		Matrix4f result = fixture.getViewProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewProjectionMatrix_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		Matrix4f result = fixture.getViewProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewProjectionMatrix_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		Matrix4f result = fixture.getViewProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewProjectionMatrix_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		Matrix4f result = fixture.getViewProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewProjectionMatrix_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		Matrix4f result = fixture.getViewProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewProjectionMatrix_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		Matrix4f result = fixture.getViewProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewProjectionMatrix_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		Matrix4f result = fixture.getViewProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewProjectionMatrix_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		Matrix4f result = fixture.getViewProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewProjectionMatrix_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		Matrix4f result = fixture.getViewProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewProjectionMatrix_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		Matrix4f result = fixture.getViewProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewProjectionMatrix_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		Matrix4f result = fixture.getViewProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewProjectionMatrix_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		Matrix4f result = fixture.getViewProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewProjectionMatrix_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		Matrix4f result = fixture.getViewProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewProjectionMatrix_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		Matrix4f result = fixture.getViewProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewProjectionMatrix_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		Matrix4f result = fixture.getViewProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewProjectionMatrix_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		Matrix4f result = fixture.getViewProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewProjectionMatrix_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		Matrix4f result = fixture.getViewProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewProjectionMatrix_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		Matrix4f result = fixture.getViewProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewProjectionMatrix_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		Matrix4f result = fixture.getViewProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewProjectionMatrix_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		Matrix4f result = fixture.getViewProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewProjectionMatrix_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		Matrix4f result = fixture.getViewProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the Matrix4f getViewProjectionMatrix() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewProjectionMatrix_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		Matrix4f result = fixture.getViewProjectionMatrix();

		// add additional test code here
		assertNotNull(result);
		assertEquals("Matrix4f\n[\n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n 0.0  0.0  0.0  0.0 \n]", result.toString());
		assertEquals(false, result.isIdentity());
		assertEquals(0.0f, result.determinant(), 1.0f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture1_1()
		throws Exception {
		CameraView fixture = getFixture1();
		float viewZPos = 0;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		float viewZPos = 0.0f;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NEGATIVE_INFINITY, result, 0.1f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		float viewZPos = 0.0f;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		float viewZPos = 0.0f;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		float viewZPos = 0.0f;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		float viewZPos = 0.0f;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		float viewZPos = 0.0f;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		float viewZPos = 0.0f;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		float viewZPos = 0.0f;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();
		float viewZPos = 0.0f;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();
		float viewZPos = 0.0f;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();
		float viewZPos = 0.0f;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();
		float viewZPos = 0.0f;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();
		float viewZPos = 0.0f;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();
		float viewZPos = 0.0f;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();
		float viewZPos = 0.0f;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();
		float viewZPos = 0.0f;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();
		float viewZPos = 0.0f;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();
		float viewZPos = 0.0f;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();
		float viewZPos = 0.0f;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();
		float viewZPos = 0.0f;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();
		float viewZPos = 0.0f;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();
		float viewZPos = 0.0f;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();
		float viewZPos = 0.0f;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();
		float viewZPos = 0.0f;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();
		float viewZPos = 0.0f;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();
		float viewZPos = 0.0f;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();
		float viewZPos = 0.0f;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();
		float viewZPos = 0.0f;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NaN, result, 0.1f);
	}

	/**
	 * Run the float getViewToProjectionZ(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetViewToProjectionZ_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		float viewZPos = 0;

		float result = fixture.getViewToProjectionZ(viewZPos);

		// add additional test code here
		assertEquals(Float.NEGATIVE_INFINITY, result, 0.1f);
	}

	/**
	 * Run the int getWidth() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWidth_fixture1_1()
		throws Exception {
		CameraView fixture = getFixture1();

		int result = fixture.getWidth();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getWidth() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWidth_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		int result = fixture.getWidth();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getWidth() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWidth_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		int result = fixture.getWidth();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getWidth() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWidth_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		int result = fixture.getWidth();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getWidth() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWidth_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		int result = fixture.getWidth();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getWidth() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWidth_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		int result = fixture.getWidth();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getWidth() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWidth_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		int result = fixture.getWidth();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getWidth() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWidth_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		int result = fixture.getWidth();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getWidth() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWidth_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		int result = fixture.getWidth();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getWidth() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWidth_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		int result = fixture.getWidth();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getWidth() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWidth_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		int result = fixture.getWidth();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getWidth() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWidth_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		int result = fixture.getWidth();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getWidth() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWidth_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		int result = fixture.getWidth();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getWidth() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWidth_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		int result = fixture.getWidth();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getWidth() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWidth_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		int result = fixture.getWidth();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getWidth() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWidth_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		int result = fixture.getWidth();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getWidth() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWidth_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		int result = fixture.getWidth();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getWidth() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWidth_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		int result = fixture.getWidth();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getWidth() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWidth_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		int result = fixture.getWidth();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getWidth() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWidth_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		int result = fixture.getWidth();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getWidth() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWidth_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		int result = fixture.getWidth();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getWidth() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWidth_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		int result = fixture.getWidth();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getWidth() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWidth_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		int result = fixture.getWidth();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getWidth() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWidth_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		int result = fixture.getWidth();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getWidth() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWidth_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		int result = fixture.getWidth();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getWidth() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWidth_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		int result = fixture.getWidth();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getWidth() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWidth_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		int result = fixture.getWidth();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getWidth() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWidth_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		int result = fixture.getWidth();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the int getWidth() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWidth_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		int result = fixture.getWidth();

		// add additional test code here
		assertEquals(0, result);
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	/*@Test
	public void testGetWorldCoordinates_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();
		Vector2f screenPos = Vector2f.UNIT_XY;
		float projectionZPos = -1.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}*/

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		Vector2f screenPos = Vector2f.ZERO;
		float projectionZPos = 0.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		Vector2f screenPos = new Vector2f();
		float projectionZPos = 1.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		Vector2f screenPos = new Vector2f(-1.0f, -1.0f);
		float projectionZPos = 1.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		Vector2f screenPos = new Vector2f(0.0f, 0.0f);
		float projectionZPos = 1.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 * Cannot provide null here as inpara to vector2f
	 *
	 */
/*	@Test
	public void testGetWorldCoordinates_fixture6_1()
		throws Exception {
		Camera fixture = getFixture6();
		Vector2f screenPos = new Vector2f((Vector2f) null);
		float projectionZPos = 1.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.math.Vector2f.<init>(Vector2f.java:91)
		assertNotNull(result);
	}
*/
	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		Vector2f screenPos = Vector2f.UNIT_XY;
		float projectionZPos = 1.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		Vector2f screenPos = Vector2f.ZERO;
		float projectionZPos = 1.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();
		Vector2f screenPos = Vector2f.ZERO;
		float projectionZPos = 1.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();
		Vector2f screenPos = Vector2f.ZERO;
		float projectionZPos = 1.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();
		Vector2f screenPos = Vector2f.ZERO;
		float projectionZPos = 1.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();
		Vector2f screenPos = Vector2f.ZERO;
		float projectionZPos = 1.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();
		Vector2f screenPos = Vector2f.ZERO;
		float projectionZPos = 1.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();
		Vector2f screenPos = Vector2f.ZERO;
		float projectionZPos = 1.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();
		Vector2f screenPos = Vector2f.ZERO;
		float projectionZPos = 1.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();
		Vector2f screenPos = Vector2f.ZERO;
		float projectionZPos = 1.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();
		Vector2f screenPos = Vector2f.ZERO;
		float projectionZPos = 1.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();
		Vector2f screenPos = Vector2f.ZERO;
		float projectionZPos = 1.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();
		Vector2f screenPos = Vector2f.ZERO;
		float projectionZPos = 1.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();
		Vector2f screenPos = Vector2f.ZERO;
		float projectionZPos = 1.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();
		Vector2f screenPos = Vector2f.ZERO;
		float projectionZPos = 1.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();
		Vector2f screenPos = Vector2f.ZERO;
		float projectionZPos = 1.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();
		Vector2f screenPos = Vector2f.ZERO;
		float projectionZPos = 1.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();
		Vector2f screenPos = Vector2f.ZERO;
		float projectionZPos = 1.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();
		Vector2f screenPos = Vector2f.ZERO;
		float projectionZPos = 1.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();
		Vector2f screenPos = Vector2f.ZERO;
		float projectionZPos = 1.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();
		Vector2f screenPos = Vector2f.ZERO;
		float projectionZPos = 1.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();
		Vector2f screenPos = Vector2f.ZERO;
		float projectionZPos = 1.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testGetWorldCoordinates_fixture1_2()
		throws Exception {
		Camera fixture = getFixture1();
		Vector2f screenPos = Vector2f.ZERO;
		float projectionZPos = 1.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}*/

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		Vector2f screenPos = new Vector2f(-1.0f, -1.0f);
		float projectionZPos = -1.0f;

		Vector3f result = fixture.getWorldCoordinates(screenPos, projectionZPos);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	/*@Test
	public void testGetWorldCoordinates_fixture1_3()
		throws Exception {
		Camera fixture = getFixture1();
		Vector2f screenPosition = new Vector2f(0.0f, 0.0f);
		float projectionZPos = -1.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}*/

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture2_3()
		throws Exception {
		CameraView fixture = getFixture2();
		Vector2f screenPosition = new Vector2f(0.0f, 1.0f);
		float projectionZPos = 0.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture3_2()
		throws Exception {
		CameraView fixture = getFixture3();
		Vector2f screenPosition = new Vector2f(1.0f, 0.0f);
		float projectionZPos = 1.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture4_2()
		throws Exception {
		CameraView fixture = getFixture4();
		Vector2f screenPosition = new Vector2f(1.0f, 1.0f);
		float projectionZPos = 1.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture6_2()
		throws Exception {
		CameraView fixture = getFixture6();
		Vector2f screenPosition = new Vector2f(0.0f, 0.0f);
		float projectionZPos = 1.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		Vector2f screenPosition = new Vector2f(0.0f, 1.0f);
		float projectionZPos = 1.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture8_2()
		throws Exception {
		CameraView fixture = getFixture8();
		Vector2f screenPosition = new Vector2f(0.0f, 1.0f);
		float projectionZPos = 1.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture9_2()
		throws Exception {
		CameraView fixture = getFixture9();
		Vector2f screenPosition = new Vector2f(0.0f, 1.0f);
		float projectionZPos = 1.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture10_2()
		throws Exception {
		CameraView fixture = getFixture10();
		Vector2f screenPosition = new Vector2f(0.0f, 1.0f);
		float projectionZPos = 1.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture11_2()
		throws Exception {
		CameraView fixture = getFixture11();
		Vector2f screenPosition = new Vector2f(0.0f, 1.0f);
		float projectionZPos = 1.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture12_2()
		throws Exception {
		CameraView fixture = getFixture12();
		Vector2f screenPosition = new Vector2f(0.0f, 1.0f);
		float projectionZPos = 1.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture13_2()
		throws Exception {
		CameraView fixture = getFixture13();
		Vector2f screenPosition = new Vector2f(0.0f, 1.0f);
		float projectionZPos = 1.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture14_2()
		throws Exception {
		CameraView fixture = getFixture14();
		Vector2f screenPosition = new Vector2f(0.0f, 1.0f);
		float projectionZPos = 1.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture15_2()
		throws Exception {
		CameraView fixture = getFixture15();
		Vector2f screenPosition = new Vector2f(0.0f, 1.0f);
		float projectionZPos = 1.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture16_2()
		throws Exception {
		CameraView fixture = getFixture16();
		Vector2f screenPosition = new Vector2f(0.0f, 1.0f);
		float projectionZPos = 1.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture17_2()
		throws Exception {
		CameraView fixture = getFixture17();
		Vector2f screenPosition = new Vector2f(0.0f, 1.0f);
		float projectionZPos = 1.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture18_2()
		throws Exception {
		CameraView fixture = getFixture18();
		Vector2f screenPosition = new Vector2f(0.0f, 1.0f);
		float projectionZPos = 1.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture19_2()
		throws Exception {
		CameraView fixture = getFixture19();
		Vector2f screenPosition = new Vector2f(0.0f, 1.0f);
		float projectionZPos = 1.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture20_2()
		throws Exception {
		CameraView fixture = getFixture20();
		Vector2f screenPosition = new Vector2f(0.0f, 1.0f);
		float projectionZPos = 1.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture21_2()
		throws Exception {
		CameraView fixture = getFixture21();
		Vector2f screenPosition = new Vector2f(0.0f, 1.0f);
		float projectionZPos = 1.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture22_2()
		throws Exception {
		CameraView fixture = getFixture22();
		Vector2f screenPosition = new Vector2f(0.0f, 1.0f);
		float projectionZPos = 1.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture23_2()
		throws Exception {
		CameraView fixture = getFixture23();
		Vector2f screenPosition = new Vector2f(0.0f, 1.0f);
		float projectionZPos = 1.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture24_2()
		throws Exception {
		CameraView fixture = getFixture24();
		Vector2f screenPosition = new Vector2f(0.0f, 1.0f);
		float projectionZPos = 1.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture25_2()
		throws Exception {
		CameraView fixture = getFixture25();
		Vector2f screenPosition = new Vector2f(0.0f, 1.0f);
		float projectionZPos = 1.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture26_2()
		throws Exception {
		CameraView fixture = getFixture26();
		Vector2f screenPosition = new Vector2f(0.0f, 1.0f);
		float projectionZPos = 1.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture27_2()
		throws Exception {
		CameraView fixture = getFixture27();
		Vector2f screenPosition = new Vector2f(0.0f, 1.0f);
		float projectionZPos = 1.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture28_2()
		throws Exception {
		CameraView fixture = getFixture28();
		Vector2f screenPosition = new Vector2f(0.0f, 1.0f);
		float projectionZPos = 1.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture29_2()
		throws Exception {
		CameraView fixture = getFixture29();
		Vector2f screenPosition = new Vector2f(0.0f, 1.0f);
		float projectionZPos = 1.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testGetWorldCoordinates_fixture1_4()
		throws Exception {
		Camera fixture = getFixture1();
		Vector2f screenPosition = new Vector2f(0.0f, 1.0f);
		float projectionZPos = 1.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}*/

	/**
	 * Run the Vector3f getWorldCoordinates(Vector2f,float,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testGetWorldCoordinates_fixture2_4()
		throws Exception {
		CameraView fixture = getFixture2();
		Vector2f screenPosition = new Vector2f(1.0f, 1.0f);
		float projectionZPos = -1.0f;
		Vector3f store = null;

		Vector3f result = fixture.getWorldCoordinates(screenPosition, projectionZPos, store);

		// add additional test code here
		assertNotNull(result);
		assertEquals("(NaN, NaN, NaN)", result.toString());
		assertEquals(Float.NaN, result.length(), 1.0f);
		assertEquals(0.0f, result.getY(), 1.0f);
		assertEquals(0.0f, result.getX(), 1.0f);
		assertEquals(0.0f, result.getZ(), 1.0f);
		assertEquals(0.0f, result.lengthSquared(), 1.0f);
		assertEquals(true, result.isUnitVector());
	}

	/**
	 * Run the boolean isParallelProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsParallelProjection_fixture1_1()
		throws Exception {
		CameraView fixture = getFixture1();

		boolean result = fixture.isParallelProjection();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isParallelProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsParallelProjection_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		boolean result = fixture.isParallelProjection();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isParallelProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsParallelProjection_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		boolean result = fixture.isParallelProjection();

		// add additional test code here
		assertEquals(false, result);
	}

	/**
	 * Run the boolean isParallelProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsParallelProjection_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		boolean result = fixture.isParallelProjection();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isParallelProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsParallelProjection_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		boolean result = fixture.isParallelProjection();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isParallelProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsParallelProjection_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		boolean result = fixture.isParallelProjection();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isParallelProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsParallelProjection_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		boolean result = fixture.isParallelProjection();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isParallelProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsParallelProjection_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		boolean result = fixture.isParallelProjection();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isParallelProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsParallelProjection_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		boolean result = fixture.isParallelProjection();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isParallelProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsParallelProjection_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		boolean result = fixture.isParallelProjection();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isParallelProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsParallelProjection_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		boolean result = fixture.isParallelProjection();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isParallelProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsParallelProjection_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		boolean result = fixture.isParallelProjection();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isParallelProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsParallelProjection_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		boolean result = fixture.isParallelProjection();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isParallelProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsParallelProjection_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		boolean result = fixture.isParallelProjection();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isParallelProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsParallelProjection_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		boolean result = fixture.isParallelProjection();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isParallelProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsParallelProjection_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		boolean result = fixture.isParallelProjection();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isParallelProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsParallelProjection_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		boolean result = fixture.isParallelProjection();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isParallelProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsParallelProjection_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		boolean result = fixture.isParallelProjection();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isParallelProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsParallelProjection_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		boolean result = fixture.isParallelProjection();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isParallelProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsParallelProjection_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		boolean result = fixture.isParallelProjection();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isParallelProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsParallelProjection_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		boolean result = fixture.isParallelProjection();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isParallelProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsParallelProjection_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		boolean result = fixture.isParallelProjection();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isParallelProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsParallelProjection_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		boolean result = fixture.isParallelProjection();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isParallelProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsParallelProjection_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		boolean result = fixture.isParallelProjection();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isParallelProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsParallelProjection_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		boolean result = fixture.isParallelProjection();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isParallelProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsParallelProjection_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		boolean result = fixture.isParallelProjection();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isParallelProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsParallelProjection_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		boolean result = fixture.isParallelProjection();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isParallelProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsParallelProjection_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		boolean result = fixture.isParallelProjection();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isParallelProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsParallelProjection_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		boolean result = fixture.isParallelProjection();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsViewportChanged_fixture1_1()
		throws Exception {
		CameraView fixture = getFixture1();

		boolean result = fixture.isViewportChanged();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsViewportChanged_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		boolean result = fixture.isViewportChanged();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsViewportChanged_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		boolean result = fixture.isViewportChanged();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsViewportChanged_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		boolean result = fixture.isViewportChanged();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsViewportChanged_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		boolean result = fixture.isViewportChanged();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsViewportChanged_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		boolean result = fixture.isViewportChanged();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsViewportChanged_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		boolean result = fixture.isViewportChanged();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsViewportChanged_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		boolean result = fixture.isViewportChanged();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsViewportChanged_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		boolean result = fixture.isViewportChanged();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsViewportChanged_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		boolean result = fixture.isViewportChanged();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsViewportChanged_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		boolean result = fixture.isViewportChanged();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsViewportChanged_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		boolean result = fixture.isViewportChanged();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsViewportChanged_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		boolean result = fixture.isViewportChanged();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsViewportChanged_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		boolean result = fixture.isViewportChanged();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsViewportChanged_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		boolean result = fixture.isViewportChanged();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsViewportChanged_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		boolean result = fixture.isViewportChanged();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsViewportChanged_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		boolean result = fixture.isViewportChanged();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsViewportChanged_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		boolean result = fixture.isViewportChanged();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsViewportChanged_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		boolean result = fixture.isViewportChanged();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsViewportChanged_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		boolean result = fixture.isViewportChanged();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsViewportChanged_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		boolean result = fixture.isViewportChanged();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsViewportChanged_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		boolean result = fixture.isViewportChanged();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsViewportChanged_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		boolean result = fixture.isViewportChanged();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsViewportChanged_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		boolean result = fixture.isViewportChanged();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsViewportChanged_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		boolean result = fixture.isViewportChanged();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsViewportChanged_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		boolean result = fixture.isViewportChanged();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsViewportChanged_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		boolean result = fixture.isViewportChanged();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsViewportChanged_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		boolean result = fixture.isViewportChanged();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the boolean isViewportChanged() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testIsViewportChanged_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		boolean result = fixture.isViewportChanged();

		// add additional test code here
		assertEquals(true, result);
	}

	/**
	 * Run the void lookAt(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 * fixture 1 not allowed
	 */
/*	@Test
	public void testLookAt_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();
		Vector3f pos = Vector3f.NAN;
		Vector3f worldUpVector = Vector3f.NAN;

		fixture.lookAt(pos, worldUpVector);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.lookAt(Camera.java:947)
	}
*/
	/**
	 * Run the void lookAt(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testLookAt_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		Vector3f pos = Vector3f.NEGATIVE_INFINITY;
		Vector3f worldUpVector = Vector3f.NEGATIVE_INFINITY;

		fixture.lookAt(pos, worldUpVector);

		// add additional test code here
	}

	/**
	 * Run the void lookAt(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testLookAt_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		Vector3f pos = Vector3f.POSITIVE_INFINITY;
		Vector3f worldUpVector = Vector3f.POSITIVE_INFINITY;

		fixture.lookAt(pos, worldUpVector);

		// add additional test code here
	}

	/**
	 * Run the void lookAt(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testLookAt_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		Vector3f pos = Vector3f.UNIT_X;
		Vector3f worldUpVector = Vector3f.UNIT_X;

		fixture.lookAt(pos, worldUpVector);

		// add additional test code here
	}

	/**
	 * Run the void lookAt(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testLookAt_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		Vector3f pos = Vector3f.UNIT_XYZ;
		Vector3f worldUpVector = Vector3f.UNIT_XYZ;

		fixture.lookAt(pos, worldUpVector);

		// add additional test code here
	}

	/**
	 * Run the void lookAt(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testLookAt_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		Vector3f pos = Vector3f.UNIT_Y;
		Vector3f worldUpVector = Vector3f.UNIT_Y;

		fixture.lookAt(pos, worldUpVector);

		// add additional test code here
	}

	/**
	 * Run the void lookAt(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testLookAt_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		Vector3f pos = Vector3f.UNIT_Z;
		Vector3f worldUpVector = Vector3f.UNIT_Z;

		fixture.lookAt(pos, worldUpVector);

		// add additional test code here
	}

	/**
	 * Run the void lookAt(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testLookAt_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		Vector3f pos = Vector3f.ZERO;
		Vector3f worldUpVector = Vector3f.ZERO;

		fixture.lookAt(pos, worldUpVector);

		// add additional test code here
	}

	/**
	 * Run the void lookAt(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testLookAt_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		Vector3f pos = new Vector3f();
		Vector3f worldUpVector = new Vector3f();

		fixture.lookAt(pos, worldUpVector);

		// add additional test code here
	}

//	/**
//	 * Run the void lookAt(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAt_fixture10_1()
//		throws Exception {
//		Camera fixture = getFixture10();
//		Vector3f pos = new Vector3f((Vector3f) null);
//		Vector3f worldUpVector = new Vector3f((Vector3f) null);
//
//		fixture.lookAt(pos, worldUpVector);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAt(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAt_fixture12_1()
//		throws Exception {
//		Camera fixture = getFixture12();
//		Vector3f pos = Vector3f.NAN;
//		Vector3f worldUpVector = new Vector3f((Vector3f) null);
//
//		fixture.lookAt(pos, worldUpVector);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAt(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAt_fixture13_1()
//		throws Exception {
//		Camera fixture = getFixture13();
//		Vector3f pos = Vector3f.NEGATIVE_INFINITY;
//		Vector3f worldUpVector = new Vector3f((Vector3f) null);
//
//		fixture.lookAt(pos, worldUpVector);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAt(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAt_fixture14_1()
//		throws Exception {
//		Camera fixture = getFixture14();
//		Vector3f pos = Vector3f.POSITIVE_INFINITY;
//		Vector3f worldUpVector = new Vector3f((Vector3f) null);
//
//		fixture.lookAt(pos, worldUpVector);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAt(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAt_fixture15_1()
//		throws Exception {
//		Camera fixture = getFixture15();
//		Vector3f pos = Vector3f.UNIT_X;
//		Vector3f worldUpVector = new Vector3f((Vector3f) null);
//
//		fixture.lookAt(pos, worldUpVector);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAt(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAt_fixture16_1()
//		throws Exception {
//		Camera fixture = getFixture16();
//		Vector3f pos = Vector3f.UNIT_XYZ;
//		Vector3f worldUpVector = new Vector3f((Vector3f) null);
//
//		fixture.lookAt(pos, worldUpVector);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAt(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAt_fixture17_1()
//		throws Exception {
//		Camera fixture = getFixture17();
//		Vector3f pos = Vector3f.UNIT_Y;
//		Vector3f worldUpVector = new Vector3f((Vector3f) null);
//
//		fixture.lookAt(pos, worldUpVector);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAt(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAt_fixture18_1()
//		throws Exception {
//		Camera fixture = getFixture18();
//		Vector3f pos = Vector3f.UNIT_Z;
//		Vector3f worldUpVector = new Vector3f((Vector3f) null);
//
//		fixture.lookAt(pos, worldUpVector);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAt(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAt_fixture19_1()
//		throws Exception {
//		Camera fixture = getFixture19();
//		Vector3f pos = Vector3f.ZERO;
//		Vector3f worldUpVector = new Vector3f((Vector3f) null);
//
//		fixture.lookAt(pos, worldUpVector);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAt(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAt_fixture20_1()
//		throws Exception {
//		Camera fixture = getFixture20();
//		Vector3f pos = new Vector3f();
//		Vector3f worldUpVector = new Vector3f((Vector3f) null);
//
//		fixture.lookAt(pos, worldUpVector);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAt(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAt_fixture21_1()
//		throws Exception {
//		Camera fixture = getFixture21();
//		Vector3f pos = new Vector3f();
//		Vector3f worldUpVector = new Vector3f((Vector3f) null);
//
//		fixture.lookAt(pos, worldUpVector);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAt(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAt_fixture22_1()
//		throws Exception {
//		Camera fixture = getFixture22();
//		Vector3f pos = new Vector3f();
//		Vector3f worldUpVector = new Vector3f((Vector3f) null);
//
//		fixture.lookAt(pos, worldUpVector);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAt(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAt_fixture23_1()
//		throws Exception {
//		Camera fixture = getFixture23();
//		Vector3f pos = new Vector3f();
//		Vector3f worldUpVector = new Vector3f((Vector3f) null);
//
//		fixture.lookAt(pos, worldUpVector);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAt(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAt_fixture24_1()
//		throws Exception {
//		Camera fixture = getFixture24();
//		Vector3f pos = new Vector3f();
//		Vector3f worldUpVector = new Vector3f((Vector3f) null);
//
//		fixture.lookAt(pos, worldUpVector);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAt(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAt_fixture25_1()
//		throws Exception {
//		Camera fixture = getFixture25();
//		Vector3f pos = new Vector3f();
//		Vector3f worldUpVector = new Vector3f((Vector3f) null);
//
//		fixture.lookAt(pos, worldUpVector);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAt(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAt_fixture26_1()
//		throws Exception {
//		Camera fixture = getFixture26();
//		Vector3f pos = new Vector3f();
//		Vector3f worldUpVector = new Vector3f((Vector3f) null);
//
//		fixture.lookAt(pos, worldUpVector);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAt(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAt_fixture27_1()
//		throws Exception {
//		Camera fixture = getFixture27();
//		Vector3f pos = new Vector3f();
//		Vector3f worldUpVector = new Vector3f((Vector3f) null);
//
//		fixture.lookAt(pos, worldUpVector);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAt(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAt_fixture28_1()
//		throws Exception {
//		Camera fixture = getFixture28();
//		Vector3f pos = new Vector3f();
//		Vector3f worldUpVector = new Vector3f((Vector3f) null);
//
//		fixture.lookAt(pos, worldUpVector);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAt(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAt_fixture29_1()
//		throws Exception {
//		Camera fixture = getFixture29();
//		Vector3f pos = new Vector3f();
//		Vector3f worldUpVector = new Vector3f((Vector3f) null);
//
//		fixture.lookAt(pos, worldUpVector);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}

//	/**
//	 * Run the void lookAt(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAt_fixture1_2()
//		throws Exception {
//		Camera fixture = getFixture1();
//		Vector3f pos = new Vector3f();
//		Vector3f worldUpVector = new Vector3f((Vector3f) null);
//
//		fixture.lookAt(pos, worldUpVector);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}

	/**
	 * Run the void lookAt(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testLookAt_fixture3_2()
		throws Exception {
		CameraView fixture = getFixture3();
		Vector3f pos = Vector3f.NAN;
		Vector3f worldUpVector = Vector3f.NAN;

		fixture.lookAt(pos, worldUpVector);

		// add additional test code here
	}

	/**
	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testLookAtDirection_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();
		Vector3f direction = Vector3f.NAN;
		Vector3f up = Vector3f.NAN;

		fixture.lookAtDirection(direction, up);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.lookAtDirection(Camera.java:798)
	}*/

	/**
	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testLookAtDirection_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		Vector3f direction = Vector3f.NEGATIVE_INFINITY;
		Vector3f up = Vector3f.NEGATIVE_INFINITY;

		fixture.lookAtDirection(direction, up);

		// add additional test code here
	}

	/**
	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testLookAtDirection_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		Vector3f direction = Vector3f.POSITIVE_INFINITY;
		Vector3f up = Vector3f.POSITIVE_INFINITY;

		fixture.lookAtDirection(direction, up);

		// add additional test code here
	}

	/**
	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testLookAtDirection_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		Vector3f direction = Vector3f.UNIT_X;
		Vector3f up = Vector3f.UNIT_X;

		fixture.lookAtDirection(direction, up);

		// add additional test code here
	}

	/**
	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testLookAtDirection_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		Vector3f direction = Vector3f.UNIT_XYZ;
		Vector3f up = Vector3f.UNIT_XYZ;

		fixture.lookAtDirection(direction, up);

		// add additional test code here
	}

	/**
	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testLookAtDirection_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		Vector3f direction = Vector3f.UNIT_Y;
		Vector3f up = Vector3f.UNIT_Y;

		fixture.lookAtDirection(direction, up);

		// add additional test code here
	}

	/**
	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testLookAtDirection_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		Vector3f direction = Vector3f.UNIT_Z;
		Vector3f up = Vector3f.UNIT_Z;

		fixture.lookAtDirection(direction, up);

		// add additional test code here
	}

	/**
	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testLookAtDirection_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		Vector3f direction = Vector3f.ZERO;
		Vector3f up = Vector3f.ZERO;

		fixture.lookAtDirection(direction, up);

		// add additional test code here
	}

	/**
	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testLookAtDirection_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		Vector3f direction = new Vector3f();
		Vector3f up = new Vector3f();

		fixture.lookAtDirection(direction, up);

		// add additional test code here
	}

//	/**
//	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAtDirection_fixture10_1()
//		throws Exception {
//		Camera fixture = getFixture10();
//		Vector3f direction = new Vector3f((Vector3f) null);
//		Vector3f up = new Vector3f((Vector3f) null);
//
//		fixture.lookAtDirection(direction, up);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAtDirection_fixture12_1()
//		throws Exception {
//		Camera fixture = getFixture12();
//		Vector3f direction = Vector3f.NAN;
//		Vector3f up = new Vector3f((Vector3f) null);
//
//		fixture.lookAtDirection(direction, up);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAtDirection_fixture13_1()
//		throws Exception {
//		Camera fixture = getFixture13();
//		Vector3f direction = Vector3f.NEGATIVE_INFINITY;
//		Vector3f up = new Vector3f((Vector3f) null);
//
//		fixture.lookAtDirection(direction, up);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAtDirection_fixture14_1()
//		throws Exception {
//		Camera fixture = getFixture14();
//		Vector3f direction = Vector3f.POSITIVE_INFINITY;
//		Vector3f up = new Vector3f((Vector3f) null);
//
//		fixture.lookAtDirection(direction, up);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAtDirection_fixture15_1()
//		throws Exception {
//		Camera fixture = getFixture15();
//		Vector3f direction = Vector3f.UNIT_X;
//		Vector3f up = new Vector3f((Vector3f) null);
//
//		fixture.lookAtDirection(direction, up);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAtDirection_fixture16_1()
//		throws Exception {
//		Camera fixture = getFixture16();
//		Vector3f direction = Vector3f.UNIT_XYZ;
//		Vector3f up = new Vector3f((Vector3f) null);
//
//		fixture.lookAtDirection(direction, up);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAtDirection_fixture17_1()
//		throws Exception {
//		Camera fixture = getFixture17();
//		Vector3f direction = Vector3f.UNIT_Y;
//		Vector3f up = new Vector3f((Vector3f) null);
//
//		fixture.lookAtDirection(direction, up);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAtDirection_fixture18_1()
//		throws Exception {
//		Camera fixture = getFixture18();
//		Vector3f direction = Vector3f.UNIT_Z;
//		Vector3f up = new Vector3f((Vector3f) null);
//
//		fixture.lookAtDirection(direction, up);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAtDirection_fixture19_1()
//		throws Exception {
//		Camera fixture = getFixture19();
//		Vector3f direction = Vector3f.ZERO;
//		Vector3f up = new Vector3f((Vector3f) null);
//
//		fixture.lookAtDirection(direction, up);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAtDirection_fixture20_1()
//		throws Exception {
//		Camera fixture = getFixture20();
//		Vector3f direction = new Vector3f();
//		Vector3f up = new Vector3f((Vector3f) null);
//
//		fixture.lookAtDirection(direction, up);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAtDirection_fixture21_1()
//		throws Exception {
//		Camera fixture = getFixture21();
//		Vector3f direction = new Vector3f();
//		Vector3f up = new Vector3f((Vector3f) null);
//
//		fixture.lookAtDirection(direction, up);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAtDirection_fixture22_1()
//		throws Exception {
//		Camera fixture = getFixture22();
//		Vector3f direction = new Vector3f();
//		Vector3f up = new Vector3f((Vector3f) null);
//
//		fixture.lookAtDirection(direction, up);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAtDirection_fixture23_1()
//		throws Exception {
//		Camera fixture = getFixture23();
//		Vector3f direction = new Vector3f();
//		Vector3f up = new Vector3f((Vector3f) null);
//
//		fixture.lookAtDirection(direction, up);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAtDirection_fixture24_1()
//		throws Exception {
//		Camera fixture = getFixture24();
//		Vector3f direction = new Vector3f();
//		Vector3f up = new Vector3f((Vector3f) null);
//
//		fixture.lookAtDirection(direction, up);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAtDirection_fixture25_1()
//		throws Exception {
//		Camera fixture = getFixture25();
//		Vector3f direction = new Vector3f();
//		Vector3f up = new Vector3f((Vector3f) null);
//
//		fixture.lookAtDirection(direction, up);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAtDirection_fixture26_1()
//		throws Exception {
//		Camera fixture = getFixture26();
//		Vector3f direction = new Vector3f();
//		Vector3f up = new Vector3f((Vector3f) null);
//
//		fixture.lookAtDirection(direction, up);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAtDirection_fixture27_1()
//		throws Exception {
//		Camera fixture = getFixture27();
//		Vector3f direction = new Vector3f();
//		Vector3f up = new Vector3f((Vector3f) null);
//
//		fixture.lookAtDirection(direction, up);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAtDirection_fixture28_1()
//		throws Exception {
//		Camera fixture = getFixture28();
//		Vector3f direction = new Vector3f();
//		Vector3f up = new Vector3f((Vector3f) null);
//
//		fixture.lookAtDirection(direction, up);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAtDirection_fixture29_1()
//		throws Exception {
//		Camera fixture = getFixture29();
//		Vector3f direction = new Vector3f();
//		Vector3f up = new Vector3f((Vector3f) null);
//
//		fixture.lookAtDirection(direction, up);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testLookAtDirection_fixture1_2()
//		throws Exception {
//		Camera fixture = getFixture1();
//		Vector3f direction = new Vector3f();
//		Vector3f up = new Vector3f((Vector3f) null);
//
//		fixture.lookAtDirection(direction, up);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}

	/**
	 * Run the void lookAtDirection(Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testLookAtDirection_fixture3_2()
		throws Exception {
		CameraView fixture = getFixture3();
		Vector3f direction = Vector3f.NAN;
		Vector3f up = Vector3f.NAN;

		fixture.lookAtDirection(direction, up);

		// add additional test code here
	}

	/**
	 * Run the void normalize() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testNormalize_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();

		fixture.normalize();

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.normalize(Camera.java:832)
	}*/

	/**
	 * Run the void normalize() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testNormalize_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		fixture.normalize();

		// add additional test code here
	}

	/**
	 * Run the void normalize() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testNormalize_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		fixture.normalize();

		// add additional test code here
	}

	/**
	 * Run the void normalize() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testNormalize_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		fixture.normalize();

		// add additional test code here
	}

	/**
	 * Run the void normalize() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testNormalize_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		fixture.normalize();

		// add additional test code here
	}

	/**
	 * Run the void normalize() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testNormalize_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		fixture.normalize();

		// add additional test code here
	}

	/**
	 * Run the void normalize() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testNormalize_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		fixture.normalize();

		// add additional test code here
	}

	/**
	 * Run the void normalize() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testNormalize_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		fixture.normalize();

		// add additional test code here
	}

	/**
	 * Run the void normalize() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testNormalize_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		fixture.normalize();

		// add additional test code here
	}

	/**
	 * Run the void normalize() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testNormalize_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		fixture.normalize();

		// add additional test code here
	}

	/**
	 * Run the void normalize() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testNormalize_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		fixture.normalize();

		// add additional test code here
	}

	/**
	 * Run the void normalize() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testNormalize_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		fixture.normalize();

		// add additional test code here
	}

	/**
	 * Run the void normalize() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testNormalize_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		fixture.normalize();

		// add additional test code here
	}

	/**
	 * Run the void normalize() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testNormalize_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		fixture.normalize();

		// add additional test code here
	}

	/**
	 * Run the void normalize() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testNormalize_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		fixture.normalize();

		// add additional test code here
	}

	/**
	 * Run the void normalize() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testNormalize_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		fixture.normalize();

		// add additional test code here
	}

	/**
	 * Run the void normalize() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testNormalize_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		fixture.normalize();

		// add additional test code here
	}

	/**
	 * Run the void normalize() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testNormalize_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		fixture.normalize();

		// add additional test code here
	}

	/**
	 * Run the void normalize() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testNormalize_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		fixture.normalize();

		// add additional test code here
	}

	/**
	 * Run the void normalize() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testNormalize_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		fixture.normalize();

		// add additional test code here
	}

	/**
	 * Run the void normalize() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testNormalize_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		fixture.normalize();

		// add additional test code here
	}

	/**
	 * Run the void normalize() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testNormalize_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		fixture.normalize();

		// add additional test code here
	}

	/**
	 * Run the void normalize() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testNormalize_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		fixture.normalize();

		// add additional test code here
	}

	/**
	 * Run the void normalize() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testNormalize_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		fixture.normalize();

		// add additional test code here
	}

	/**
	 * Run the void normalize() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testNormalize_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		fixture.normalize();

		// add additional test code here
	}

	/**
	 * Run the void normalize() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testNormalize_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		fixture.normalize();

		// add additional test code here
	}

	/**
	 * Run the void normalize() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testNormalize_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		fixture.normalize();

		// add additional test code here
	}

	/**
	 * Run the void normalize() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testNormalize_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		fixture.normalize();

		// add additional test code here
	}

	/**
	 * Run the void normalize() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testNormalize_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		fixture.normalize();

		// add additional test code here
	}

	/**
	 * Run the void onFrameChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testOnFrameChange_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();

		fixture.onFrameChange();

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.getLeft(Camera.java:752)
		//       at com.jme3.renderer.Camera.onFrameChange(Camera.java:1481)
	}*/

	/**
	 * Run the void onFrameChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrameChange_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		fixture.onFrameChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrameChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrameChange_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		fixture.onFrameChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrameChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrameChange_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		fixture.onFrameChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrameChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrameChange_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		fixture.onFrameChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrameChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrameChange_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		fixture.onFrameChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrameChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrameChange_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		fixture.onFrameChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrameChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrameChange_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		fixture.onFrameChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrameChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrameChange_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		fixture.onFrameChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrameChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrameChange_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		fixture.onFrameChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrameChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrameChange_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		fixture.onFrameChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrameChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrameChange_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		fixture.onFrameChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrameChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrameChange_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		fixture.onFrameChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrameChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrameChange_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		fixture.onFrameChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrameChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrameChange_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		fixture.onFrameChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrameChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrameChange_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		fixture.onFrameChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrameChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrameChange_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		fixture.onFrameChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrameChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrameChange_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		fixture.onFrameChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrameChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrameChange_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		fixture.onFrameChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrameChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrameChange_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		fixture.onFrameChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrameChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrameChange_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		fixture.onFrameChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrameChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrameChange_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		fixture.onFrameChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrameChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrameChange_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		fixture.onFrameChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrameChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrameChange_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		fixture.onFrameChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrameChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrameChange_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		fixture.onFrameChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrameChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrameChange_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		fixture.onFrameChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrameChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrameChange_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		fixture.onFrameChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrameChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrameChange_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		fixture.onFrameChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrameChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrameChange_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		fixture.onFrameChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrustumChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testOnFrustumChange_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();

		fixture.onFrustumChange();

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.onFrustumChange(Camera.java:1440)
	}*/

	/**
	 * Run the void onFrustumChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrustumChange_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		fixture.onFrustumChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrustumChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrustumChange_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		fixture.onFrustumChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrustumChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrustumChange_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		fixture.onFrustumChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrustumChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrustumChange_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		fixture.onFrustumChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrustumChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrustumChange_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		fixture.onFrustumChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrustumChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrustumChange_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		fixture.onFrustumChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrustumChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrustumChange_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		fixture.onFrustumChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrustumChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrustumChange_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		fixture.onFrustumChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrustumChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrustumChange_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		fixture.onFrustumChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrustumChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrustumChange_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		fixture.onFrustumChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrustumChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrustumChange_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		fixture.onFrustumChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrustumChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrustumChange_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		fixture.onFrustumChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrustumChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrustumChange_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		fixture.onFrustumChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrustumChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrustumChange_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		fixture.onFrustumChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrustumChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrustumChange_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		fixture.onFrustumChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrustumChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrustumChange_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		fixture.onFrustumChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrustumChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrustumChange_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		fixture.onFrustumChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrustumChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrustumChange_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		fixture.onFrustumChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrustumChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrustumChange_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		fixture.onFrustumChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrustumChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrustumChange_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		fixture.onFrustumChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrustumChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrustumChange_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		fixture.onFrustumChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrustumChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrustumChange_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		fixture.onFrustumChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrustumChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrustumChange_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		fixture.onFrustumChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrustumChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrustumChange_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		fixture.onFrustumChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrustumChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrustumChange_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		fixture.onFrustumChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrustumChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrustumChange_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		fixture.onFrustumChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrustumChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrustumChange_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		fixture.onFrustumChange();

		// add additional test code here
	}

	/**
	 * Run the void onFrustumChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnFrustumChange_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		fixture.onFrustumChange();

		// add additional test code here
	}

	/**
	 * Run the void onViewPortChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnViewPortChange_fixture1_1()
		throws Exception {
		CameraView fixture = getFixture1();

		fixture.onViewPortChange();

		// add additional test code here
	}

	/**
	 * Run the void onViewPortChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnViewPortChange_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		fixture.onViewPortChange();

		// add additional test code here
	}

	/**
	 * Run the void onViewPortChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnViewPortChange_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		fixture.onViewPortChange();

		// add additional test code here
	}

	/**
	 * Run the void onViewPortChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnViewPortChange_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		fixture.onViewPortChange();

		// add additional test code here
	}

	/**
	 * Run the void onViewPortChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnViewPortChange_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		fixture.onViewPortChange();

		// add additional test code here
	}

	/**
	 * Run the void onViewPortChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnViewPortChange_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		fixture.onViewPortChange();

		// add additional test code here
	}

	/**
	 * Run the void onViewPortChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnViewPortChange_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		fixture.onViewPortChange();

		// add additional test code here
	}

	/**
	 * Run the void onViewPortChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnViewPortChange_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		fixture.onViewPortChange();

		// add additional test code here
	}

	/**
	 * Run the void onViewPortChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnViewPortChange_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		fixture.onViewPortChange();

		// add additional test code here
	}

	/**
	 * Run the void onViewPortChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnViewPortChange_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		fixture.onViewPortChange();

		// add additional test code here
	}

	/**
	 * Run the void onViewPortChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnViewPortChange_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		fixture.onViewPortChange();

		// add additional test code here
	}

	/**
	 * Run the void onViewPortChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnViewPortChange_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		fixture.onViewPortChange();

		// add additional test code here
	}

	/**
	 * Run the void onViewPortChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnViewPortChange_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		fixture.onViewPortChange();

		// add additional test code here
	}

	/**
	 * Run the void onViewPortChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnViewPortChange_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		fixture.onViewPortChange();

		// add additional test code here
	}

	/**
	 * Run the void onViewPortChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnViewPortChange_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		fixture.onViewPortChange();

		// add additional test code here
	}

	/**
	 * Run the void onViewPortChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnViewPortChange_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		fixture.onViewPortChange();

		// add additional test code here
	}

	/**
	 * Run the void onViewPortChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnViewPortChange_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		fixture.onViewPortChange();

		// add additional test code here
	}

	/**
	 * Run the void onViewPortChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnViewPortChange_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		fixture.onViewPortChange();

		// add additional test code here
	}

	/**
	 * Run the void onViewPortChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnViewPortChange_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		fixture.onViewPortChange();

		// add additional test code here
	}

	/**
	 * Run the void onViewPortChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnViewPortChange_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		fixture.onViewPortChange();

		// add additional test code here
	}

	/**
	 * Run the void onViewPortChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnViewPortChange_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		fixture.onViewPortChange();

		// add additional test code here
	}

	/**
	 * Run the void onViewPortChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnViewPortChange_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		fixture.onViewPortChange();

		// add additional test code here
	}

	/**
	 * Run the void onViewPortChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnViewPortChange_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		fixture.onViewPortChange();

		// add additional test code here
	}

	/**
	 * Run the void onViewPortChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnViewPortChange_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		fixture.onViewPortChange();

		// add additional test code here
	}

	/**
	 * Run the void onViewPortChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnViewPortChange_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		fixture.onViewPortChange();

		// add additional test code here
	}

	/**
	 * Run the void onViewPortChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnViewPortChange_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		fixture.onViewPortChange();

		// add additional test code here
	}

	/**
	 * Run the void onViewPortChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnViewPortChange_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		fixture.onViewPortChange();

		// add additional test code here
	}

	/**
	 * Run the void onViewPortChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnViewPortChange_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		fixture.onViewPortChange();

		// add additional test code here
	}

	/**
	 * Run the void onViewPortChange() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testOnViewPortChange_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		fixture.onViewPortChange();

		// add additional test code here
	}

	/**
	 * Run the void read(JmeImporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testRead_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();
		JmeImporter e = EasyMock.createMock(JmeImporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.read(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.read(Camera.java:1742)
	}*/

	/**
	 * Run the void read(JmeImporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testRead_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		JmeImporter e = EasyMock.createMock(JmeImporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.read(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.read(Camera.java:1742)
	}

	/**
	 * Run the void read(JmeImporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testRead_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		JmeImporter e = EasyMock.createMock(JmeImporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.read(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.read(Camera.java:1742)
	}

	/**
	 * Run the void read(JmeImporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testRead_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		JmeImporter e = EasyMock.createMock(JmeImporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.read(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.read(Camera.java:1742)
	}

	/**
	 * Run the void read(JmeImporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testRead_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		JmeImporter e = EasyMock.createMock(JmeImporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.read(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.read(Camera.java:1742)
	}

	/**
	 * Run the void read(JmeImporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testRead_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		JmeImporter e = EasyMock.createMock(JmeImporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.read(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.read(Camera.java:1742)
	}

	/**
	 * Run the void read(JmeImporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testRead_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		JmeImporter e = EasyMock.createMock(JmeImporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.read(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.read(Camera.java:1742)
	}

	/**
	 * Run the void read(JmeImporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testRead_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		JmeImporter e = EasyMock.createMock(JmeImporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.read(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.read(Camera.java:1742)
	}

	/**
	 * Run the void read(JmeImporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testRead_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		JmeImporter e = EasyMock.createMock(JmeImporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.read(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.read(Camera.java:1742)
	}

	/**
	 * Run the void read(JmeImporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testRead_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();
		JmeImporter e = EasyMock.createMock(JmeImporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.read(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.read(Camera.java:1742)
	}

	/**
	 * Run the void read(JmeImporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testRead_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();
		JmeImporter e = EasyMock.createMock(JmeImporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.read(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.read(Camera.java:1742)
	}

	/**
	 * Run the void read(JmeImporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testRead_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();
		JmeImporter e = EasyMock.createMock(JmeImporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.read(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.read(Camera.java:1742)
	}

	/**
	 * Run the void read(JmeImporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testRead_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();
		JmeImporter e = EasyMock.createMock(JmeImporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.read(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.read(Camera.java:1742)
	}

	/**
	 * Run the void read(JmeImporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testRead_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();
		JmeImporter e = EasyMock.createMock(JmeImporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.read(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.read(Camera.java:1742)
	}

	/**
	 * Run the void read(JmeImporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testRead_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();
		JmeImporter e = EasyMock.createMock(JmeImporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.read(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.read(Camera.java:1742)
	}

	/**
	 * Run the void read(JmeImporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testRead_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();
		JmeImporter e = EasyMock.createMock(JmeImporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.read(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.read(Camera.java:1742)
	}

	/**
	 * Run the void read(JmeImporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testRead_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();
		JmeImporter e = EasyMock.createMock(JmeImporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.read(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.read(Camera.java:1742)
	}

	/**
	 * Run the void read(JmeImporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testRead_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();
		JmeImporter e = EasyMock.createMock(JmeImporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.read(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.read(Camera.java:1742)
	}

	/**
	 * Run the void read(JmeImporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testRead_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();
		JmeImporter e = EasyMock.createMock(JmeImporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.read(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.read(Camera.java:1742)
	}

	/**
	 * Run the void read(JmeImporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testRead_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();
		JmeImporter e = EasyMock.createMock(JmeImporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.read(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.read(Camera.java:1742)
	}

	/**
	 * Run the void read(JmeImporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testRead_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();
		JmeImporter e = EasyMock.createMock(JmeImporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.read(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.read(Camera.java:1742)
	}

	/**
	 * Run the void read(JmeImporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testRead_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();
		JmeImporter e = EasyMock.createMock(JmeImporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.read(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.read(Camera.java:1742)
	}

	/**
	 * Run the void read(JmeImporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testRead_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();
		JmeImporter e = EasyMock.createMock(JmeImporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.read(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.read(Camera.java:1742)
	}

	/**
	 * Run the void read(JmeImporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testRead_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();
		JmeImporter e = EasyMock.createMock(JmeImporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.read(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.read(Camera.java:1742)
	}

	/**
	 * Run the void read(JmeImporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testRead_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();
		JmeImporter e = EasyMock.createMock(JmeImporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.read(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.read(Camera.java:1742)
	}

	/**
	 * Run the void read(JmeImporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testRead_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();
		JmeImporter e = EasyMock.createMock(JmeImporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.read(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.read(Camera.java:1742)
	}

	/**
	 * Run the void read(JmeImporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testRead_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();
		JmeImporter e = EasyMock.createMock(JmeImporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.read(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.read(Camera.java:1742)
	}

	/**
	 * Run the void read(JmeImporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testRead_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();
		JmeImporter e = EasyMock.createMock(JmeImporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.read(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.read(Camera.java:1742)
	}

	/**
	 * Run the void read(JmeImporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testRead_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();
		JmeImporter e = EasyMock.createMock(JmeImporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.read(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.read(Camera.java:1742)
	}

	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testResize_fixture1_1()
		throws Exception {
		CameraView fixture = getFixture1();
		int width = 0;
		int height = 0;
		boolean fixAspect = false;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
	}

	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testResize_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		int width = 1;
		int height = 1;
		boolean fixAspect = true;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
	}

	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testResize_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		int width = 0;
		int height = 0;
		boolean fixAspect = true;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
	}

	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testResize_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		int width = 1;
		int height = 0;
		boolean fixAspect = true;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
	}

	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testResize_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		int width = 7;
		int height = 0;
		boolean fixAspect = true;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
	}

	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testResize_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		int width = 7;
		int height = 0;
		boolean fixAspect = true;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
	}

	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testResize_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		int width = 7;
		int height = 0;
		boolean fixAspect = true;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
	}

	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testResize_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		int width = 7;
		int height = 0;
		boolean fixAspect = true;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
	}

	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testResize_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();
		int width = 7;
		int height = 0;
		boolean fixAspect = true;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
	}

	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testResize_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();
		int width = 7;
		int height = 0;
		boolean fixAspect = true;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
	}

	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testResize_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();
		int width = 7;
		int height = 0;
		boolean fixAspect = true;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
	}

	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testResize_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();
		int width = 7;
		int height = 0;
		boolean fixAspect = true;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
	}

	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testResize_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();
		int width = 7;
		int height = 0;
		boolean fixAspect = true;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
	}

	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testResize_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();
		int width = 7;
		int height = 0;
		boolean fixAspect = true;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
	}

	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testResize_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();
		int width = 7;
		int height = 0;
		boolean fixAspect = true;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
	}

	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testResize_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();
		int width = 7;
		int height = 0;
		boolean fixAspect = true;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
	}

	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testResize_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();
		int width = 7;
		int height = 0;
		boolean fixAspect = true;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
	}

	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testResize_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();
		int width = 7;
		int height = 0;
		boolean fixAspect = true;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
	}

	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testResize_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();
		int width = 7;
		int height = 0;
		boolean fixAspect = true;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
	}

	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testResize_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();
		int width = 7;
		int height = 0;
		boolean fixAspect = true;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
	}

	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testResize_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();
		int width = 7;
		int height = 0;
		boolean fixAspect = true;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
	}

	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testResize_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();
		int width = 7;
		int height = 0;
		boolean fixAspect = true;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
	}

	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testResize_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();
		int width = 7;
		int height = 0;
		boolean fixAspect = true;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
	}

	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testResize_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();
		int width = 7;
		int height = 0;
		boolean fixAspect = true;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
	}

	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testResize_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();
		int width = 7;
		int height = 0;
		boolean fixAspect = true;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
	}

	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testResize_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();
		int width = 7;
		int height = 0;
		boolean fixAspect = true;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
	}

	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testResize_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();
		int width = 7;
		int height = 0;
		boolean fixAspect = true;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
	}

	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testResize_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();
		int width = 7;
		int height = 0;
		boolean fixAspect = true;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
	}

	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testResize_fixture1_2()
		throws Exception {
		Camera fixture = getFixture1();
		int width = 7;
		int height = 0;
		boolean fixAspect = true;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.onFrustumChange(Camera.java:1440)
		//       at com.jme3.renderer.Camera.resize(Camera.java:512)
	}
*/
	/**
	 * Run the void resize(int,int,boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testResize_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		int width = 1;
		int height = 0;
		boolean fixAspect = false;

		fixture.resize(width, height, fixAspect);

		// add additional test code here
	}

	/**
	 * Run the void setAxes(Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testSetAxes_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();
		Quaternion axes = Quaternion.DIRECTION_Z;

		fixture.setAxes(axes);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.setAxes(Camera.java:824)
	}*/

	/**
	 * Run the void setAxes(Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetAxes_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		Quaternion axes = Quaternion.IDENTITY;

		fixture.setAxes(axes);

		// add additional test code here
	}

	/**
	 * Run the void setAxes(Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetAxes_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		Quaternion axes = Quaternion.ZERO;

		fixture.setAxes(axes);

		// add additional test code here
	}

	/**
	 * Run the void setAxes(Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetAxes_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		Quaternion axes = new Quaternion();

		fixture.setAxes(axes);

		// add additional test code here
	}

	/**
	 * Run the void setAxes(Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetAxes_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		Quaternion axes = new Quaternion(-0.5f, -0.5f, -0.5f, -0.5f);

		fixture.setAxes(axes);

		// add additional test code here
	}

	/**
	 * Run the void setAxes(Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetAxes_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		Quaternion axes = new Quaternion(-1.0f, -1.0f, -1.0f, -1.0f);

		fixture.setAxes(axes);

		// add additional test code here
	}

	/**
	 * Run the void setAxes(Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetAxes_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		Quaternion axes = new Quaternion(0.0f, 0.0f, 0.0f, 0.0f);

		fixture.setAxes(axes);

		// add additional test code here
	}

	/**
	 * Run the void setAxes(Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetAxes_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		Quaternion axes = new Quaternion(1.0f, 1.0f, 1.0f, 1.0f);

		fixture.setAxes(axes);

		// add additional test code here
	}

	/**
	 * Run the void setAxes(Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test(expected=java.lang.IllegalArgumentException.class)
	public void testSetAxes_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		Quaternion axes = new Quaternion(new float[] {-1.0f, 0.0f, 1.0f, -0.5f, 0.5f, Float.MAX_VALUE, Float.MIN_VALUE});

		fixture.setAxes(axes);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.IllegalArgumentException: Angles array must have three elements
		//       at com.jme3.math.Quaternion.fromAngles(Quaternion.java:227)
		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:167)
	}

//	/**
//	 * Run the void setAxes(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture10_1()
//		throws Exception {
//		Camera fixture = getFixture10();
//		Quaternion axes = new Quaternion((Quaternion) null);
//
//		fixture.setAxes(axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:193)
//	}
//
//	/**
//	 * Run the void setAxes(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture11_1()
//		throws Exception {
//		Camera fixture = getFixture11();
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, -1.0f);
//
//		fixture.setAxes(axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setAxes(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture12_1()
//		throws Exception {
//		Camera fixture = getFixture12();
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 0.0f);
//
//		fixture.setAxes(axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setAxes(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture13_1()
//		throws Exception {
//		Camera fixture = getFixture13();
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setAxes(axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setAxes(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture14_1()
//		throws Exception {
//		Camera fixture = getFixture14();
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setAxes(axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setAxes(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture15_1()
//		throws Exception {
//		Camera fixture = getFixture15();
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setAxes(axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setAxes(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture16_1()
//		throws Exception {
//		Camera fixture = getFixture16();
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setAxes(axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setAxes(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture17_1()
//		throws Exception {
//		Camera fixture = getFixture17();
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setAxes(axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setAxes(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture18_1()
//		throws Exception {
//		Camera fixture = getFixture18();
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setAxes(axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setAxes(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture19_1()
//		throws Exception {
//		Camera fixture = getFixture19();
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setAxes(axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setAxes(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture20_1()
//		throws Exception {
//		Camera fixture = getFixture20();
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setAxes(axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setAxes(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture21_1()
//		throws Exception {
//		Camera fixture = getFixture21();
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setAxes(axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setAxes(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture22_1()
//		throws Exception {
//		Camera fixture = getFixture22();
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setAxes(axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setAxes(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture23_1()
//		throws Exception {
//		Camera fixture = getFixture23();
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setAxes(axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setAxes(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture24_1()
//		throws Exception {
//		Camera fixture = getFixture24();
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setAxes(axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setAxes(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture25_1()
//		throws Exception {
//		Camera fixture = getFixture25();
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setAxes(axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setAxes(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture26_1()
//		throws Exception {
//		Camera fixture = getFixture26();
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setAxes(axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setAxes(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture27_1()
//		throws Exception {
//		Camera fixture = getFixture27();
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setAxes(axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setAxes(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture28_1()
//		throws Exception {
//		Camera fixture = getFixture28();
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setAxes(axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setAxes(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture29_1()
//		throws Exception {
//		Camera fixture = getFixture29();
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setAxes(axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}

	/**
	 * Run the void setAxes(Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetAxes_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		Quaternion axes = Quaternion.DIRECTION_Z;

		fixture.setAxes(axes);

		// add additional test code here
	}

	/**
	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testSetAxes_fixture1_2()
		throws Exception {
		Camera fixture = getFixture1();
		Vector3f left = Vector3f.NAN;
		Vector3f up = Vector3f.NAN;
		Vector3f direction = Vector3f.NAN;

		fixture.setAxes(left, up, direction);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.setAxes(Camera.java:813)
	}*/

	/**
	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetAxes_fixture2_3()
		throws Exception {
		CameraView fixture = getFixture2();
		Vector3f left = Vector3f.NEGATIVE_INFINITY;
		Vector3f up = Vector3f.NEGATIVE_INFINITY;
		Vector3f direction = Vector3f.NEGATIVE_INFINITY;

		fixture.setAxes(left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetAxes_fixture3_2()
		throws Exception {
		CameraView fixture = getFixture3();
		Vector3f left = Vector3f.POSITIVE_INFINITY;
		Vector3f up = Vector3f.POSITIVE_INFINITY;
		Vector3f direction = Vector3f.POSITIVE_INFINITY;

		fixture.setAxes(left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetAxes_fixture4_2()
		throws Exception {
		CameraView fixture = getFixture4();
		Vector3f left = Vector3f.UNIT_X;
		Vector3f up = Vector3f.UNIT_X;
		Vector3f direction = Vector3f.UNIT_X;

		fixture.setAxes(left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetAxes_fixture5_2()
		throws Exception {
		CameraView fixture = getFixture5();
		Vector3f left = Vector3f.UNIT_XYZ;
		Vector3f up = Vector3f.UNIT_XYZ;
		Vector3f direction = Vector3f.UNIT_XYZ;

		fixture.setAxes(left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetAxes_fixture6_2()
		throws Exception {
		CameraView fixture = getFixture6();
		Vector3f left = Vector3f.UNIT_Y;
		Vector3f up = Vector3f.UNIT_Y;
		Vector3f direction = Vector3f.UNIT_Y;

		fixture.setAxes(left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetAxes_fixture7_2()
		throws Exception {
		CameraView fixture = getFixture7();
		Vector3f left = Vector3f.UNIT_Z;
		Vector3f up = Vector3f.UNIT_Z;
		Vector3f direction = Vector3f.UNIT_Z;

		fixture.setAxes(left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetAxes_fixture8_2()
		throws Exception {
		CameraView fixture = getFixture8();
		Vector3f left = Vector3f.ZERO;
		Vector3f up = Vector3f.ZERO;
		Vector3f direction = Vector3f.ZERO;

		fixture.setAxes(left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetAxes_fixture9_2()
		throws Exception {
		CameraView fixture = getFixture9();
		Vector3f left = new Vector3f();
		Vector3f up = new Vector3f();
		Vector3f direction = new Vector3f();

		fixture.setAxes(left, up, direction);

		// add additional test code here
	}

//	/**
//	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture10_2()
//		throws Exception {
//		Camera fixture = getFixture10();
//		Vector3f left = new Vector3f((Vector3f) null);
//		Vector3f up = new Vector3f((Vector3f) null);
//		Vector3f direction = new Vector3f((Vector3f) null);
//
//		fixture.setAxes(left, up, direction);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture12_2()
//		throws Exception {
//		Camera fixture = getFixture12();
//		Vector3f left = Vector3f.NEGATIVE_INFINITY;
//		Vector3f up = Vector3f.NAN;
//		Vector3f direction = new Vector3f((Vector3f) null);
//
//		fixture.setAxes(left, up, direction);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture13_2()
//		throws Exception {
//		Camera fixture = getFixture13();
//		Vector3f left = Vector3f.POSITIVE_INFINITY;
//		Vector3f up = Vector3f.NEGATIVE_INFINITY;
//		Vector3f direction = new Vector3f((Vector3f) null);
//
//		fixture.setAxes(left, up, direction);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture14_2()
//		throws Exception {
//		Camera fixture = getFixture14();
//		Vector3f left = Vector3f.UNIT_X;
//		Vector3f up = Vector3f.POSITIVE_INFINITY;
//		Vector3f direction = new Vector3f((Vector3f) null);
//
//		fixture.setAxes(left, up, direction);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture15_2()
//		throws Exception {
//		Camera fixture = getFixture15();
//		Vector3f left = Vector3f.UNIT_XYZ;
//		Vector3f up = Vector3f.UNIT_X;
//		Vector3f direction = new Vector3f((Vector3f) null);
//
//		fixture.setAxes(left, up, direction);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture16_2()
//		throws Exception {
//		Camera fixture = getFixture16();
//		Vector3f left = Vector3f.UNIT_Y;
//		Vector3f up = Vector3f.UNIT_XYZ;
//		Vector3f direction = new Vector3f((Vector3f) null);
//
//		fixture.setAxes(left, up, direction);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture17_2()
//		throws Exception {
//		Camera fixture = getFixture17();
//		Vector3f left = Vector3f.UNIT_Z;
//		Vector3f up = Vector3f.UNIT_Y;
//		Vector3f direction = new Vector3f((Vector3f) null);
//
//		fixture.setAxes(left, up, direction);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture18_2()
//		throws Exception {
//		Camera fixture = getFixture18();
//		Vector3f left = Vector3f.ZERO;
//		Vector3f up = Vector3f.UNIT_Z;
//		Vector3f direction = new Vector3f((Vector3f) null);
//
//		fixture.setAxes(left, up, direction);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture19_2()
//		throws Exception {
//		Camera fixture = getFixture19();
//		Vector3f left = new Vector3f();
//		Vector3f up = Vector3f.ZERO;
//		Vector3f direction = new Vector3f((Vector3f) null);
//
//		fixture.setAxes(left, up, direction);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture20_2()
//		throws Exception {
//		Camera fixture = getFixture20();
//		Vector3f left = new Vector3f((Vector3f) null);
//		Vector3f up = new Vector3f();
//		Vector3f direction = new Vector3f((Vector3f) null);
//
//		fixture.setAxes(left, up, direction);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture22_2()
//		throws Exception {
//		Camera fixture = getFixture22();
//		Vector3f left = Vector3f.NAN;
//		Vector3f up = new Vector3f();
//		Vector3f direction = new Vector3f((Vector3f) null);
//
//		fixture.setAxes(left, up, direction);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture23_2()
//		throws Exception {
//		Camera fixture = getFixture23();
//		Vector3f left = Vector3f.NEGATIVE_INFINITY;
//		Vector3f up = new Vector3f();
//		Vector3f direction = new Vector3f((Vector3f) null);
//
//		fixture.setAxes(left, up, direction);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture24_2()
//		throws Exception {
//		Camera fixture = getFixture24();
//		Vector3f left = Vector3f.POSITIVE_INFINITY;
//		Vector3f up = new Vector3f();
//		Vector3f direction = new Vector3f((Vector3f) null);
//
//		fixture.setAxes(left, up, direction);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture25_2()
//		throws Exception {
//		Camera fixture = getFixture25();
//		Vector3f left = Vector3f.UNIT_X;
//		Vector3f up = new Vector3f();
//		Vector3f direction = new Vector3f((Vector3f) null);
//
//		fixture.setAxes(left, up, direction);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture26_2()
//		throws Exception {
//		Camera fixture = getFixture26();
//		Vector3f left = Vector3f.UNIT_XYZ;
//		Vector3f up = new Vector3f();
//		Vector3f direction = new Vector3f((Vector3f) null);
//
//		fixture.setAxes(left, up, direction);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture27_2()
//		throws Exception {
//		Camera fixture = getFixture27();
//		Vector3f left = Vector3f.UNIT_Y;
//		Vector3f up = new Vector3f();
//		Vector3f direction = new Vector3f((Vector3f) null);
//
//		fixture.setAxes(left, up, direction);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture28_2()
//		throws Exception {
//		Camera fixture = getFixture28();
//		Vector3f left = Vector3f.UNIT_Z;
//		Vector3f up = new Vector3f();
//		Vector3f direction = new Vector3f((Vector3f) null);
//
//		fixture.setAxes(left, up, direction);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetAxes_fixture29_2()
//		throws Exception {
//		Camera fixture = getFixture29();
//		Vector3f left = Vector3f.ZERO;
//		Vector3f up = new Vector3f();
//		Vector3f direction = new Vector3f((Vector3f) null);
//
//		fixture.setAxes(left, up, direction);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}

	/**
	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testSetAxes_fixture1_3()
		throws Exception {
		Camera fixture = getFixture1();
		Vector3f left = new Vector3f();
		Vector3f up = new Vector3f();
		Vector3f direction = new Vector3f((Vector3f) null);

		fixture.setAxes(left, up, direction);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
	}*/

	/**
	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testSetAxes_fixture2_4()
		throws Exception {
		Camera fixture = getFixture2();
		Vector3f left = new Vector3f();
		Vector3f up = new Vector3f();
		Vector3f direction = new Vector3f((Vector3f) null);

		fixture.setAxes(left, up, direction);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
	}*/

	/**
	 * Run the void setAxes(Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetAxes_fixture4_3()
		throws Exception {
		CameraView fixture = getFixture4();
		Vector3f left = Vector3f.NAN;
		Vector3f up = Vector3f.NAN;
		Vector3f direction = Vector3f.NAN;

		fixture.setAxes(left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testSetClipPlane_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();
		Plane clipPlane = new Plane();

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}*/

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		Plane clipPlane = new Plane(Vector3f.NAN, -1.0f);

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		Plane clipPlane = new Plane(Vector3f.NEGATIVE_INFINITY, 0.0f);

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		Plane clipPlane = new Plane(Vector3f.NEGATIVE_INFINITY, 0.0f);

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		Plane clipPlane = new Plane(Vector3f.NEGATIVE_INFINITY, 0.0f);

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		Plane clipPlane = new Plane(Vector3f.NEGATIVE_INFINITY, 0.0f);

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		Plane clipPlane = new Plane(Vector3f.NEGATIVE_INFINITY, 0.0f);

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		Plane clipPlane = new Plane(Vector3f.NEGATIVE_INFINITY, 0.0f);

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		Plane clipPlane = new Plane(Vector3f.NEGATIVE_INFINITY, 0.0f);

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();
		Plane clipPlane = new Plane(Vector3f.NEGATIVE_INFINITY, 0.0f);

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();
		Plane clipPlane = new Plane(Vector3f.NEGATIVE_INFINITY, 0.0f);

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();
		Plane clipPlane = new Plane(Vector3f.NEGATIVE_INFINITY, 0.0f);

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();
		Plane clipPlane = new Plane(Vector3f.NEGATIVE_INFINITY, 0.0f);

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();
		Plane clipPlane = new Plane(Vector3f.NEGATIVE_INFINITY, 0.0f);

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();
		Plane clipPlane = new Plane(Vector3f.NEGATIVE_INFINITY, 0.0f);

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();
		Plane clipPlane = new Plane(Vector3f.NEGATIVE_INFINITY, 0.0f);

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();
		Plane clipPlane = new Plane(Vector3f.NEGATIVE_INFINITY, 0.0f);

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();
		Plane clipPlane = new Plane(Vector3f.NEGATIVE_INFINITY, 0.0f);

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();
		Plane clipPlane = new Plane(Vector3f.NEGATIVE_INFINITY, 0.0f);

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();
		Plane clipPlane = new Plane(Vector3f.NEGATIVE_INFINITY, 0.0f);

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();
		Plane clipPlane = new Plane(Vector3f.NEGATIVE_INFINITY, 0.0f);

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();
		Plane clipPlane = new Plane(Vector3f.NEGATIVE_INFINITY, 0.0f);

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();
		Plane clipPlane = new Plane(Vector3f.NEGATIVE_INFINITY, 0.0f);

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();
		Plane clipPlane = new Plane(Vector3f.NEGATIVE_INFINITY, 0.0f);

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();
		Plane clipPlane = new Plane(Vector3f.NEGATIVE_INFINITY, 0.0f);

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();
		Plane clipPlane = new Plane(Vector3f.NEGATIVE_INFINITY, 0.0f);

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();
		Plane clipPlane = new Plane(Vector3f.NEGATIVE_INFINITY, 0.0f);

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();
		Plane clipPlane = new Plane(Vector3f.NEGATIVE_INFINITY, 0.0f);

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();
		Plane clipPlane = new Plane(Vector3f.NEGATIVE_INFINITY, 0.0f);

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		Plane clipPlane = new Plane();

		fixture.setClipPlane(clipPlane);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testSetClipPlane_fixture1_2()
		throws Exception {
		Camera fixture = getFixture1();
		Plane clipPlane = new Plane();
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.Negative;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}*/

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture2_3()
		throws Exception {
		CameraView fixture = getFixture2();
		Plane clipPlane = new Plane(Vector3f.NAN, -1.0f);
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.None;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture3_2()
		throws Exception {
		CameraView fixture = getFixture3();
		Plane clipPlane = new Plane(Vector3f.NEGATIVE_INFINITY, 0.0f);
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.Positive;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture5_2()
		throws Exception {
		CameraView fixture = getFixture5();
		Plane clipPlane = new Plane();
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.Positive;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture6_2()
		throws Exception {
		CameraView fixture = getFixture6();
		Plane clipPlane = new Plane(Vector3f.NAN, -1.0f);
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.Positive;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture7_2()
		throws Exception {
		CameraView fixture = getFixture7();
		Plane clipPlane = new Plane(Vector3f.NAN, -1.0f);
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.Positive;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture8_2()
		throws Exception {
		CameraView fixture = getFixture8();
		Plane clipPlane = new Plane(Vector3f.NAN, -1.0f);
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.Positive;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture9_2()
		throws Exception {
		CameraView fixture = getFixture9();
		Plane clipPlane = new Plane(Vector3f.NAN, -1.0f);
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.Positive;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture10_2()
		throws Exception {
		CameraView fixture = getFixture10();
		Plane clipPlane = new Plane(Vector3f.NAN, -1.0f);
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.Positive;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture11_2()
		throws Exception {
		CameraView fixture = getFixture11();
		Plane clipPlane = new Plane(Vector3f.NAN, -1.0f);
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.Positive;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture12_2()
		throws Exception {
		CameraView fixture = getFixture12();
		Plane clipPlane = new Plane(Vector3f.NAN, -1.0f);
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.Positive;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture13_2()
		throws Exception {
		CameraView fixture = getFixture13();
		Plane clipPlane = new Plane(Vector3f.NAN, -1.0f);
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.Positive;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture14_2()
		throws Exception {
		CameraView fixture = getFixture14();
		Plane clipPlane = new Plane(Vector3f.NAN, -1.0f);
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.Positive;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture15_2()
		throws Exception {
		CameraView fixture = getFixture15();
		Plane clipPlane = new Plane(Vector3f.NAN, -1.0f);
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.Positive;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture16_2()
		throws Exception {
		CameraView fixture = getFixture16();
		Plane clipPlane = new Plane(Vector3f.NAN, -1.0f);
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.Positive;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture17_2()
		throws Exception {
		CameraView fixture = getFixture17();
		Plane clipPlane = new Plane(Vector3f.NAN, -1.0f);
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.Positive;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture18_2()
		throws Exception {
		CameraView fixture = getFixture18();
		Plane clipPlane = new Plane(Vector3f.NAN, -1.0f);
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.Positive;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture19_2()
		throws Exception {
		CameraView fixture = getFixture19();
		Plane clipPlane = new Plane(Vector3f.NAN, -1.0f);
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.Positive;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture20_2()
		throws Exception {
		CameraView fixture = getFixture20();
		Plane clipPlane = new Plane(Vector3f.NAN, -1.0f);
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.Positive;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture21_2()
		throws Exception {
		CameraView fixture = getFixture21();
		Plane clipPlane = new Plane(Vector3f.NAN, -1.0f);
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.Positive;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture22_2()
		throws Exception {
		CameraView fixture = getFixture22();
		Plane clipPlane = new Plane(Vector3f.NAN, -1.0f);
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.Positive;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture23_2()
		throws Exception {
		CameraView fixture = getFixture23();
		Plane clipPlane = new Plane(Vector3f.NAN, -1.0f);
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.Positive;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture24_2()
		throws Exception {
		CameraView fixture = getFixture24();
		Plane clipPlane = new Plane(Vector3f.NAN, -1.0f);
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.Positive;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture25_2()
		throws Exception {
		CameraView fixture = getFixture25();
		Plane clipPlane = new Plane(Vector3f.NAN, -1.0f);
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.Positive;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture26_2()
		throws Exception {
		CameraView fixture = getFixture26();
		Plane clipPlane = new Plane(Vector3f.NAN, -1.0f);
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.Positive;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture27_2()
		throws Exception {
		CameraView fixture = getFixture27();
		Plane clipPlane = new Plane(Vector3f.NAN, -1.0f);
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.Positive;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture28_2()
		throws Exception {
		CameraView fixture = getFixture28();
		Plane clipPlane = new Plane(Vector3f.NAN, -1.0f);
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.Positive;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture29_2()
		throws Exception {
		CameraView fixture = getFixture29();
		Plane clipPlane = new Plane(Vector3f.NAN, -1.0f);
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.Positive;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testSetClipPlane_fixture1_3()
		throws Exception {
		Camera fixture = getFixture1();
		Plane clipPlane = new Plane(Vector3f.NAN, -1.0f);
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.Positive;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}*/

	/**
	 * Run the void setClipPlane(Plane,Side) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetClipPlane_fixture3_3()
		throws Exception {
		CameraView fixture = getFixture3();
		Plane clipPlane = new Plane();
		com.jme3.math.Plane.Side side = com.jme3.math.Plane.Side.Negative;

		fixture.setClipPlane(clipPlane, side);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testSetFrame_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();
		Vector3f location = Vector3f.NAN;
		Quaternion axes = Quaternion.DIRECTION_Z;

		fixture.setFrame(location, axes);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.setFrame(Camera.java:986)
	}*/

	/**
	 * Run the void setFrame(Vector3f,Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		Vector3f location = Vector3f.NEGATIVE_INFINITY;
		Quaternion axes = Quaternion.IDENTITY;

		fixture.setFrame(location, axes);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		Vector3f location = Vector3f.POSITIVE_INFINITY;
		Quaternion axes = Quaternion.ZERO;

		fixture.setFrame(location, axes);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		Vector3f location = Vector3f.UNIT_X;
		Quaternion axes = new Quaternion();

		fixture.setFrame(location, axes);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		Vector3f location = Vector3f.UNIT_XYZ;
		Quaternion axes = new Quaternion(-0.5f, -0.5f, -0.5f, -0.5f);

		fixture.setFrame(location, axes);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		Vector3f location = Vector3f.UNIT_Y;
		Quaternion axes = new Quaternion(-1.0f, -1.0f, -1.0f, -1.0f);

		fixture.setFrame(location, axes);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		Vector3f location = Vector3f.UNIT_Z;
		Quaternion axes = new Quaternion(0.0f, 0.0f, 0.0f, 0.0f);

		fixture.setFrame(location, axes);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		Vector3f location = Vector3f.ZERO;
		Quaternion axes = new Quaternion(1.0f, 1.0f, 1.0f, 1.0f);

		fixture.setFrame(location, axes);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test(expected=IllegalArgumentException.class)
	public void testSetFrame_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		Vector3f location = new Vector3f();
		Quaternion axes = new Quaternion(new float[] {-1.0f, 0.0f, 1.0f, -0.5f, 0.5f, Float.MAX_VALUE, Float.MIN_VALUE});

		fixture.setFrame(location, axes);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.IllegalArgumentException: Angles array must have three elements
		//       at com.jme3.math.Quaternion.fromAngles(Quaternion.java:227)
		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:167)
	}

//	/**
//	 * Run the void setFrame(Vector3f,Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetFrame_fixture10_1()
//		throws Exception {
//		Camera fixture = getFixture10();
//		Vector3f location = new Vector3f((Vector3f) null);
//		Quaternion axes = new Quaternion((Quaternion) null);
//
//		fixture.setFrame(location, axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setFrame(Vector3f,Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetFrame_fixture12_1()
//		throws Exception {
//		Camera fixture = getFixture12();
//		Vector3f location = Vector3f.NAN;
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, -1.0f);
//
//		fixture.setFrame(location, axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setFrame(Vector3f,Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetFrame_fixture13_1()
//		throws Exception {
//		Camera fixture = getFixture13();
//		Vector3f location = Vector3f.NEGATIVE_INFINITY;
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 0.0f);
//
//		fixture.setFrame(location, axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setFrame(Vector3f,Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetFrame_fixture14_1()
//		throws Exception {
//		Camera fixture = getFixture14();
//		Vector3f location = Vector3f.POSITIVE_INFINITY;
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setFrame(location, axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setFrame(Vector3f,Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetFrame_fixture15_1()
//		throws Exception {
//		Camera fixture = getFixture15();
//		Vector3f location = Vector3f.UNIT_X;
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setFrame(location, axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setFrame(Vector3f,Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetFrame_fixture16_1()
//		throws Exception {
//		Camera fixture = getFixture16();
//		Vector3f location = Vector3f.UNIT_XYZ;
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setFrame(location, axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setFrame(Vector3f,Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetFrame_fixture17_1()
//		throws Exception {
//		Camera fixture = getFixture17();
//		Vector3f location = Vector3f.UNIT_Y;
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setFrame(location, axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setFrame(Vector3f,Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetFrame_fixture18_1()
//		throws Exception {
//		Camera fixture = getFixture18();
//		Vector3f location = Vector3f.UNIT_Z;
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setFrame(location, axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setFrame(Vector3f,Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetFrame_fixture19_1()
//		throws Exception {
//		Camera fixture = getFixture19();
//		Vector3f location = Vector3f.ZERO;
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setFrame(location, axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setFrame(Vector3f,Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetFrame_fixture20_1()
//		throws Exception {
//		Camera fixture = getFixture20();
//		Vector3f location = new Vector3f();
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setFrame(location, axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setFrame(Vector3f,Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetFrame_fixture21_1()
//		throws Exception {
//		Camera fixture = getFixture21();
//		Vector3f location = new Vector3f((Vector3f) null);
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setFrame(location, axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setFrame(Vector3f,Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetFrame_fixture23_1()
//		throws Exception {
//		Camera fixture = getFixture23();
//		Vector3f location = Vector3f.NAN;
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setFrame(location, axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setFrame(Vector3f,Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetFrame_fixture24_1()
//		throws Exception {
//		Camera fixture = getFixture24();
//		Vector3f location = Vector3f.NEGATIVE_INFINITY;
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setFrame(location, axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setFrame(Vector3f,Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetFrame_fixture25_1()
//		throws Exception {
//		Camera fixture = getFixture25();
//		Vector3f location = Vector3f.NEGATIVE_INFINITY;
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setFrame(location, axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setFrame(Vector3f,Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetFrame_fixture26_1()
//		throws Exception {
//		Camera fixture = getFixture26();
//		Vector3f location = Vector3f.NEGATIVE_INFINITY;
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setFrame(location, axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setFrame(Vector3f,Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetFrame_fixture27_1()
//		throws Exception {
//		Camera fixture = getFixture27();
//		Vector3f location = Vector3f.NEGATIVE_INFINITY;
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setFrame(location, axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setFrame(Vector3f,Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetFrame_fixture28_1()
//		throws Exception {
//		Camera fixture = getFixture28();
//		Vector3f location = Vector3f.NEGATIVE_INFINITY;
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setFrame(location, axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setFrame(Vector3f,Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetFrame_fixture29_1()
//		throws Exception {
//		Camera fixture = getFixture29();
//		Vector3f location = Vector3f.NEGATIVE_INFINITY;
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setFrame(location, axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}

//	/**
//	 * Run the void setFrame(Vector3f,Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetFrame_fixture1_2()
//		throws Exception {
//		Camera fixture = getFixture1();
//		Vector3f location = Vector3f.NEGATIVE_INFINITY;
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setFrame(location, axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setFrame(Vector3f,Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetFrame_fixture2_2()
//		throws Exception {
//		Camera fixture = getFixture2();
//		Vector3f location = Vector3f.NEGATIVE_INFINITY;
//		Quaternion axes = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setFrame(location, axes);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}

	/**
	 * Run the void setFrame(Vector3f,Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture3_2()
		throws Exception {
		CameraView fixture = getFixture3();
		Vector3f location = Vector3f.UNIT_X;
		Quaternion axes = Quaternion.DIRECTION_Z;

		fixture.setFrame(location, axes);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testSetFrame_fixture1_3()
		throws Exception {
		Camera fixture = getFixture1();
		Vector3f location = Vector3f.NAN;
		Vector3f left = Vector3f.NAN;
		Vector3f up = Vector3f.NAN;
		Vector3f direction = Vector3f.NAN;

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.setFrame(Camera.java:923)
	}
*/
	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture2_3()
		throws Exception {
		CameraView fixture = getFixture2();
		Vector3f location = Vector3f.NEGATIVE_INFINITY;
		Vector3f left = Vector3f.NEGATIVE_INFINITY;
		Vector3f up = Vector3f.NEGATIVE_INFINITY;
		Vector3f direction = Vector3f.NEGATIVE_INFINITY;

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture3_3()
		throws Exception {
		CameraView fixture = getFixture3();
		Vector3f location = Vector3f.POSITIVE_INFINITY;
		Vector3f left = Vector3f.POSITIVE_INFINITY;
		Vector3f up = Vector3f.POSITIVE_INFINITY;
		Vector3f direction = Vector3f.POSITIVE_INFINITY;

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture4_2()
		throws Exception {
		CameraView fixture = getFixture4();
		Vector3f location = Vector3f.UNIT_X;
		Vector3f left = Vector3f.UNIT_X;
		Vector3f up = Vector3f.UNIT_X;
		Vector3f direction = Vector3f.UNIT_X;

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture5_2()
		throws Exception {
		CameraView fixture = getFixture5();
		Vector3f location = Vector3f.UNIT_XYZ;
		Vector3f left = Vector3f.UNIT_XYZ;
		Vector3f up = Vector3f.UNIT_XYZ;
		Vector3f direction = Vector3f.UNIT_XYZ;

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture6_2()
		throws Exception {
		CameraView fixture = getFixture6();
		Vector3f location = Vector3f.UNIT_Y;
		Vector3f left = Vector3f.UNIT_Y;
		Vector3f up = Vector3f.UNIT_Y;
		Vector3f direction = Vector3f.UNIT_Y;

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture7_2()
		throws Exception {
		CameraView fixture = getFixture7();
		Vector3f location = Vector3f.UNIT_Z;
		Vector3f left = Vector3f.UNIT_Z;
		Vector3f up = Vector3f.UNIT_Z;
		Vector3f direction = Vector3f.UNIT_Z;

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture8_2()
		throws Exception {
		CameraView fixture = getFixture8();
		Vector3f location = Vector3f.ZERO;
		Vector3f left = Vector3f.ZERO;
		Vector3f up = Vector3f.ZERO;
		Vector3f direction = Vector3f.ZERO;

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture9_2()
		throws Exception {
		CameraView fixture = getFixture9();
		Vector3f location = new Vector3f();
		Vector3f left = new Vector3f();
		Vector3f up = new Vector3f();
		Vector3f direction = new Vector3f();

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture2_4()
		throws Exception {
		CameraView fixture = getFixture2();
		Vector3f location = Vector3f.NEGATIVE_INFINITY;
		Vector3f left = Vector3f.NEGATIVE_INFINITY;
		Vector3f up = Vector3f.NEGATIVE_INFINITY;
		Vector3f direction = Vector3f.NAN;

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture3_4()
		throws Exception {
		CameraView fixture = getFixture3();
		Vector3f location = Vector3f.POSITIVE_INFINITY;
		Vector3f left = Vector3f.POSITIVE_INFINITY;
		Vector3f up = Vector3f.POSITIVE_INFINITY;
		Vector3f direction = Vector3f.NEGATIVE_INFINITY;

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture4_3()
		throws Exception {
		CameraView fixture = getFixture4();
		Vector3f location = Vector3f.UNIT_X;
		Vector3f left = Vector3f.UNIT_X;
		Vector3f up = Vector3f.UNIT_X;
		Vector3f direction = Vector3f.POSITIVE_INFINITY;

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture5_3()
		throws Exception {
		CameraView fixture = getFixture5();
		Vector3f location = Vector3f.UNIT_XYZ;
		Vector3f left = Vector3f.UNIT_XYZ;
		Vector3f up = Vector3f.UNIT_XYZ;
		Vector3f direction = Vector3f.UNIT_X;

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture6_3()
		throws Exception {
		CameraView fixture = getFixture6();
		Vector3f location = Vector3f.UNIT_Y;
		Vector3f left = Vector3f.UNIT_Y;
		Vector3f up = Vector3f.UNIT_Y;
		Vector3f direction = Vector3f.UNIT_XYZ;

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture7_3()
		throws Exception {
		CameraView fixture = getFixture7();
		Vector3f location = Vector3f.UNIT_Z;
		Vector3f left = Vector3f.UNIT_Z;
		Vector3f up = Vector3f.UNIT_Z;
		Vector3f direction = Vector3f.UNIT_Y;

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture8_3()
		throws Exception {
		CameraView fixture = getFixture8();
		Vector3f location = Vector3f.ZERO;
		Vector3f left = Vector3f.ZERO;
		Vector3f up = Vector3f.ZERO;
		Vector3f direction = Vector3f.UNIT_Z;

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture9_3()
		throws Exception {
		CameraView fixture = getFixture9();
		Vector3f location = new Vector3f();
		Vector3f left = new Vector3f();
		Vector3f up = new Vector3f();
		Vector3f direction = Vector3f.ZERO;

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture2_5()
		throws Exception {
		CameraView fixture = getFixture2();
		Vector3f location = Vector3f.NEGATIVE_INFINITY;
		Vector3f left = Vector3f.NEGATIVE_INFINITY;
		Vector3f up = Vector3f.NAN;
		Vector3f direction = new Vector3f();

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture3_5()
		throws Exception {
		CameraView fixture = getFixture3();
		Vector3f location = Vector3f.POSITIVE_INFINITY;
		Vector3f left = Vector3f.POSITIVE_INFINITY;
		Vector3f up = Vector3f.POSITIVE_INFINITY;
		Vector3f direction = Vector3f.NAN;

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture4_4()
		throws Exception {
		CameraView fixture = getFixture4();
		Vector3f location = Vector3f.UNIT_X;
		Vector3f left = Vector3f.UNIT_X;
		Vector3f up = Vector3f.UNIT_X;
		Vector3f direction = Vector3f.NEGATIVE_INFINITY;

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture5_4()
		throws Exception {
		CameraView fixture = getFixture5();
		Vector3f location = Vector3f.UNIT_XYZ;
		Vector3f left = Vector3f.UNIT_XYZ;
		Vector3f up = Vector3f.UNIT_XYZ;
		Vector3f direction = Vector3f.POSITIVE_INFINITY;

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture6_4()
		throws Exception {
		CameraView fixture = getFixture6();
		Vector3f location = Vector3f.UNIT_Y;
		Vector3f left = Vector3f.UNIT_Y;
		Vector3f up = Vector3f.UNIT_Y;
		Vector3f direction = Vector3f.UNIT_X;

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture7_4()
		throws Exception {
		CameraView fixture = getFixture7();
		Vector3f location = Vector3f.UNIT_Z;
		Vector3f left = Vector3f.UNIT_Z;
		Vector3f up = Vector3f.UNIT_Z;
		Vector3f direction = Vector3f.UNIT_XYZ;

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture8_4()
		throws Exception {
		CameraView fixture = getFixture8();
		Vector3f location = Vector3f.ZERO;
		Vector3f left = Vector3f.ZERO;
		Vector3f up = Vector3f.ZERO;
		Vector3f direction = Vector3f.UNIT_Y;

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture9_4()
		throws Exception {
		CameraView fixture = getFixture9();
		Vector3f location = new Vector3f();
		Vector3f left = new Vector3f();
		Vector3f up = new Vector3f();
		Vector3f direction = Vector3f.UNIT_Z;

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture2_6()
		throws Exception {
		CameraView fixture = getFixture2();
		Vector3f location = Vector3f.NEGATIVE_INFINITY;
		Vector3f left = Vector3f.NEGATIVE_INFINITY;
		Vector3f up = Vector3f.NAN;
		Vector3f direction = Vector3f.ZERO;

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture3_6()
		throws Exception {
		CameraView fixture = getFixture3();
		Vector3f location = Vector3f.POSITIVE_INFINITY;
		Vector3f left = Vector3f.POSITIVE_INFINITY;
		Vector3f up = Vector3f.NEGATIVE_INFINITY;
		Vector3f direction = new Vector3f();

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture4_5()
		throws Exception {
		CameraView fixture = getFixture4();
		Vector3f location = Vector3f.UNIT_X;
		Vector3f left = Vector3f.UNIT_X;
		Vector3f up = Vector3f.UNIT_X;
		Vector3f direction = Vector3f.NAN;

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture5_5()
		throws Exception {
		CameraView fixture = getFixture5();
		Vector3f location = Vector3f.UNIT_XYZ;
		Vector3f left = Vector3f.UNIT_XYZ;
		Vector3f up = Vector3f.UNIT_XYZ;
		Vector3f direction = Vector3f.NEGATIVE_INFINITY;

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void setFrame(Vector3f,Vector3f,Vector3f,Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetFrame_fixture6_5()
		throws Exception {
		CameraView fixture = getFixture6();
		Vector3f location = Vector3f.UNIT_Y;
		Vector3f left = Vector3f.UNIT_Y;
		Vector3f up = Vector3f.UNIT_Y;
		Vector3f direction = Vector3f.POSITIVE_INFINITY;

		fixture.setFrame(location, left, up, direction);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	/*@Test
	public void testupdateFrustum_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();
		float near = -1.0f;
		float far = -1.0f;
		float left = -1.0f;
		float right = -1.0f;
		float top = -1.0f;
		float bottom = -1.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.onFrustumChange(Camera.java:1440)
		//       at com.jme3.renderer.Camera.updateFrustum(Camera.java:865)
	}*/

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustum_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		float near = 0.0f;
		float far = 0.0f;
		float left = 0.0f;
		float right = 0.0f;
		float top = 0.0f;
		float bottom = 0.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustum_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		float near = 1.0f;
		float far = 1.0f;
		float left = 1.0f;
		float right = 1.0f;
		float top = 1.0f;
		float bottom = 1.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustum_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		float near = 0.0f;
		float far = 0.0f;
		float left = 0.0f;
		float right = 0.0f;
		float top = -1.0f;
		float bottom = 1.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustum_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		float near = 1.0f;
		float far = 1.0f;
		float left = 1.0f;
		float right = 1.0f;
		float top = 0.0f;
		float bottom = 1.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustum_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		float near = 0.0f;
		float far = 0.0f;
		float left = 0.0f;
		float right = -1.0f;
		float top = 0.0f;
		float bottom = 1.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustum_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		float near = 1.0f;
		float far = 1.0f;
		float left = 1.0f;
		float right = 0.0f;
		float top = 0.0f;
		float bottom = 1.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustum_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();
		float near = 0.0f;
		float far = 0.0f;
		float left = -1.0f;
		float right = 0.0f;
		float top = 0.0f;
		float bottom = 1.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustum_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();
		float near = 1.0f;
		float far = 1.0f;
		float left = 0.0f;
		float right = 0.0f;
		float top = 0.0f;
		float bottom = 1.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustum_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();
		float near = 0.0f;
		float far = -1.0f;
		float left = 0.0f;
		float right = 0.0f;
		float top = 0.0f;
		float bottom = 1.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustum_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();
		float near = 1.0f;
		float far = 0.0f;
		float left = 0.0f;
		float right = 0.0f;
		float top = 0.0f;
		float bottom = 1.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustum_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();
		float near = -1.0f;
		float far = 0.0f;
		float left = 0.0f;
		float right = 0.0f;
		float top = 0.0f;
		float bottom = 1.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustum_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();
		float near = 0.0f;
		float far = 0.0f;
		float left = 0.0f;
		float right = 0.0f;
		float top = 0.0f;
		float bottom = 1.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustum_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();
		float near = 0.0f;
		float far = 0.0f;
		float left = 0.0f;
		float right = 0.0f;
		float top = 0.0f;
		float bottom = 1.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustum_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();
		float near = 0.0f;
		float far = 0.0f;
		float left = 0.0f;
		float right = 0.0f;
		float top = 0.0f;
		float bottom = 1.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustum_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();
		float near = 0.0f;
		float far = 0.0f;
		float left = 0.0f;
		float right = 0.0f;
		float top = 0.0f;
		float bottom = 1.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustum_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();
		float near = 0.0f;
		float far = 0.0f;
		float left = 0.0f;
		float right = 0.0f;
		float top = 0.0f;
		float bottom = 1.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustum_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();
		float near = 0.0f;
		float far = 0.0f;
		float left = 0.0f;
		float right = 0.0f;
		float top = 0.0f;
		float bottom = 1.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustum_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();
		float near = 0.0f;
		float far = 0.0f;
		float left = 0.0f;
		float right = 0.0f;
		float top = 0.0f;
		float bottom = 1.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustum_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();
		float near = 0.0f;
		float far = 0.0f;
		float left = 0.0f;
		float right = 0.0f;
		float top = 0.0f;
		float bottom = 1.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustum_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();
		float near = 0.0f;
		float far = 0.0f;
		float left = 0.0f;
		float right = 0.0f;
		float top = 0.0f;
		float bottom = 1.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustum_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();
		float near = 0.0f;
		float far = 0.0f;
		float left = 0.0f;
		float right = 0.0f;
		float top = 0.0f;
		float bottom = 1.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustum_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();
		float near = 0.0f;
		float far = 0.0f;
		float left = 0.0f;
		float right = 0.0f;
		float top = 0.0f;
		float bottom = 1.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustum_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();
		float near = 0.0f;
		float far = 0.0f;
		float left = 0.0f;
		float right = 0.0f;
		float top = 0.0f;
		float bottom = 1.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	/*@Test
	public void testupdateFrustum_fixture1_2()
		throws Exception {
		Camera fixture = getFixture1();
		float near = 0.0f;
		float far = 0.0f;
		float left = 0.0f;
		float right = 0.0f;
		float top = 0.0f;
		float bottom = 1.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.onFrustumChange(Camera.java:1440)
		//       at com.jme3.renderer.Camera.updateFrustum(Camera.java:865)
	}*/

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustum_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		float near = 0.0f;
		float far = 0.0f;
		float left = 0.0f;
		float right = 0.0f;
		float top = 0.0f;
		float bottom = 1.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustum_fixture3_2()
		throws Exception {
		CameraView fixture = getFixture3();
		float near = 0.0f;
		float far = 0.0f;
		float left = 0.0f;
		float right = 0.0f;
		float top = 0.0f;
		float bottom = 1.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustum_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		float near = 0.0f;
		float far = 0.0f;
		float left = 0.0f;
		float right = 0.0f;
		float top = 0.0f;
		float bottom = 1.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustum_fixture5_2()
		throws Exception {
		CameraView fixture = getFixture5();
		float near = 0.0f;
		float far = 0.0f;
		float left = 0.0f;
		float right = 0.0f;
		float top = 0.0f;
		float bottom = 1.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustum(float,float,float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustum_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		float near = -1.0f;
		float far = -1.0f;
		float left = -1.0f;
		float right = -1.0f;
		float top = -1.0f;
		float bottom = -1.0f;

		fixture.updateFrustum(near, far, left, right, top, bottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testupdateFrustumBottom_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();
		float frustumBottom = -1.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.onFrustumChange(Camera.java:1440)
		//       at com.jme3.renderer.Camera.updateFrustumBottom(Camera.java:548)
	}
*/
	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumBottom_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		float frustumBottom = 0.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumBottom_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		float frustumBottom = 1.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumBottom_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		float frustumBottom = 1.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumBottom_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		float frustumBottom = 1.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumBottom_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		float frustumBottom = 1.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumBottom_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		float frustumBottom = 1.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumBottom_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		float frustumBottom = 1.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumBottom_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		float frustumBottom = 1.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumBottom_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();
		float frustumBottom = 1.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumBottom_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();
		float frustumBottom = 1.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumBottom_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();
		float frustumBottom = 1.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumBottom_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();
		float frustumBottom = 1.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumBottom_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();
		float frustumBottom = 1.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumBottom_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();
		float frustumBottom = 1.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumBottom_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();
		float frustumBottom = 1.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumBottom_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();
		float frustumBottom = 1.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumBottom_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();
		float frustumBottom = 1.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumBottom_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();
		float frustumBottom = 1.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumBottom_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();
		float frustumBottom = 1.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumBottom_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();
		float frustumBottom = 1.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumBottom_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();
		float frustumBottom = 1.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumBottom_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();
		float frustumBottom = 1.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumBottom_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();
		float frustumBottom = 1.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumBottom_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();
		float frustumBottom = 1.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumBottom_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();
		float frustumBottom = 1.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumBottom_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();
		float frustumBottom = 1.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumBottom_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();
		float frustumBottom = 1.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumBottom_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();
		float frustumBottom = 1.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumBottom_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		float frustumBottom = -1.0f;

		fixture.updateFrustumBottom(frustumBottom);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	/*@Test
	public void testupdateFrustumFar_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();
		float frustumFar = -1.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.onFrustumChange(Camera.java:1440)
		//       at com.jme3.renderer.Camera.updateFrustumFar(Camera.java:578)
	}*/

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumFar_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		float frustumFar = 0.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumFar_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		float frustumFar = 1.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumFar_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		float frustumFar = 1.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumFar_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		float frustumFar = 1.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumFar_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		float frustumFar = 1.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumFar_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		float frustumFar = 1.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumFar_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		float frustumFar = 1.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumFar_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		float frustumFar = 1.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumFar_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();
		float frustumFar = 1.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumFar_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();
		float frustumFar = 1.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumFar_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();
		float frustumFar = 1.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumFar_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();
		float frustumFar = 1.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumFar_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();
		float frustumFar = 1.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumFar_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();
		float frustumFar = 1.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumFar_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();
		float frustumFar = 1.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumFar_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();
		float frustumFar = 1.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumFar_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();
		float frustumFar = 1.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumFar_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();
		float frustumFar = 1.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumFar_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();
		float frustumFar = 1.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumFar_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();
		float frustumFar = 1.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumFar_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();
		float frustumFar = 1.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumFar_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();
		float frustumFar = 1.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumFar_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();
		float frustumFar = 1.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumFar_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();
		float frustumFar = 1.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumFar_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();
		float frustumFar = 1.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumFar_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();
		float frustumFar = 1.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumFar_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();
		float frustumFar = 1.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumFar_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();
		float frustumFar = 1.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumFar(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumFar_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		float frustumFar = -1.0f;

		fixture.updateFrustumFar(frustumFar);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testupdateFrustumLeft_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();
		float frustumLeft = -1.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.onFrustumChange(Camera.java:1440)
		//       at com.jme3.renderer.Camera.updateFrustumLeft(Camera.java:605)
	}*/

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumLeft_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		float frustumLeft = 0.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumLeft_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		float frustumLeft = 1.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumLeft_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		float frustumLeft = 1.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumLeft_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		float frustumLeft = 1.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumLeft_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		float frustumLeft = 1.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumLeft_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		float frustumLeft = 1.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumLeft_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		float frustumLeft = 1.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumLeft_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		float frustumLeft = 1.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumLeft_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();
		float frustumLeft = 1.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumLeft_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();
		float frustumLeft = 1.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumLeft_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();
		float frustumLeft = 1.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumLeft_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();
		float frustumLeft = 1.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumLeft_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();
		float frustumLeft = 1.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumLeft_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();
		float frustumLeft = 1.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumLeft_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();
		float frustumLeft = 1.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumLeft_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();
		float frustumLeft = 1.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumLeft_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();
		float frustumLeft = 1.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumLeft_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();
		float frustumLeft = 1.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumLeft_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();
		float frustumLeft = 1.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumLeft_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();
		float frustumLeft = 1.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumLeft_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();
		float frustumLeft = 1.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumLeft_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();
		float frustumLeft = 1.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumLeft_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();
		float frustumLeft = 1.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumLeft_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();
		float frustumLeft = 1.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumLeft_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();
		float frustumLeft = 1.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumLeft_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();
		float frustumLeft = 1.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumLeft_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();
		float frustumLeft = 1.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumLeft_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();
		float frustumLeft = 1.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumLeft_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		float frustumLeft = -1.0f;

		fixture.updateFrustumLeft(frustumLeft);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testupdateFrustumNear_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();
		float frustumNear = -1.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.onFrustumChange(Camera.java:1440)
		//       at com.jme3.renderer.Camera.updateFrustumNear(Camera.java:635)
	}*/

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumNear_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		float frustumNear = 0.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumNear_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		float frustumNear = 1.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumNear_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		float frustumNear = 1.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumNear_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		float frustumNear = 1.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumNear_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		float frustumNear = 1.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumNear_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		float frustumNear = 1.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumNear_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		float frustumNear = 1.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumNear_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		float frustumNear = 1.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumNear_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();
		float frustumNear = 1.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumNear_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();
		float frustumNear = 1.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumNear_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();
		float frustumNear = 1.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumNear_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();
		float frustumNear = 1.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumNear_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();
		float frustumNear = 1.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumNear_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();
		float frustumNear = 1.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumNear_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();
		float frustumNear = 1.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumNear_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();
		float frustumNear = 1.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumNear_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();
		float frustumNear = 1.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumNear_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();
		float frustumNear = 1.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumNear_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();
		float frustumNear = 1.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumNear_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();
		float frustumNear = 1.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumNear_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();
		float frustumNear = 1.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumNear_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();
		float frustumNear = 1.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumNear_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();
		float frustumNear = 1.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumNear_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();
		float frustumNear = 1.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumNear_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();
		float frustumNear = 1.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumNear_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();
		float frustumNear = 1.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumNear_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();
		float frustumNear = 1.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumNear_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();
		float frustumNear = 1.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumNear(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumNear_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		float frustumNear = -1.0f;

		fixture.updateFrustumNear(frustumNear);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testupdateFrustumPerspective_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();
		float fovY = -1.0f;
		float aspect = -1.0f;
		float near = -1.0f;
		float far = -1.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.onFrustumChange(Camera.java:1425)
		//       at com.jme3.renderer.Camera.updateFrustumPerspective(Camera.java:902)
	}*/

	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumPerspective_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		float fovY = 0.0f;
		float aspect = 0.0f;
		float near = 0.0f;
		float far = 0.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumPerspective_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		float fovY = 1.0f;
		float aspect = 1.0f;
		float near = 1.0f;
		float far = 1.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumPerspective_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		float fovY = 0.0f;
		float aspect = 0.0f;
		float near = -1.0f;
		float far = 1.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumPerspective_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		float fovY = 1.0f;
		float aspect = 1.0f;
		float near = 0.0f;
		float far = 1.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumPerspective_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		float fovY = 0.0f;
		float aspect = -1.0f;
		float near = 0.0f;
		float far = 1.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumPerspective_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		float fovY = 1.0f;
		float aspect = 0.0f;
		float near = 0.0f;
		float far = 1.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumPerspective_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();
		float fovY = -1.0f;
		float aspect = 0.0f;
		float near = 0.0f;
		float far = 1.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumPerspective_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();
		float fovY = 0.0f;
		float aspect = 0.0f;
		float near = 0.0f;
		float far = 1.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumPerspective_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();
		float fovY = 0.0f;
		float aspect = 0.0f;
		float near = 0.0f;
		float far = 1.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumPerspective_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();
		float fovY = 0.0f;
		float aspect = 0.0f;
		float near = 0.0f;
		float far = 1.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumPerspective_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();
		float fovY = 0.0f;
		float aspect = 0.0f;
		float near = 0.0f;
		float far = 1.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumPerspective_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();
		float fovY = 0.0f;
		float aspect = 0.0f;
		float near = 0.0f;
		float far = 1.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumPerspective_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();
		float fovY = 0.0f;
		float aspect = 0.0f;
		float near = 0.0f;
		float far = 1.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumPerspective_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();
		float fovY = 0.0f;
		float aspect = 0.0f;
		float near = 0.0f;
		float far = 1.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumPerspective_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();
		float fovY = 0.0f;
		float aspect = 0.0f;
		float near = 0.0f;
		float far = 1.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumPerspective_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();
		float fovY = 0.0f;
		float aspect = 0.0f;
		float near = 0.0f;
		float far = 1.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumPerspective_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();
		float fovY = 0.0f;
		float aspect = 0.0f;
		float near = 0.0f;
		float far = 1.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumPerspective_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();
		float fovY = 0.0f;
		float aspect = 0.0f;
		float near = 0.0f;
		float far = 1.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumPerspective_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();
		float fovY = 0.0f;
		float aspect = 0.0f;
		float near = 0.0f;
		float far = 1.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumPerspective_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();
		float fovY = 0.0f;
		float aspect = 0.0f;
		float near = 0.0f;
		float far = 1.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumPerspective_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();
		float fovY = 0.0f;
		float aspect = 0.0f;
		float near = 0.0f;
		float far = 1.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumPerspective_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();
		float fovY = 0.0f;
		float aspect = 0.0f;
		float near = 0.0f;
		float far = 1.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumPerspective_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();
		float fovY = 0.0f;
		float aspect = 0.0f;
		float near = 0.0f;
		float far = 1.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumPerspective_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();
		float fovY = 0.0f;
		float aspect = 0.0f;
		float near = 0.0f;
		float far = 1.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumPerspective_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();
		float fovY = 0.0f;
		float aspect = 0.0f;
		float near = 0.0f;
		float far = 1.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testupdateFrustumPerspective_fixture1_2()
		throws Exception {
		Camera fixture = getFixture1();
		float fovY = 0.0f;
		float aspect = 0.0f;
		float near = 0.0f;
		float far = 1.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.onFrustumChange(Camera.java:1425)
		//       at com.jme3.renderer.Camera.updateFrustumPerspective(Camera.java:902)
	}
*/
	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumPerspective_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		float fovY = 0.0f;
		float aspect = 0.0f;
		float near = 0.0f;
		float far = 1.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumPerspective_fixture3_2()
		throws Exception {
		CameraView fixture = getFixture3();
		float fovY = 0.0f;
		float aspect = 0.0f;
		float near = 0.0f;
		float far = 1.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumPerspective(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumPerspective_fixture5_2()
		throws Exception {
		CameraView fixture = getFixture5();
		float fovY = -1.0f;
		float aspect = -1.0f;
		float near = -1.0f;
		float far = -1.0f;

		fixture.updateFrustumPerspective(fovY, aspect, near, far);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testupdateFrustumRight_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();
		float frustumRight = -1.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.onFrustumChange(Camera.java:1440)
		//       at com.jme3.renderer.Camera.updateFrustumRight(Camera.java:657)
	}
*/
	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumRight_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		float frustumRight = 0.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumRight_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		float frustumRight = 1.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumRight_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		float frustumRight = 1.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumRight_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		float frustumRight = 1.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumRight_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		float frustumRight = 1.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumRight_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		float frustumRight = 1.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumRight_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		float frustumRight = 1.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumRight_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		float frustumRight = 1.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumRight_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();
		float frustumRight = 1.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumRight_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();
		float frustumRight = 1.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumRight_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();
		float frustumRight = 1.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumRight_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();
		float frustumRight = 1.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumRight_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();
		float frustumRight = 1.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumRight_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();
		float frustumRight = 1.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumRight_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();
		float frustumRight = 1.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumRight_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();
		float frustumRight = 1.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumRight_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();
		float frustumRight = 1.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumRight_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();
		float frustumRight = 1.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumRight_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();
		float frustumRight = 1.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumRight_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();
		float frustumRight = 1.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumRight_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();
		float frustumRight = 1.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumRight_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();
		float frustumRight = 1.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumRight_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();
		float frustumRight = 1.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumRight_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();
		float frustumRight = 1.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumRight_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();
		float frustumRight = 1.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumRight_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();
		float frustumRight = 1.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumRight_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();
		float frustumRight = 1.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumRight_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();
		float frustumRight = 1.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumRight_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		float frustumRight = -1.0f;

		fixture.updateFrustumRight(frustumRight);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testupdateFrustumTop_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();
		float frustumTop = -1.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.onFrustumChange(Camera.java:1440)
		//       at com.jme3.renderer.Camera.updateFrustumTop(Camera.java:681)
	}
*/
	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumTop_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		float frustumTop = 0.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumTop_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		float frustumTop = 1.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumTop_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		float frustumTop = 1.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumTop_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		float frustumTop = 1.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumTop_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		float frustumTop = 1.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumTop_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		float frustumTop = 1.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumTop_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		float frustumTop = 1.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumTop_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		float frustumTop = 1.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumTop_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();
		float frustumTop = 1.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumTop_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();
		float frustumTop = 1.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumTop_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();
		float frustumTop = 1.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumTop_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();
		float frustumTop = 1.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumTop_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();
		float frustumTop = 1.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumTop_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();
		float frustumTop = 1.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumTop_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();
		float frustumTop = 1.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumTop_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();
		float frustumTop = 1.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumTop_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();
		float frustumTop = 1.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumTop_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();
		float frustumTop = 1.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumTop_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();
		float frustumTop = 1.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumTop_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();
		float frustumTop = 1.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumTop_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();
		float frustumTop = 1.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumTop_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();
		float frustumTop = 1.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumTop_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();
		float frustumTop = 1.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumTop_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();
		float frustumTop = 1.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumTop_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();
		float frustumTop = 1.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumTop_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();
		float frustumTop = 1.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumTop_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();
		float frustumTop = 1.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumTop_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();
		float frustumTop = 1.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
	}

	/**
	 * Run the void updateFrustumTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testupdateFrustumTop_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		float frustumTop = -1.0f;

		fixture.updateFrustumTop(frustumTop);

		// add additional test code here
	}

	/**
	 * Run the void setLocation(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testSetLocation_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();
		Vector3f location = Vector3f.NAN;

		fixture.setLocation(location);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.setLocation(Camera.java:771)
	}*/

	/**
	 * Run the void setLocation(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetLocation_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		Vector3f location = Vector3f.NEGATIVE_INFINITY;

		fixture.setLocation(location);

		// add additional test code here
	}

	/**
	 * Run the void setLocation(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetLocation_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		Vector3f location = Vector3f.POSITIVE_INFINITY;

		fixture.setLocation(location);

		// add additional test code here
	}

	/**
	 * Run the void setLocation(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetLocation_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		Vector3f location = Vector3f.UNIT_X;

		fixture.setLocation(location);

		// add additional test code here
	}

	/**
	 * Run the void setLocation(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetLocation_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		Vector3f location = Vector3f.UNIT_XYZ;

		fixture.setLocation(location);

		// add additional test code here
	}

	/**
	 * Run the void setLocation(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetLocation_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		Vector3f location = Vector3f.UNIT_Y;

		fixture.setLocation(location);

		// add additional test code here
	}

	/**
	 * Run the void setLocation(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetLocation_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		Vector3f location = Vector3f.UNIT_Z;

		fixture.setLocation(location);

		// add additional test code here
	}

	/**
	 * Run the void setLocation(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetLocation_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		Vector3f location = Vector3f.ZERO;

		fixture.setLocation(location);

		// add additional test code here
	}

	/**
	 * Run the void setLocation(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetLocation_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		Vector3f location = new Vector3f();

		fixture.setLocation(location);

		// add additional test code here
	}

//	/**
//	 * Run the void setLocation(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetLocation_fixture10_1()
//		throws Exception {
//		Camera fixture = getFixture10();
//		Vector3f location = new Vector3f((Vector3f) null);
//
//		fixture.setLocation(location);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setLocation(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetLocation_fixture11_1()
//		throws Exception {
//		Camera fixture = getFixture11();
//		Vector3f location = new Vector3f((Vector3f) null);
//
//		fixture.setLocation(location);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setLocation(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetLocation_fixture12_1()
//		throws Exception {
//		Camera fixture = getFixture12();
//		Vector3f location = new Vector3f((Vector3f) null);
//
//		fixture.setLocation(location);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setLocation(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetLocation_fixture13_1()
//		throws Exception {
//		Camera fixture = getFixture13();
//		Vector3f location = new Vector3f((Vector3f) null);
//
//		fixture.setLocation(location);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setLocation(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetLocation_fixture14_1()
//		throws Exception {
//		Camera fixture = getFixture14();
//		Vector3f location = new Vector3f((Vector3f) null);
//
//		fixture.setLocation(location);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setLocation(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetLocation_fixture15_1()
//		throws Exception {
//		Camera fixture = getFixture15();
//		Vector3f location = new Vector3f((Vector3f) null);
//
//		fixture.setLocation(location);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setLocation(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetLocation_fixture16_1()
//		throws Exception {
//		Camera fixture = getFixture16();
//		Vector3f location = new Vector3f((Vector3f) null);
//
//		fixture.setLocation(location);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setLocation(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetLocation_fixture17_1()
//		throws Exception {
//		Camera fixture = getFixture17();
//		Vector3f location = new Vector3f((Vector3f) null);
//
//		fixture.setLocation(location);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setLocation(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetLocation_fixture18_1()
//		throws Exception {
//		Camera fixture = getFixture18();
//		Vector3f location = new Vector3f((Vector3f) null);
//
//		fixture.setLocation(location);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setLocation(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetLocation_fixture19_1()
//		throws Exception {
//		Camera fixture = getFixture19();
//		Vector3f location = new Vector3f((Vector3f) null);
//
//		fixture.setLocation(location);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setLocation(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetLocation_fixture20_1()
//		throws Exception {
//		Camera fixture = getFixture20();
//		Vector3f location = new Vector3f((Vector3f) null);
//
//		fixture.setLocation(location);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setLocation(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetLocation_fixture21_1()
//		throws Exception {
//		Camera fixture = getFixture21();
//		Vector3f location = new Vector3f((Vector3f) null);
//
//		fixture.setLocation(location);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setLocation(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetLocation_fixture22_1()
//		throws Exception {
//		Camera fixture = getFixture22();
//		Vector3f location = new Vector3f((Vector3f) null);
//
//		fixture.setLocation(location);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setLocation(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetLocation_fixture23_1()
//		throws Exception {
//		Camera fixture = getFixture23();
//		Vector3f location = new Vector3f((Vector3f) null);
//
//		fixture.setLocation(location);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setLocation(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetLocation_fixture24_1()
//		throws Exception {
//		Camera fixture = getFixture24();
//		Vector3f location = new Vector3f((Vector3f) null);
//
//		fixture.setLocation(location);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setLocation(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetLocation_fixture25_1()
//		throws Exception {
//		Camera fixture = getFixture25();
//		Vector3f location = new Vector3f((Vector3f) null);
//
//		fixture.setLocation(location);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setLocation(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetLocation_fixture26_1()
//		throws Exception {
//		Camera fixture = getFixture26();
//		Vector3f location = new Vector3f((Vector3f) null);
//
//		fixture.setLocation(location);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setLocation(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetLocation_fixture27_1()
//		throws Exception {
//		Camera fixture = getFixture27();
//		Vector3f location = new Vector3f((Vector3f) null);
//
//		fixture.setLocation(location);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setLocation(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetLocation_fixture28_1()
//		throws Exception {
//		Camera fixture = getFixture28();
//		Vector3f location = new Vector3f((Vector3f) null);
//
//		fixture.setLocation(location);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}
//
//	/**
//	 * Run the void setLocation(Vector3f) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetLocation_fixture29_1()
//		throws Exception {
//		Camera fixture = getFixture29();
//		Vector3f location = new Vector3f((Vector3f) null);
//
//		fixture.setLocation(location);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Vector3f.set(Vector3f.java:152)
//		//       at com.jme3.math.Vector3f.<init>(Vector3f.java:121)
//	}

	/**
	 * Run the void setLocation(Vector3f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetLocation_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		Vector3f location = Vector3f.NAN;

		fixture.setLocation(location);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture1_1()
		throws Exception {
		CameraView fixture = getFixture1();
		String name = "";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		String name = "0123456789";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		String name = "0123456789";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		String name = "0123456789";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		String name = "0123456789";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		String name = "0123456789";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		String name = "0123456789";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		String name = "0123456789";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		String name = "0123456789";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();
		String name = "0123456789";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();
		String name = "0123456789";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();
		String name = "0123456789";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();
		String name = "0123456789";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();
		String name = "0123456789";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();
		String name = "0123456789";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();
		String name = "0123456789";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();
		String name = "0123456789";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();
		String name = "0123456789";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();
		String name = "0123456789";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();
		String name = "0123456789";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();
		String name = "0123456789";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();
		String name = "0123456789";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();
		String name = "0123456789";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();
		String name = "0123456789";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();
		String name = "0123456789";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();
		String name = "0123456789";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();
		String name = "0123456789";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();
		String name = "0123456789";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();
		String name = "0123456789";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setName(String) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetName_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		String name = "";

		fixture.setName(name);

		// add additional test code here
	}

	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testSetParallelProjection_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();
		boolean value = false;

		fixture.setParallelProjection(value);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.onFrustumChange(Camera.java:1425)
		//       at com.jme3.renderer.Camera.setParallelProjection(Camera.java:1578)
	}
*/
	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetParallelProjection_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		boolean value = true;

		fixture.setParallelProjection(value);

		// add additional test code here
	}

	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetParallelProjection_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		boolean value = true;

		fixture.setParallelProjection(value);

		// add additional test code here
	}

	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetParallelProjection_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		boolean value = true;

		fixture.setParallelProjection(value);

		// add additional test code here
	}

	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetParallelProjection_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		boolean value = true;

		fixture.setParallelProjection(value);

		// add additional test code here
	}

	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetParallelProjection_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		boolean value = true;

		fixture.setParallelProjection(value);

		// add additional test code here
	}

	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetParallelProjection_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		boolean value = true;

		fixture.setParallelProjection(value);

		// add additional test code here
	}

	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetParallelProjection_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		boolean value = true;

		fixture.setParallelProjection(value);

		// add additional test code here
	}

	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetParallelProjection_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		boolean value = true;

		fixture.setParallelProjection(value);

		// add additional test code here
	}

	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetParallelProjection_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();
		boolean value = true;

		fixture.setParallelProjection(value);

		// add additional test code here
	}

	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetParallelProjection_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();
		boolean value = true;

		fixture.setParallelProjection(value);

		// add additional test code here
	}

	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetParallelProjection_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();
		boolean value = true;

		fixture.setParallelProjection(value);

		// add additional test code here
	}

	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetParallelProjection_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();
		boolean value = true;

		fixture.setParallelProjection(value);

		// add additional test code here
	}

	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetParallelProjection_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();
		boolean value = true;

		fixture.setParallelProjection(value);

		// add additional test code here
	}

	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetParallelProjection_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();
		boolean value = true;

		fixture.setParallelProjection(value);

		// add additional test code here
	}

	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetParallelProjection_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();
		boolean value = true;

		fixture.setParallelProjection(value);

		// add additional test code here
	}

	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetParallelProjection_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();
		boolean value = true;

		fixture.setParallelProjection(value);

		// add additional test code here
	}

	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetParallelProjection_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();
		boolean value = true;

		fixture.setParallelProjection(value);

		// add additional test code here
	}

	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetParallelProjection_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();
		boolean value = true;

		fixture.setParallelProjection(value);

		// add additional test code here
	}

	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetParallelProjection_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();
		boolean value = true;

		fixture.setParallelProjection(value);

		// add additional test code here
	}

	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetParallelProjection_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();
		boolean value = true;

		fixture.setParallelProjection(value);

		// add additional test code here
	}

	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetParallelProjection_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();
		boolean value = true;

		fixture.setParallelProjection(value);

		// add additional test code here
	}

	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetParallelProjection_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();
		boolean value = true;

		fixture.setParallelProjection(value);

		// add additional test code here
	}

	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetParallelProjection_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();
		boolean value = true;

		fixture.setParallelProjection(value);

		// add additional test code here
	}

	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetParallelProjection_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();
		boolean value = true;

		fixture.setParallelProjection(value);

		// add additional test code here
	}

	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetParallelProjection_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();
		boolean value = true;

		fixture.setParallelProjection(value);

		// add additional test code here
	}

	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetParallelProjection_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();
		boolean value = true;

		fixture.setParallelProjection(value);

		// add additional test code here
	}

	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetParallelProjection_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();
		boolean value = true;

		fixture.setParallelProjection(value);

		// add additional test code here
	}

	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetParallelProjection_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();
		boolean value = true;

		fixture.setParallelProjection(value);

		// add additional test code here
	}

	/**
	 * Run the void setParallelProjection(boolean) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetParallelProjection_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		boolean value = false;

		fixture.setParallelProjection(value);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture1_1()
		throws Exception {
		CameraView fixture = getFixture1();
		int planeState = 0;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		int planeState = 1;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		int planeState = 7;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		int planeState = 7;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		int planeState = 7;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		int planeState = 7;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		int planeState = 7;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		int planeState = 7;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		int planeState = 7;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();
		int planeState = 7;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();
		int planeState = 7;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();
		int planeState = 7;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();
		int planeState = 7;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();
		int planeState = 7;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();
		int planeState = 7;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();
		int planeState = 7;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();
		int planeState = 7;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();
		int planeState = 7;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();
		int planeState = 7;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();
		int planeState = 7;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();
		int planeState = 7;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();
		int planeState = 7;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();
		int planeState = 7;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();
		int planeState = 7;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();
		int planeState = 7;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();
		int planeState = 7;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();
		int planeState = 7;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();
		int planeState = 7;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();
		int planeState = 7;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setPlaneState(int) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetPlaneState_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		int planeState = 0;

		fixture.setPlaneState(planeState);

		// add additional test code here
	}

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testSetProjectionMatrix_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();
		Matrix4f projMatrix = Matrix4f.IDENTITY;

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
	}*/

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetProjectionMatrix_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		Matrix4f projMatrix = Matrix4f.ZERO;

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
	}

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetProjectionMatrix_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		Matrix4f projMatrix = new Matrix4f();

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
	}

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetProjectionMatrix_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		Matrix4f projMatrix = new Matrix4f(-1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f);

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
	}

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test(expected=java.lang.IllegalArgumentException.class)
	public void testSetProjectionMatrix_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		Matrix4f projMatrix = new Matrix4f(new float[] {-1.0f, 0.0f, 1.0f, -0.5f, 0.5f, Float.MAX_VALUE, Float.MIN_VALUE});

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.IllegalArgumentException: Array must be of size 16.
		//       at com.jme3.math.Matrix4f.set(Matrix4f.java:628)
		//       at com.jme3.math.Matrix4f.<init>(Matrix4f.java:110)
	}

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetProjectionMatrix_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		Matrix4f projMatrix = new Matrix4f((Matrix4f) null);

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
	}

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetProjectionMatrix_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		Matrix4f projMatrix = new Matrix4f((Matrix4f) null);

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
	}

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetProjectionMatrix_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		Matrix4f projMatrix = new Matrix4f((Matrix4f) null);

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
	}

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetProjectionMatrix_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		Matrix4f projMatrix = new Matrix4f((Matrix4f) null);

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
	}

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetProjectionMatrix_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();
		Matrix4f projMatrix = new Matrix4f((Matrix4f) null);

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
	}

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetProjectionMatrix_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();
		Matrix4f projMatrix = new Matrix4f((Matrix4f) null);

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
	}

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetProjectionMatrix_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();
		Matrix4f projMatrix = new Matrix4f((Matrix4f) null);

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
	}

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetProjectionMatrix_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();
		Matrix4f projMatrix = new Matrix4f((Matrix4f) null);

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
	}

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetProjectionMatrix_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();
		Matrix4f projMatrix = new Matrix4f((Matrix4f) null);

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
	}

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetProjectionMatrix_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();
		Matrix4f projMatrix = new Matrix4f((Matrix4f) null);

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
	}

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetProjectionMatrix_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();
		Matrix4f projMatrix = new Matrix4f((Matrix4f) null);

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
	}

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetProjectionMatrix_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();
		Matrix4f projMatrix = new Matrix4f((Matrix4f) null);

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
	}

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetProjectionMatrix_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();
		Matrix4f projMatrix = new Matrix4f((Matrix4f) null);

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
	}

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetProjectionMatrix_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();
		Matrix4f projMatrix = new Matrix4f((Matrix4f) null);

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
	}

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetProjectionMatrix_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();
		Matrix4f projMatrix = new Matrix4f((Matrix4f) null);

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
	}

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetProjectionMatrix_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();
		Matrix4f projMatrix = new Matrix4f((Matrix4f) null);

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
	}

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetProjectionMatrix_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();
		Matrix4f projMatrix = new Matrix4f((Matrix4f) null);

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
	}

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetProjectionMatrix_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();
		Matrix4f projMatrix = new Matrix4f((Matrix4f) null);

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
	}

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetProjectionMatrix_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();
		Matrix4f projMatrix = new Matrix4f((Matrix4f) null);

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
	}

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetProjectionMatrix_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();
		Matrix4f projMatrix = new Matrix4f((Matrix4f) null);

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
	}

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetProjectionMatrix_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();
		Matrix4f projMatrix = new Matrix4f((Matrix4f) null);

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
	}

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetProjectionMatrix_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();
		Matrix4f projMatrix = new Matrix4f((Matrix4f) null);

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
	}

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetProjectionMatrix_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();
		Matrix4f projMatrix = new Matrix4f((Matrix4f) null);

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
	}

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetProjectionMatrix_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();
		Matrix4f projMatrix = new Matrix4f((Matrix4f) null);

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
	}

	/**
	 * Run the void setProjectionMatrix(Matrix4f) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetProjectionMatrix_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		Matrix4f projMatrix = Matrix4f.IDENTITY;

		fixture.setProjectionMatrix(projMatrix);

		// add additional test code here
	}

	/**
	 * Run the void setRotation(Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*@Test
	public void testSetRotation_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();
		Quaternion rotation = Quaternion.DIRECTION_Z;

		fixture.setRotation(rotation);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.setRotation(Camera.java:787)
	}
*/
	/**
	 * Run the void setRotation(Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetRotation_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		Quaternion rotation = Quaternion.IDENTITY;

		fixture.setRotation(rotation);

		// add additional test code here
	}

	/**
	 * Run the void setRotation(Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetRotation_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		Quaternion rotation = Quaternion.ZERO;

		fixture.setRotation(rotation);

		// add additional test code here
	}

	/**
	 * Run the void setRotation(Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetRotation_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		Quaternion rotation = new Quaternion();

		fixture.setRotation(rotation);

		// add additional test code here
	}

	/**
	 * Run the void setRotation(Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetRotation_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		Quaternion rotation = new Quaternion(-0.5f, -0.5f, -0.5f, -0.5f);

		fixture.setRotation(rotation);

		// add additional test code here
	}

	/**
	 * Run the void setRotation(Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetRotation_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		Quaternion rotation = new Quaternion(-1.0f, -1.0f, -1.0f, -1.0f);

		fixture.setRotation(rotation);

		// add additional test code here
	}

	/**
	 * Run the void setRotation(Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetRotation_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		Quaternion rotation = new Quaternion(0.0f, 0.0f, 0.0f, 0.0f);

		fixture.setRotation(rotation);

		// add additional test code here
	}

	/**
	 * Run the void setRotation(Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetRotation_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		Quaternion rotation = new Quaternion(1.0f, 1.0f, 1.0f, 1.0f);

		fixture.setRotation(rotation);

		// add additional test code here
	}

	/**
	 * Run the void setRotation(Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test(expected=java.lang.IllegalArgumentException.class)
	public void testSetRotation_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		Quaternion rotation = new Quaternion(new float[] {-1.0f, 0.0f, 1.0f, -0.5f, 0.5f, Float.MAX_VALUE, Float.MIN_VALUE});

		fixture.setRotation(rotation);

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.IllegalArgumentException: Angles array must have three elements
		//       at com.jme3.math.Quaternion.fromAngles(Quaternion.java:227)
		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:167)
	}

//	/**
//	 * Run the void setRotation(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetRotation_fixture10_1()
//		throws Exception {
//		Camera fixture = getFixture10();
//		Quaternion rotation = new Quaternion((Quaternion) null);
//
//		fixture.setRotation(rotation);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:193)
//	}
//
//	/**
//	 * Run the void setRotation(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetRotation_fixture11_1()
//		throws Exception {
//		Camera fixture = getFixture11();
//		Quaternion rotation = new Quaternion((Quaternion) null, (Quaternion) null, -1.0f);
//
//		fixture.setRotation(rotation);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setRotation(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetRotation_fixture12_1()
//		throws Exception {
//		Camera fixture = getFixture12();
//		Quaternion rotation = new Quaternion((Quaternion) null, (Quaternion) null, 0.0f);
//
//		fixture.setRotation(rotation);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setRotation(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetRotation_fixture13_1()
//		throws Exception {
//		Camera fixture = getFixture13();
//		Quaternion rotation = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setRotation(rotation);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setRotation(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetRotation_fixture14_1()
//		throws Exception {
//		Camera fixture = getFixture14();
//		Quaternion rotation = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setRotation(rotation);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setRotation(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetRotation_fixture15_1()
//		throws Exception {
//		Camera fixture = getFixture15();
//		Quaternion rotation = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setRotation(rotation);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setRotation(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetRotation_fixture16_1()
//		throws Exception {
//		Camera fixture = getFixture16();
//		Quaternion rotation = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setRotation(rotation);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setRotation(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetRotation_fixture17_1()
//		throws Exception {
//		Camera fixture = getFixture17();
//		Quaternion rotation = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setRotation(rotation);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setRotation(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetRotation_fixture18_1()
//		throws Exception {
//		Camera fixture = getFixture18();
//		Quaternion rotation = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setRotation(rotation);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setRotation(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetRotation_fixture19_1()
//		throws Exception {
//		Camera fixture = getFixture19();
//		Quaternion rotation = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setRotation(rotation);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setRotation(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetRotation_fixture20_1()
//		throws Exception {
//		Camera fixture = getFixture20();
//		Quaternion rotation = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setRotation(rotation);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setRotation(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetRotation_fixture21_1()
//		throws Exception {
//		Camera fixture = getFixture21();
//		Quaternion rotation = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setRotation(rotation);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setRotation(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetRotation_fixture22_1()
//		throws Exception {
//		Camera fixture = getFixture22();
//		Quaternion rotation = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setRotation(rotation);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setRotation(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetRotation_fixture23_1()
//		throws Exception {
//		Camera fixture = getFixture23();
//		Quaternion rotation = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setRotation(rotation);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setRotation(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetRotation_fixture24_1()
//		throws Exception {
//		Camera fixture = getFixture24();
//		Quaternion rotation = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setRotation(rotation);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setRotation(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetRotation_fixture25_1()
//		throws Exception {
//		Camera fixture = getFixture25();
//		Quaternion rotation = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setRotation(rotation);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setRotation(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetRotation_fixture26_1()
//		throws Exception {
//		Camera fixture = getFixture26();
//		Quaternion rotation = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setRotation(rotation);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setRotation(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetRotation_fixture27_1()
//		throws Exception {
//		Camera fixture = getFixture27();
//		Quaternion rotation = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setRotation(rotation);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setRotation(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetRotation_fixture28_1()
//		throws Exception {
//		Camera fixture = getFixture28();
//		Quaternion rotation = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setRotation(rotation);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}
//
//	/**
//	 * Run the void setRotation(Quaternion) method test.
//	 *
//	 * @throws Exception
//	 *
//	 * @generatedBy CodePro at 2013-01-07 19:30
//	 */
//	@Test
//	public void testSetRotation_fixture29_1()
//		throws Exception {
//		Camera fixture = getFixture29();
//		Quaternion rotation = new Quaternion((Quaternion) null, (Quaternion) null, 1.0f);
//
//		fixture.setRotation(rotation);
//
//		// add additional test code here
//		// An unexpected exception was thrown in user code while executing this test:
//		//    java.lang.NullPointerException
//		//       at com.jme3.math.Quaternion.slerp(Quaternion.java:631)
//		//       at com.jme3.math.Quaternion.<init>(Quaternion.java:182)
//	}

	/**
	 * Run the void setRotation(Quaternion) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetRotation_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		Quaternion rotation = Quaternion.DIRECTION_Z;

		fixture.setRotation(rotation);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture1_1()
		throws Exception {
		CameraView fixture = getFixture1();
		float left = -1.0f;
		float right = -1.0f;
		float bottom = -1.0f;
		float top = -1.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		float left = 0.0f;
		float right = 0.0f;
		float bottom = 0.0f;
		float top = 0.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		float left = 1.0f;
		float right = 1.0f;
		float bottom = 1.0f;
		float top = 1.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		float left = 0.0f;
		float right = 0.0f;
		float bottom = -1.0f;
		float top = 1.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		float left = 1.0f;
		float right = 1.0f;
		float bottom = 0.0f;
		float top = 1.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		float left = 0.0f;
		float right = -1.0f;
		float bottom = 0.0f;
		float top = 1.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		float left = 1.0f;
		float right = 0.0f;
		float bottom = 0.0f;
		float top = 1.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();
		float left = -1.0f;
		float right = 0.0f;
		float bottom = 0.0f;
		float top = 1.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();
		float left = 0.0f;
		float right = 0.0f;
		float bottom = 0.0f;
		float top = 1.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();
		float left = 0.0f;
		float right = 0.0f;
		float bottom = 0.0f;
		float top = 1.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();
		float left = 0.0f;
		float right = 0.0f;
		float bottom = 0.0f;
		float top = 1.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();
		float left = 0.0f;
		float right = 0.0f;
		float bottom = 0.0f;
		float top = 1.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();
		float left = 0.0f;
		float right = 0.0f;
		float bottom = 0.0f;
		float top = 1.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();
		float left = 0.0f;
		float right = 0.0f;
		float bottom = 0.0f;
		float top = 1.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();
		float left = 0.0f;
		float right = 0.0f;
		float bottom = 0.0f;
		float top = 1.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();
		float left = 0.0f;
		float right = 0.0f;
		float bottom = 0.0f;
		float top = 1.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();
		float left = 0.0f;
		float right = 0.0f;
		float bottom = 0.0f;
		float top = 1.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();
		float left = 0.0f;
		float right = 0.0f;
		float bottom = 0.0f;
		float top = 1.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();
		float left = 0.0f;
		float right = 0.0f;
		float bottom = 0.0f;
		float top = 1.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();
		float left = 0.0f;
		float right = 0.0f;
		float bottom = 0.0f;
		float top = 1.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();
		float left = 0.0f;
		float right = 0.0f;
		float bottom = 0.0f;
		float top = 1.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();
		float left = 0.0f;
		float right = 0.0f;
		float bottom = 0.0f;
		float top = 1.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();
		float left = 0.0f;
		float right = 0.0f;
		float bottom = 0.0f;
		float top = 1.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();
		float left = 0.0f;
		float right = 0.0f;
		float bottom = 0.0f;
		float top = 1.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();
		float left = 0.0f;
		float right = 0.0f;
		float bottom = 0.0f;
		float top = 1.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();
		float left = 0.0f;
		float right = 0.0f;
		float bottom = 0.0f;
		float top = 1.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture1_2()
		throws Exception {
		CameraView fixture = getFixture1();
		float left = 0.0f;
		float right = 0.0f;
		float bottom = 0.0f;
		float top = 1.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		float left = 0.0f;
		float right = 0.0f;
		float bottom = 0.0f;
		float top = 1.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture3_2()
		throws Exception {
		CameraView fixture = getFixture3();
		float left = 0.0f;
		float right = 0.0f;
		float bottom = 0.0f;
		float top = 1.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPort(float,float,float,float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPort_fixture5_2()
		throws Exception {
		CameraView fixture = getFixture5();
		float left = -1.0f;
		float right = -1.0f;
		float bottom = -1.0f;
		float top = -1.0f;

		fixture.setViewPort(left, right, bottom, top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture1_1()
		throws Exception {
		CameraView fixture = getFixture1();
		float bottom = -1.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		float bottom = 0.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		float bottom = 1.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		float bottom = 1.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		float bottom = 1.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		float bottom = 1.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		float bottom = 1.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		float bottom = 1.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		float bottom = 1.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();
		float bottom = 1.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();
		float bottom = 1.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();
		float bottom = 1.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();
		float bottom = 1.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();
		float bottom = 1.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();
		float bottom = 1.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();
		float bottom = 1.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();
		float bottom = 1.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();
		float bottom = 1.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();
		float bottom = 1.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();
		float bottom = 1.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();
		float bottom = 1.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();
		float bottom = 1.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();
		float bottom = 1.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();
		float bottom = 1.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();
		float bottom = 1.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();
		float bottom = 1.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();
		float bottom = 1.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();
		float bottom = 1.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();
		float bottom = 1.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortBottom(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortBottom_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		float bottom = -1.0f;

		fixture.setViewPortBottom(bottom);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture1_1()
		throws Exception {
		CameraView fixture = getFixture1();
		float left = -1.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		float left = 0.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		float left = 1.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		float left = 1.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		float left = 1.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		float left = 1.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		float left = 1.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		float left = 1.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		float left = 1.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();
		float left = 1.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();
		float left = 1.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();
		float left = 1.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();
		float left = 1.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();
		float left = 1.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();
		float left = 1.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();
		float left = 1.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();
		float left = 1.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();
		float left = 1.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();
		float left = 1.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();
		float left = 1.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();
		float left = 1.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();
		float left = 1.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();
		float left = 1.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();
		float left = 1.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();
		float left = 1.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();
		float left = 1.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();
		float left = 1.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();
		float left = 1.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();
		float left = 1.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortLeft(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortLeft_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		float left = -1.0f;

		fixture.setViewPortLeft(left);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture1_1()
		throws Exception {
		CameraView fixture = getFixture1();
		float right = -1.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		float right = 0.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		float right = 1.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		float right = 1.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		float right = 1.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		float right = 1.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		float right = 1.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		float right = 1.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		float right = 1.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();
		float right = 1.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();
		float right = 1.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();
		float right = 1.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();
		float right = 1.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();
		float right = 1.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();
		float right = 1.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();
		float right = 1.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();
		float right = 1.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();
		float right = 1.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();
		float right = 1.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();
		float right = 1.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();
		float right = 1.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();
		float right = 1.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();
		float right = 1.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();
		float right = 1.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();
		float right = 1.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();
		float right = 1.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();
		float right = 1.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();
		float right = 1.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();
		float right = 1.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortRight(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortRight_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		float right = -1.0f;

		fixture.setViewPortRight(right);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture1_1()
		throws Exception {
		CameraView fixture = getFixture1();
		float top = -1.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		float top = 0.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		float top = 1.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		float top = 1.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		float top = 1.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		float top = 1.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		float top = 1.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		float top = 1.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		float top = 1.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();
		float top = 1.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();
		float top = 1.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();
		float top = 1.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();
		float top = 1.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();
		float top = 1.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();
		float top = 1.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();
		float top = 1.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();
		float top = 1.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();
		float top = 1.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();
		float top = 1.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();
		float top = 1.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();
		float top = 1.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();
		float top = 1.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();
		float top = 1.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();
		float top = 1.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();
		float top = 1.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();
		float top = 1.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();
		float top = 1.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();
		float top = 1.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();
		float top = 1.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the void setViewPortTop(float) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testSetViewPortTop_fixture2_2()
		throws Exception {
		CameraView fixture = getFixture2();
		float top = -1.0f;

		fixture.setViewPortTop(top);

		// add additional test code here
	}

	/**
	 * Run the String toString() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
/*	@Test
	public void testToString_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();

		String result = fixture.toString();

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.getDirection(Camera.java:711)
		//       at com.jme3.renderer.Camera.toString(Camera.java:1712)
		assertNotNull(result);
	}
*/
	/**
	 * Run the String toString() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testToString_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		String result = fixture.toString();

		// add additional test code here
		assertEquals("Camera[location=(0.0, 0.0, 0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=1.0, far=2.0]", result);
	}

	/**
	 * Run the String toString() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testToString_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		String result = fixture.toString();

		// add additional test code here
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=false\nnear=-1.0, far=-1.0]", result);
	}

	/**
	 * Run the String toString() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testToString_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		String result = fixture.toString();

		// add additional test code here
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=-1.0]", result);
	}

	/**
	 * Run the String toString() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testToString_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		String result = fixture.toString();

		// add additional test code here
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=-1.0]", result);
	}

	/**
	 * Run the String toString() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testToString_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		String result = fixture.toString();

		// add additional test code here
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=-1.0]", result);
	}

	/**
	 * Run the String toString() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testToString_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		String result = fixture.toString();

		// add additional test code here
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=-1.0]", result);
	}

	/**
	 * Run the String toString() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testToString_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		String result = fixture.toString();

		// add additional test code here
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=-1.0]", result);
	}

	/**
	 * Run the String toString() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testToString_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		String result = fixture.toString();

		// add additional test code here
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=-1.0]", result);
	}

	/**
	 * Run the String toString() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testToString_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		String result = fixture.toString();

		// add additional test code here
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=-1.0]", result);
	}

	/**
	 * Run the String toString() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testToString_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		String result = fixture.toString();

		// add additional test code here
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=-1.0]", result);
	}

	/**
	 * Run the String toString() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testToString_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		String result = fixture.toString();

		// add additional test code here
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=-1.0]", result);
	}

	/**
	 * Run the String toString() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testToString_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		String result = fixture.toString();

		// add additional test code here
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=-1.0]", result);
	}

	/**
	 * Run the String toString() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testToString_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		String result = fixture.toString();

		// add additional test code here
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=-1.0]", result);
	}

	/**
	 * Run the String toString() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testToString_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		String result = fixture.toString();

		// add additional test code here
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=-1.0]", result);
	}

	/**
	 * Run the String toString() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testToString_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		String result = fixture.toString();

		// add additional test code here
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=-1.0]", result);
	}

	/**
	 * Run the String toString() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testToString_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		String result = fixture.toString();

		// add additional test code here
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=0.0]", result);
	}

	/**
	 * Run the String toString() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testToString_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		String result = fixture.toString();

		// add additional test code here
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=0.0]", result);
	}

	/**
	 * Run the String toString() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testToString_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		String result = fixture.toString();

		// add additional test code here
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=0.0]", result);
	}

	/**
	 * Run the String toString() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testToString_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		String result = fixture.toString();

		// add additional test code here
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=0.0]", result);
	}

	/**
	 * Run the String toString() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testToString_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		String result = fixture.toString();

		// add additional test code here
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=0.0]", result);
	}

	/**
	 * Run the String toString() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testToString_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		String result = fixture.toString();

		// add additional test code here
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=0.0]", result);
	}

	/**
	 * Run the String toString() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testToString_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		String result = fixture.toString();

		// add additional test code here
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=0.0]", result);
	}

	/**
	 * Run the String toString() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testToString_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		String result = fixture.toString();

		// add additional test code here
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=0.0]", result);
	}

	/**
	 * Run the String toString() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testToString_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		String result = fixture.toString();

		// add additional test code here
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=0.0]", result);
	}

	/**
	 * Run the String toString() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testToString_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		String result = fixture.toString();

		// add additional test code here
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=0.0]", result);
	}

	/**
	 * Run the String toString() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testToString_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		String result = fixture.toString();

		// add additional test code here
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=0.0]", result);
	}

	/**
	 * Run the String toString() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testToString_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		String result = fixture.toString();

		// add additional test code here
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=0.0]", result);
	}

	/**
	 * Run the String toString() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testToString_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		String result = fixture.toString();

		// add additional test code here
		assertEquals("Camera[location=(-0.0, -0.0, -0.0)\n, direction=(0.0, 0.0, 1.0)\nres=0x0, parallel=true\nnear=0.0, far=0.0]", result);
	}

	/**
	 * Run the void update() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	/*@Test
	public void testUpdate_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();

		fixture.update();

		// add additional test code here
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.onFrustumChange(Camera.java:1440)
		//       at com.jme3.renderer.Camera.update(Camera.java:1004)
	}
*/
	/**
	 * Run the void update() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdate_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		fixture.update();

		// add additional test code here
	}

	/**
	 * Run the void update() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdate_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		fixture.update();

		// add additional test code here
	}

	/**
	 * Run the void update() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdate_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		fixture.update();

		// add additional test code here
	}

	/**
	 * Run the void update() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdate_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		fixture.update();

		// add additional test code here
	}

	/**
	 * Run the void update() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdate_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		fixture.update();

		// add additional test code here
	}

	/**
	 * Run the void update() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdate_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		fixture.update();

		// add additional test code here
	}

	/**
	 * Run the void update() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdate_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		fixture.update();

		// add additional test code here
	}

	/**
	 * Run the void update() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdate_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		fixture.update();

		// add additional test code here
	}

	/**
	 * Run the void update() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdate_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		fixture.update();

		// add additional test code here
	}

	/**
	 * Run the void update() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdate_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		fixture.update();

		// add additional test code here
	}

	/**
	 * Run the void update() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdate_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		fixture.update();

		// add additional test code here
	}

	/**
	 * Run the void update() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdate_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		fixture.update();

		// add additional test code here
	}

	/**
	 * Run the void update() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdate_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		fixture.update();

		// add additional test code here
	}

	/**
	 * Run the void update() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdate_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		fixture.update();

		// add additional test code here
	}

	/**
	 * Run the void update() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdate_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		fixture.update();

		// add additional test code here
	}

	/**
	 * Run the void update() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdate_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		fixture.update();

		// add additional test code here
	}

	/**
	 * Run the void update() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdate_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		fixture.update();

		// add additional test code here
	}

	/**
	 * Run the void update() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdate_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		fixture.update();

		// add additional test code here
	}

	/**
	 * Run the void update() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdate_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		fixture.update();

		// add additional test code here
	}

	/**
	 * Run the void update() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdate_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		fixture.update();

		// add additional test code here
	}

	/**
	 * Run the void update() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdate_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		fixture.update();

		// add additional test code here
	}

	/**
	 * Run the void update() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdate_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		fixture.update();

		// add additional test code here
	}

	/**
	 * Run the void update() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdate_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		fixture.update();

		// add additional test code here
	}

	/**
	 * Run the void update() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdate_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		fixture.update();

		// add additional test code here
	}

	/**
	 * Run the void update() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdate_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		fixture.update();

		// add additional test code here
	}

	/**
	 * Run the void update() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdate_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		fixture.update();

		// add additional test code here
	}

	/**
	 * Run the void update() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdate_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		fixture.update();

		// add additional test code here
	}

	/**
	 * Run the void update() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdate_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		fixture.update();

		// add additional test code here
	}

	/**
	 * Run the void updateViewProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	/*@Test
	public void testUpdateViewProjection_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();

		fixture.updateViewProjection();

		// add additional test code here
	}*/

	/**
	 * Run the void updateViewProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdateViewProjection_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();

		fixture.updateViewProjection();

		// add additional test code here
	}

	/**
	 * Run the void updateViewProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdateViewProjection_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();

		fixture.updateViewProjection();

		// add additional test code here
	}

	/**
	 * Run the void updateViewProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdateViewProjection_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();

		fixture.updateViewProjection();

		// add additional test code here
	}

	/**
	 * Run the void updateViewProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdateViewProjection_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();

		fixture.updateViewProjection();

		// add additional test code here
	}

	/**
	 * Run the void updateViewProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdateViewProjection_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();

		fixture.updateViewProjection();

		// add additional test code here
	}

	/**
	 * Run the void updateViewProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdateViewProjection_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();

		fixture.updateViewProjection();

		// add additional test code here
	}

	/**
	 * Run the void updateViewProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdateViewProjection_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();

		fixture.updateViewProjection();

		// add additional test code here
	}

	/**
	 * Run the void updateViewProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdateViewProjection_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();

		fixture.updateViewProjection();

		// add additional test code here
	}

	/**
	 * Run the void updateViewProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdateViewProjection_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();

		fixture.updateViewProjection();

		// add additional test code here
	}

	/**
	 * Run the void updateViewProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdateViewProjection_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();

		fixture.updateViewProjection();

		// add additional test code here
	}

	/**
	 * Run the void updateViewProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdateViewProjection_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();

		fixture.updateViewProjection();

		// add additional test code here
	}

	/**
	 * Run the void updateViewProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdateViewProjection_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();

		fixture.updateViewProjection();

		// add additional test code here
	}

	/**
	 * Run the void updateViewProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdateViewProjection_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();

		fixture.updateViewProjection();

		// add additional test code here
	}

	/**
	 * Run the void updateViewProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdateViewProjection_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();

		fixture.updateViewProjection();

		// add additional test code here
	}

	/**
	 * Run the void updateViewProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdateViewProjection_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();

		fixture.updateViewProjection();

		// add additional test code here
	}

	/**
	 * Run the void updateViewProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdateViewProjection_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();

		fixture.updateViewProjection();

		// add additional test code here
	}

	/**
	 * Run the void updateViewProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdateViewProjection_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();

		fixture.updateViewProjection();

		// add additional test code here
	}

	/**
	 * Run the void updateViewProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdateViewProjection_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();

		fixture.updateViewProjection();

		// add additional test code here
	}

	/**
	 * Run the void updateViewProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdateViewProjection_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();

		fixture.updateViewProjection();

		// add additional test code here
	}

	/**
	 * Run the void updateViewProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdateViewProjection_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();

		fixture.updateViewProjection();

		// add additional test code here
	}

	/**
	 * Run the void updateViewProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdateViewProjection_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();

		fixture.updateViewProjection();

		// add additional test code here
	}

	/**
	 * Run the void updateViewProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdateViewProjection_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();

		fixture.updateViewProjection();

		// add additional test code here
	}

	/**
	 * Run the void updateViewProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdateViewProjection_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();

		fixture.updateViewProjection();

		// add additional test code here
	}

	/**
	 * Run the void updateViewProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdateViewProjection_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();

		fixture.updateViewProjection();

		// add additional test code here
	}

	/**
	 * Run the void updateViewProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdateViewProjection_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();

		fixture.updateViewProjection();

		// add additional test code here
	}

	/**
	 * Run the void updateViewProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdateViewProjection_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();

		fixture.updateViewProjection();

		// add additional test code here
	}

	/**
	 * Run the void updateViewProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdateViewProjection_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();

		fixture.updateViewProjection();

		// add additional test code here
	}

	/**
	 * Run the void updateViewProjection() method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testUpdateViewProjection_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();

		fixture.updateViewProjection();

		// add additional test code here
	}

	/**
	 * Run the void write(JmeExporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	/*@Test
	public void testWrite_fixture1_1()
		throws Exception {
		Camera fixture = getFixture1();
		JmeExporter e = EasyMock.createMock(JmeExporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.write(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.write(Camera.java:1719)
	}
*/
	/**
	 * Run the void write(JmeExporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testWrite_fixture2_1()
		throws Exception {
		CameraView fixture = getFixture2();
		JmeExporter e = EasyMock.createMock(JmeExporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.write(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.write(Camera.java:1719)
	}

	/**
	 * Run the void write(JmeExporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testWrite_fixture3_1()
		throws Exception {
		CameraView fixture = getFixture3();
		JmeExporter e = EasyMock.createMock(JmeExporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.write(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.write(Camera.java:1719)
	}

	/**
	 * Run the void write(JmeExporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testWrite_fixture4_1()
		throws Exception {
		CameraView fixture = getFixture4();
		JmeExporter e = EasyMock.createMock(JmeExporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.write(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.write(Camera.java:1719)
	}

	/**
	 * Run the void write(JmeExporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testWrite_fixture5_1()
		throws Exception {
		CameraView fixture = getFixture5();
		JmeExporter e = EasyMock.createMock(JmeExporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.write(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.write(Camera.java:1719)
	}

	/**
	 * Run the void write(JmeExporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testWrite_fixture6_1()
		throws Exception {
		CameraView fixture = getFixture6();
		JmeExporter e = EasyMock.createMock(JmeExporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.write(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.write(Camera.java:1719)
	}

	/**
	 * Run the void write(JmeExporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testWrite_fixture7_1()
		throws Exception {
		CameraView fixture = getFixture7();
		JmeExporter e = EasyMock.createMock(JmeExporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.write(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.write(Camera.java:1719)
	}

	/**
	 * Run the void write(JmeExporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testWrite_fixture8_1()
		throws Exception {
		CameraView fixture = getFixture8();
		JmeExporter e = EasyMock.createMock(JmeExporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.write(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.write(Camera.java:1719)
	}

	/**
	 * Run the void write(JmeExporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testWrite_fixture9_1()
		throws Exception {
		CameraView fixture = getFixture9();
		JmeExporter e = EasyMock.createMock(JmeExporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.write(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.write(Camera.java:1719)
	}

	/**
	 * Run the void write(JmeExporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testWrite_fixture10_1()
		throws Exception {
		CameraView fixture = getFixture10();
		JmeExporter e = EasyMock.createMock(JmeExporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.write(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.write(Camera.java:1719)
	}

	/**
	 * Run the void write(JmeExporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testWrite_fixture11_1()
		throws Exception {
		CameraView fixture = getFixture11();
		JmeExporter e = EasyMock.createMock(JmeExporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.write(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.write(Camera.java:1719)
	}

	/**
	 * Run the void write(JmeExporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testWrite_fixture12_1()
		throws Exception {
		CameraView fixture = getFixture12();
		JmeExporter e = EasyMock.createMock(JmeExporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.write(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.write(Camera.java:1719)
	}

	/**
	 * Run the void write(JmeExporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testWrite_fixture13_1()
		throws Exception {
		CameraView fixture = getFixture13();
		JmeExporter e = EasyMock.createMock(JmeExporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.write(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.write(Camera.java:1719)
	}

	/**
	 * Run the void write(JmeExporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testWrite_fixture14_1()
		throws Exception {
		CameraView fixture = getFixture14();
		JmeExporter e = EasyMock.createMock(JmeExporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.write(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.write(Camera.java:1719)
	}

	/**
	 * Run the void write(JmeExporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testWrite_fixture15_1()
		throws Exception {
		CameraView fixture = getFixture15();
		JmeExporter e = EasyMock.createMock(JmeExporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.write(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.write(Camera.java:1719)
	}

	/**
	 * Run the void write(JmeExporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testWrite_fixture16_1()
		throws Exception {
		CameraView fixture = getFixture16();
		JmeExporter e = EasyMock.createMock(JmeExporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.write(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.write(Camera.java:1719)
	}

	/**
	 * Run the void write(JmeExporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testWrite_fixture17_1()
		throws Exception {
		CameraView fixture = getFixture17();
		JmeExporter e = EasyMock.createMock(JmeExporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.write(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.write(Camera.java:1719)
	}

	/**
	 * Run the void write(JmeExporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testWrite_fixture18_1()
		throws Exception {
		CameraView fixture = getFixture18();
		JmeExporter e = EasyMock.createMock(JmeExporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.write(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.write(Camera.java:1719)
	}

	/**
	 * Run the void write(JmeExporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testWrite_fixture19_1()
		throws Exception {
		CameraView fixture = getFixture19();
		JmeExporter e = EasyMock.createMock(JmeExporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.write(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.write(Camera.java:1719)
	}

	/**
	 * Run the void write(JmeExporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testWrite_fixture20_1()
		throws Exception {
		CameraView fixture = getFixture20();
		JmeExporter e = EasyMock.createMock(JmeExporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.write(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.write(Camera.java:1719)
	}

	/**
	 * Run the void write(JmeExporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testWrite_fixture21_1()
		throws Exception {
		CameraView fixture = getFixture21();
		JmeExporter e = EasyMock.createMock(JmeExporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.write(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.write(Camera.java:1719)
	}

	/**
	 * Run the void write(JmeExporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testWrite_fixture22_1()
		throws Exception {
		CameraView fixture = getFixture22();
		JmeExporter e = EasyMock.createMock(JmeExporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.write(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.write(Camera.java:1719)
	}

	/**
	 * Run the void write(JmeExporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testWrite_fixture23_1()
		throws Exception {
		CameraView fixture = getFixture23();
		JmeExporter e = EasyMock.createMock(JmeExporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.write(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.write(Camera.java:1719)
	}

	/**
	 * Run the void write(JmeExporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testWrite_fixture24_1()
		throws Exception {
		CameraView fixture = getFixture24();
		JmeExporter e = EasyMock.createMock(JmeExporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.write(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.write(Camera.java:1719)
	}

	/**
	 * Run the void write(JmeExporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testWrite_fixture25_1()
		throws Exception {
		CameraView fixture = getFixture25();
		JmeExporter e = EasyMock.createMock(JmeExporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.write(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.write(Camera.java:1719)
	}

	/**
	 * Run the void write(JmeExporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testWrite_fixture26_1()
		throws Exception {
		CameraView fixture = getFixture26();
		JmeExporter e = EasyMock.createMock(JmeExporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.write(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.write(Camera.java:1719)
	}

	/**
	 * Run the void write(JmeExporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testWrite_fixture27_1()
		throws Exception {
		CameraView fixture = getFixture27();
		JmeExporter e = EasyMock.createMock(JmeExporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.write(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.write(Camera.java:1719)
	}

	/**
	 * Run the void write(JmeExporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testWrite_fixture28_1()
		throws Exception {
		CameraView fixture = getFixture28();
		JmeExporter e = EasyMock.createMock(JmeExporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.write(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.write(Camera.java:1719)
	}

	/**
	 * Run the void write(JmeExporter) method test.
	 *
	 * @throws Exception
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Test
	public void testWrite_fixture29_1()
		throws Exception {
		CameraView fixture = getFixture29();
		JmeExporter e = EasyMock.createMock(JmeExporter.class);
		// add mock object expectations here

		EasyMock.replay(e);

		fixture.write(e);

		// add additional test code here
		EasyMock.verify(e);
		// An unexpected exception was thrown in user code while executing this test:
		//    java.lang.NullPointerException
		//       at com.jme3.renderer.Camera.write(Camera.java:1719)
	}

	/**
	 * Perform pre-test initialization.
	 *
	 * @throws Exception
	 *         if the initialization fails for some reason
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@Before
	public void setUp()
		throws Exception {
		// add additional set up code here
	}

	/**
	 * Perform post-test clean-up.
	 *
	 * @throws Exception
	 *         if the clean-up fails for some reason
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	@After
	public void tearDown()
		throws Exception {
		// Add additional tear down code here
	}

	/**
	 * Launch the test.
	 *
	 * @param args the command line arguments
	 *
	 * @generatedBy CodePro at 2013-01-07 19:30
	 */
	public static void main(String[] args) {
		new org.junit.runner.JUnitCore().run(CameraTest.class);
	}
}
